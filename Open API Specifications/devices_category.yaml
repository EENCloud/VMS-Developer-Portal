---
openapi: 3.0.3
info:
  title: DEVICES
  version: 3.0.0
servers:
  - url: 'https://{BaseUrl}/api/v3.0'
    description: Eagle Eye Networks API Server
    variables:
      BaseUrl:
        default: api.cxxx.eagleeyenetworks.com
        description: >-
          HTTPS Base url to use for all API calls, retrieved from
          https://api.eagleeyenetworks.com/api/v3.0/clientSettings
security:
  - bearerAuth: []
tags:
  - name: Cameras
    description: All core operations on cameras.
  - name: Bridges
    description: All core operations on bridges.
  - name: PTZ
    description: Retrieve and control the camera using pan tilt and zoom controls.
  - name: Speakers
    description: >-
      All core operations on one speakers, which are can be used to broadcast
      audio.
  - name: Device I/O
    description: Operations on device I/O ports.
  - name: Switches
    description: All core operations on switches.
  - name: Multi Cameras
    description: Core operation on multi camera devices.
  - name: Available Devices
    description: Automatically discovered devices that can be added to the account.
paths:
  /cameras:
    get:
      operationId: listCameras
      description: >
        This endpoint allows you to retrieve a list of cameras associated with
        the account, with the ability to filter by account ID, location ID,
        bridge ID, multi-camera ID, and tags. It also supports pagination and
        the ability to include additional information about cameras.

        It is important to note that after using the pageSize parameter, the
        "totalSize" in the response represents the total number of available
        cameras, not the number of cameras resulting from the query string.
      tags:
        - Cameras
      parameters:
        - $ref: '#/components/parameters/locationId__in'
        - $ref: '#/components/parameters/bridgeId__in'
        - $ref: '#/components/parameters/multiCameraId'
        - $ref: '#/components/parameters/multiCameraId__ne'
        - $ref: '#/components/parameters/multiCameraId__in'
        - $ref: '#/components/parameters/tags__contains'
        - $ref: '#/components/parameters/tags__any'
        - $ref: '#/components/parameters/packages__contains'
        - $ref: '#/components/parameters/layoutId'
        - $ref: '#/components/parameters/name__contains'
        - $ref: '#/components/parameters/name__in'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/id__in'
        - $ref: '#/components/parameters/id__notIn'
        - $ref: '#/components/parameters/id__contains'
        - $ref: '#/components/parameters/shared'
        - $ref: '#/components/parameters/sharedCameraAccount'
        - $ref: '#/components/parameters/firstResponder'
        - $ref: '#/components/parameters/directToCloud'
        - $ref: '#/components/parameters/speakerId__in'
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/qRelevance__gte'
        - $ref: '#/components/parameters/enabledAnalytics__contains'
        - $ref: '#/components/parameters/status__in'
        - $ref: '#/components/parameters/status__ne'
        - $ref: '#/components/parameters/includeForList'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPaginatedCameraResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    post:
      operationId: addCamera
      description: >
        Associates a camera with the account. This can only be called with an
        end-user account, and will result in an error if tried with any other
        type of account.
      tags:
        - Cameras
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAddCamera'
      responses:
        '201':
          description: Camera added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiCameraMain'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '409':
          description: There was a conflict while trying to perform your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiV3Error'
              examples:
                deviceIdentificationFailed:
                  description: >
                    Part of adding a camera is identifying its make, model and
                    sometimes firmware version to decide if it is supported.
                    This can fail due to  various reasons such as unexpected API
                    responses from the camera, or an unsupported camera make
                    (manufacturer). If this problem occurs, a user could try to
                    restart the camera, reset it, or if that fails contacting
                    support to check the brand & model are supported.
                  value:
                    code: 409
                    status: aborted
                    message: >-
                      Camera addition job aborted: failed to identify device
                      make and model.
                    details:
                      - type: errorInfo
                        reason: deviceIdentificationFailed
                        domain: add.cameras.job
                        metadata:
                          path: /api/v3.0/cameras
                unsupportedModel:
                  description: >
                    Camera's model is not supported and cannot be added to the
                    system. The camera might just be of a not supported model.
                    Check the supported models on our website or with our
                    support.
                  value:
                    code: 409
                    status: aborted
                    message: >-
                      Camera addition job aborted: Camera's model is not
                      supported.
                    details:
                      - type: errorInfo
                        reason: unsupportedModel
                        domain: add.cameras.job
                        metadata:
                          path: /api/v3.0/cameras
                credentialValidationFailed:
                  description: >
                    The camera could not be configured because it's using
                    unknown credentials. Make sure to factory default reset the
                    camera before trying again.
                  value:
                    code: 409
                    status: aborted
                    message: >-
                      Camera addition job aborted: camera uses unknown
                      credentials. Factory reset the camera before retrying.
                    details:
                      - type: errorInfo
                        reason: credentialValidationFailed
                        domain: add.cameras.job
                        metadata:
                          path: /api/v3.0/cameras
                localUrlValidationFailed:
                  description: >
                    One step of the camera addition is to retrieve the URL used
                    in the local network where the camera is. This step could
                    not be performed. Possible reasons: the camera or the
                    network is offline.
                  value:
                    code: 409
                    status: aborted
                    message: >-
                      Camera addition job aborted: failed to retrieve the
                      camera's local URL.
                    details:
                      - type: errorInfo
                        reason: localUrlValidationFailed
                        domain: add.cameras.job
                        metadata:
                          path: /api/v3.0/cameras
                alreadyExists:
                  description: >
                    The camera you're trying to add is already added or
                    currently being added in the system. There cannot be
                    duplicated camera (using the same MAC address or GUID). Make
                    sure to remove the existing one before you proceed to add it
                    again.
                  value:
                    code: 409
                    status: conflict
                    message: The resource already exists.
                    details:
                      - type: errorInfo
                        reason: alreadyExists
                        domain: apiv3
                        metadata:
                          path: /api/v3.0/<resource>
                quotaExceeded:
                  description: >
                    Your bridge only supports a maximum of 10 cameras. You
                    cannot add more cameras to it.
                  value:
                    code: 409
                    status: conflict
                    message: Cannot add camera. Bridge only supports 10 cameras.
                    details:
                      - type: errorInfo
                        reason: quotaExceeded
                        domain: apiv3
                        metadata:
                          path: /api/v3.0/cameras
        '500':
          description: The request encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiV3Error'
              examples:
                hwRegistrationFailed:
                  description: >
                    One of the internal service failed to be reached and
                    therefore the camera could not start its addition process.
                    Try again or contact support if the error persist.
                  value:
                    code: 500
                    status: internal
                    message: >-
                      Unexpected error while registering the MAC address in
                      order to initiate the camera addition.
                    details:
                      - type: errorInfo
                        reason: hwRegistrationFailed
                        domain: add.cameras.job
                        metadata:
                          path: /api/v3.0/cameras
                credentialSetupFailed:
                  description: >
                    Our system encountered an unexpected error while preparing
                    the credentials to use for configuring the camera. Try again
                    or contact support if the error persist.
                  value:
                    code: 500
                    status: internal
                    message: >-
                      Unexpected error while preparing the credentials to be set
                      to the camera. Please retry or contact our support.
                    details:
                      - type: errorInfo
                        reason: credentialSetupFailed
                        domain: add.cameras.job
                        metadata:
                          path: /api/v3.0/cameras
                failedAddingCameraAfterValidation:
                  description: >
                    Our system encountered an unexpected error while taking the
                    last step for adding the camera. This is an error on the
                    system side not on the camera side. The camera is possibly
                    reset to factory default. Please try again or contact our
                    support if the problem persists.
                  value:
                    code: 500
                    status: internal
                    message: >-
                      Unexpected error while finalizing the camera addition.
                      Please retry or contact our support.
                    details:
                      - type: errorInfo
                        reason: failedAddingCameraAfterValidation
                        domain: add.cameras.job
                        metadata:
                          path: /api/v3.0/cameras
        '504':
          description: >-
            The request had a deadline that expired before the operation
            completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiV3Error'
              examples:
                neverConnected:
                  description: >
                    The camera addition process failed because the camera did
                    not communicate with our system for at least 3 minutes. Make
                    sure the camera has reliable internet connection, or try to
                    factory default reset the camera before trying again.
                  value:
                    code: 504
                    status: deadlineExceeded
                    message: >-
                      Camera addition job deadline exceeded: the camera never
                      connected. Make sure it has an internet connection and is
                      turned on.
                    details:
                      - type: errorInfo
                        reason: neverConnected
                        domain: add.cameras.job
                        metadata:
                          path: /api/v3.0/cameras
                reconnectFailed:
                  description: >
                    The camera addition process failed because the camera did
                    not connect to our system after the initial validation step.
                    This can happen if the camera lost internet connection for
                    instance. You may need to factory default reset your camera
                    before being able to add it again.
                  value:
                    code: 504
                    status: deadlineExceeded
                    message: >-
                      Camera addition job deadline exceeded: after the camera
                      validation succeeded, the camera didn't reconnect in time.
                    details:
                      - type: errorInfo
                        reason: reconnectFailed
                        domain: add.cameras.job
                        metadata:
                          path: /api/v3.0/cameras
  '/cameras:bulkUpdate':
    post:
      operationId: updateBulkCameras
      description: >
        This endpoint allows the developer to update multiple cameras at once by
        providing update fields.
      tags:
        - Cameras
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiUpdateBulkCamera'
      responses:
        '201':
          description: Cameras updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CameraBulkUpdate'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/cameras/{cameraId}':
    parameters:
      - $ref: '#/components/parameters/cameraId'
    get:
      operationId: getCamera
      description: Retrieves the given camera.
      tags:
        - Cameras
      parameters:
        - $ref: '#/components/parameters/includeForSingle'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiCameraForSingle'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    delete:
      operationId: deleteCamera
      description: >
        This endpoint disassociates the camera from the account, removing all
        references, recordings, and events, and in some cases resetting the
        camera to factory default settings. This request will be blocked until
        the camera has been fully removed.
      tags:
        - Cameras
      responses:
        '204':
          description: Camera deleted.
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      operationId: updateCamera
      description: >-
        This endpoint allows the developers to update a specific camera by
        providing update fields.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiCameraUpdate'
      tags:
        - Cameras
      responses:
        '204':
          description: Camera Updated
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/cameras/{cameraId}/tunnel':
    parameters:
      - $ref: '#/components/parameters/cameraId'
    put:
      operationId: putCameraTunnel
      description: >
        Opens a camera tunnel. As this API is intended for incidental access to
        the cameras UI, it should not be used for general API integration.
      tags:
        - Cameras
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTunnelResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    delete:
      operationId: deleteCameraTunnel
      description: |
        Deletes a camera tunnel.
      tags:
        - Cameras
      responses:
        '204':
          description: Camera tunnel deleted.
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/cameras/{cameraId}/metrics':
    get:
      description: Returns metrics data.
      operationId: getCameraMetrics
      parameters:
        - $ref: '#/components/parameters/cameraId'
        - $ref: '#/components/parameters/timestamp__lte'
        - $ref: '#/components/parameters/timestamp__gte'
        - $ref: '#/components/parameters/target__in'
        - $ref: '#/components/parameters/period'
      tags:
        - Cameras
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricQueryResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/cameras/{cameraId}:swap':
    parameters:
      - $ref: '#/components/parameters/cameraId'
    patch:
      operationId: swapCamera
      description: >
        Swap any camera with a new one.

        If the device is not visible by the bridge, API is going to throw a 404
        error.

        If the GUID has already been attached to the account, API is going to
        throw a 409 error.

        If the provided GUID is in wrong format, API is going to throw 400
        error.
      tags:
        - Cameras
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CameraSwap'
      responses:
        '204':
          description: Camera swap operation success.
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/cameras/{cameraId}/io/ports':
    parameters:
      - $ref: '#/components/parameters/cameraId'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/pageSize'
    get:
      operationId: getIoPorts
      parameters:
        - $ref: '#/components/parameters/include'
      description: |
        Retrieves list of device IO ports.
      tags:
        - Cameras
      responses:
        '200':
          description: Successfully fetched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPortResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/cameras/{cameraId}/io/ports/{portId}':
    parameters:
      - $ref: '#/components/parameters/cameraId'
      - $ref: '#/components/parameters/portId'
    get:
      operationId: getIoPort
      parameters:
        - $ref: '#/components/parameters/include'
      description: |
        Retrieves the device port.
      tags:
        - Cameras
      responses:
        '200':
          description: Successfully fetched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortGet'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      operationId: updateIoPort
      description: >-
        Update the port configuration. Allowed properties depends on the port
        type.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortPatch'
      tags:
        - Cameras
      responses:
        '204':
          description: Port Updated
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/cameras/{cameraId}/settings':
    parameters:
      - $ref: '#/components/parameters/cameraId'
    get:
      operationId: getCameraSettings
      tags:
        - Cameras
      parameters:
        - $ref: '#/components/parameters/include1'
      description: >
        Retrieves the current settings for the given camera. 


        Since cameras, the bridge they are connected to and the accounts they
        are part of can have different 

        capabilities, not all settings given in this specification will be
        applicable to all cameras. 

        If a setting is applicable, it will be returned by the API, if not, the
        field(s) will be skipped.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CameraSettings'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      operationId: updateCameraSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CameraSettings'
      tags:
        - Cameras
      description: >
        Updates the settings of a camera.


        It will throw an error if the setting in the payload is not supported by
        a camera type. 

        It won't apply any settings in case of error.
      responses:
        '204':
          description: Camera Updated
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  /bridges:
    get:
      operationId: listBridges
      description: >
        A list of bridges can be retrieved using this endpoint.  

        It is important to note that after using the pageSize parameter, the
        "totalSize" in the response represents the total number  of available
        bridges, not the number of bridges resulting from the query string.
      tags:
        - Bridges
      parameters:
        - $ref: '#/components/parameters/includeForList1'
        - $ref: '#/components/parameters/sort1'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/locationId__in'
        - $ref: '#/components/parameters/tags__contains1'
        - $ref: '#/components/parameters/tags__any1'
        - $ref: '#/components/parameters/name__contains1'
        - $ref: '#/components/parameters/name__in1'
        - $ref: '#/components/parameters/name1'
        - $ref: '#/components/parameters/id__in1'
        - $ref: '#/components/parameters/id__contains1'
        - $ref: '#/components/parameters/q1'
        - $ref: '#/components/parameters/qRelevance__gte'
        - $ref: '#/components/parameters/status__in'
        - $ref: '#/components/parameters/status__ne'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPaginatedBridgeResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    post:
      description: Create the bridge for the account with given connect id
      operationId: createBridge
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiBridgeCreate'
      responses:
        '201':
          description: Bridge Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiBridgeMain'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/internalServerError'
      tags:
        - Bridges
  '/bridges:bulkUpdate':
    post:
      operationId: updateBulkBridges
      description: |
        This endpoints updates multiple bridges with provided updateField.
      tags:
        - Bridges
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiUpdateBulkBridge'
      responses:
        '201':
          description: Bridges updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BridgeBulkUpdate'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/bridges/{bridgeId}':
    parameters:
      - $ref: '#/components/parameters/bridgeId'
    patch:
      description: Update the bridge for the account with given bridge id
      operationId: updateBridge
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiBridgeUpdate'
      responses:
        '204':
          description: Bridge Updated
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
      tags:
        - Bridges
    get:
      operationId: getBridge
      description: Retrieves the given bridge.
      tags:
        - Bridges
      parameters:
        - $ref: '#/components/parameters/includeForSingle1'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiBridgeForSingle'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    delete:
      operationId: deleteBridge
      description: >-
        Removes the given bridge from the account, resetting it in the process
        and removing all cameras that were connected to it.
      responses:
        '204':
          description: Bridge deleted.
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '409':
          description: There was a conflict while trying to perform your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiV3Error'
              examples:
                childDevicesExist:
                  $ref: >-
                    #/components/responses/conflict/content/application~1json/examples/childDevicesExist
        '500':
          $ref: '#/components/responses/internalServerError'
      tags:
        - Bridges
  '/bridges/{bridgeId}/metrics':
    get:
      description: Returns metrics data.
      operationId: getBridgeMetrics
      parameters:
        - $ref: '#/components/parameters/bridgeId'
        - $ref: '#/components/parameters/timestamp__lte'
        - $ref: '#/components/parameters/timestamp__gte'
        - $ref: '#/components/parameters/target__in1'
        - $ref: '#/components/parameters/period'
      tags:
        - Bridges
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricQueryResponse2'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/bridges/{bridgeId}:swap':
    parameters:
      - $ref: '#/components/parameters/bridgeId'
    patch:
      operationId: swapBridge
      description: >
        Swap bridge with a new one.

        The original bridge must be offline and disconnected, if not API is
        going to throw 400 error.

        If the GUID is not added to the account or GUID has already been
        attached to another account API is going to throw 404 error.

        If the provided GUID is in wrong format, API is going to throw 400
        error.
      tags:
        - Bridges
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BridgeSwap'
      responses:
        '204':
          description: Bridge swap operation success.
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/bridges/{bridgeId}/actions':
    parameters:
      - $ref: '#/components/parameters/bridgeId'
    post:
      operationId: bridgeAction
      description: >
        This endpoint is used to perform actions on a bridge. Currently, the
        only action available is rebooting the bridge.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiBridgePostAction'
      responses:
        '204':
          description: Action Queued
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
      tags:
        - Bridges
  '/bridges/{id}/settings/':
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: getBridgeSettings
      description: |-
        Get all the configurable operational settings related to
        a bridge
      tags:
        - Bridges
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BridgeSettingsGet'
          description: OK
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      operationId: updateBridgeSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BridgeSettingsPatch'
      tags:
        - Bridges
      description: |
        Updates the settings of a bridge.
      responses:
        '204':
          description: Camera Updated
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/cameras/{cameraId}/ptz/position':
    parameters:
      - $ref: '#/components/parameters/cameraId1'
    get:
      operationId: getCurrentPosition
      description: >
        This endpoint returns the current position of the camera. The response
        includes the pan, tilt, and zoom values of the camera. If the camera
        does not support pan or  tilt or zoom, the corresponding value will not
        be present in the response.
      tags:
        - PTZ
      responses:
        '200':
          description: Current PTZ position of camera.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPtzPosition'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/internalServerError'
    put:
      operationId: moveTo
      description: >
        This endpoint moves the camera to a specific position, in a specific
        direction, or to a specific center point on the screen. The endpoint
        accepts a move object that can be either a position move, a direction
        move or a center move.
      tags:
        - PTZ
      requestBody:
        description: >
          Describes where to move the camera to, this could be either a
          directional, center or position move object. For a position move it is
          possible to only specify the zoom or the pan and tilt you want to
          move. It is of course also possible to give all 3 coordinates.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPtzMove'
            examples:
              Direction:
                value:
                  moveType: direction
                  direction:
                    - up
                  stepSize: large
              Position:
                value:
                  moveType: position
                  x: 0.12345
                  'y': -0.98765
                  z: 0.45678
              Center:
                value:
                  moveType: centerOn
                  relativeX: 0.3148
                  relativeY: 0.732
      responses:
        '204':
          description: Camera moved to given position.
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/cameras/{cameraId}/ptz/settings':
    parameters:
      - $ref: '#/components/parameters/cameraId2'
    get:
      operationId: getPtzSettings
      description: Retrieves the PTZ settings for the given camera.
      tags:
        - PTZ
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PtzSettingsGet'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      operationId: updatePtzSettings
      description: Updates the PTZ settings for the given camera.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PtzSettings'
      tags:
        - PTZ
      responses:
        '204':
          description: Camera Updated
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  /speakers:
    get:
      operationId: listSpeakers
      description: >
        Retrieving a list of speakers is possible with this endpoint.  

        It is important to note that after using the pageSize parameter, the
        "totalSize" in the response represents the total number of available
        speakers,  not the number of speakers resulting from the query string.
      tags:
        - Speakers
      parameters:
        - $ref: '#/components/parameters/includeForList2'
        - $ref: '#/components/parameters/sort2'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/locationId__in'
        - $ref: '#/components/parameters/bridgeId__in1'
        - $ref: '#/components/parameters/tags__contains2'
        - $ref: '#/components/parameters/tags__any2'
        - $ref: '#/components/parameters/name__contains2'
        - $ref: '#/components/parameters/name__in2'
        - $ref: '#/components/parameters/name2'
        - $ref: '#/components/parameters/id__in2'
        - $ref: '#/components/parameters/id__contains2'
        - $ref: '#/components/parameters/q2'
        - $ref: '#/components/parameters/qRelevance__gte'
        - $ref: '#/components/parameters/status__in'
        - $ref: '#/components/parameters/status__ne'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSpeakerResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    post:
      operationId: addSpeaker
      description: By using this endpoint you can create a speaker.
      tags:
        - Speakers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAddSpeaker'
      responses:
        '201':
          description: Speaker added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpeakerMain'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/speakers/{speakerId}':
    parameters:
      - in: path
        name: speakerId
        schema:
          type: string
        required: true
    get:
      operationId: getSpeaker
      description: This endpoint allows you to retrieve a specific speaker.
      tags:
        - Speakers
      parameters:
        - $ref: '#/components/parameters/includeForSingle2'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeakerForSingle'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      operationId: updateSpeaker
      description: This endpoint allows you to update a specific speaker.
      tags:
        - Speakers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSpeakerUpdate'
      responses:
        '204':
          description: Speaker updated
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    delete:
      operationId: deleteSpeaker
      description: >
        This endpoint allows you to dis-associate a speaker from the account,
        removing all references, recordings, and events.  
         
        This request will be blocked until the speaker has been fully removed.
      tags:
        - Speakers
      responses:
        '204':
          description: Speaker deleted.
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/speakers/{speakerId}/settings':
    parameters:
      - $ref: '#/components/parameters/speakerId'
    get:
      operationId: getSpeakerSettings
      tags:
        - Speakers
      parameters:
        - $ref: '#/components/parameters/settingsInclude'
      description: |
        Retrieves the current settings for the given speaker. 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedSettings'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      operationId: updateSpeakerSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdvancedSettings'
      tags:
        - Speakers
      description: |
        Updates the settings of a speaker.
      responses:
        '204':
          description: Speaker Updated
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/devices/{deviceId}/io/ports':
    parameters:
      - $ref: '#/components/parameters/deviceId'
    get:
      operationId: getPorts
      parameters:
        - $ref: '#/components/parameters/include'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/pageSize'
      description: |
        Retrieves list of device IO ports.
      tags:
        - Device I/O
      responses:
        '200':
          description: Successfully fetched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPortResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/devices/{deviceId}/io/ports/{portId}':
    parameters:
      - $ref: '#/components/parameters/deviceId'
      - $ref: '#/components/parameters/portId'
    get:
      operationId: getPort
      parameters:
        - $ref: '#/components/parameters/include'
      description: |
        Retrieves the device port.
      tags:
        - Device I/O
      responses:
        '200':
          description: Successfully fetched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortGet'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      operationId: updatePort
      description: >-
        Update the port configuration. Allowed properties depends on the port
        type.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortPatch'
      tags:
        - Device I/O
      responses:
        '204':
          description: Port Updated
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/devices/{deviceId}/io/ports/{portId}/recordingActions':
    parameters:
      - $ref: '#/components/parameters/deviceId'
      - $ref: '#/components/parameters/portId'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/pageSize'
    get:
      operationId: getPortRecorders
      description: >
        Retrieves the list of all cameras that can be activated to record video,
        including those that are currently enabled for recording actions on this
        port.
      tags:
        - Device I/O
      responses:
        '200':
          description: Successfully fetched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPortRecordingActionResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/devices/{deviceId}/io/ports/{portId}/recordingActions/{cameraId}':
    parameters:
      - $ref: '#/components/parameters/deviceId'
      - $ref: '#/components/parameters/portId'
      - $ref: '#/components/parameters/cameraId'
    get:
      operationId: getPortRecorder
      description: |
        Retrieves the recording action information for the camera and IO Port
      tags:
        - Device I/O
      responses:
        '200':
          description: Successfully fetched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortRecordingActionGet'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      operationId: updatePortRecorder
      description: Update the recording action configuration for the given camera and port.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortRecordingActionPatch'
      tags:
        - Device I/O
      responses:
        '204':
          description: Port Recorder Updated
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  /switches:
    get:
      operationId: listSwitches
      description: >
        This endpoint allows users to retrieve a paginated list of switches
        within a given account.  

        It is important to note that after using the pageSize parameter, the
        "totalSize" in the response  represents the total number of available
        switches, not the number of switches resulting from the query string.
      tags:
        - Switches
      parameters:
        - $ref: '#/components/parameters/id__in3'
        - $ref: '#/components/parameters/name__contains3'
        - $ref: '#/components/parameters/id__contains3'
        - $ref: '#/components/parameters/include2'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPaginatedSwitchResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/switches/{switchId}':
    parameters:
      - $ref: '#/components/parameters/switchId'
    get:
      operationId: getSwitch
      description: >-
        This endpoint allows users to retrieve a specific switch based on its
        id.
      tags:
        - Switches
      parameters:
        - $ref: '#/components/parameters/include2'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSwitchWithIncludes'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      description: This endpoint allows users to update a given switch.
      operationId: updateSwitch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSwitchUpdate'
      responses:
        '204':
          description: Switch Updated
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
      tags:
        - Switches
  '/switches/{switchId}/ports/{portId}/actions':
    parameters:
      - $ref: '#/components/parameters/switchId'
      - $ref: '#/components/parameters/portId1'
    post:
      operationId: updatePort1
      description: >-
        A specific port can be turned On/Off with this endpoint. A port can also
        be power cycled.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSwitchPortUpdate'
      responses:
        '204':
          description: Port Updated
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
      tags:
        - Switches
  '/switches/{switchId}/ports/all/actions':
    parameters:
      - $ref: '#/components/parameters/switchId'
    post:
      operationId: updateAllPorts
      description: 'All ports can be turned On, Off or power cycled with this endpoint.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSwitchPortUpdate'
      responses:
        '204':
          description: Ports Updated
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
      tags:
        - Switches
  /multiCameras:
    get:
      operationId: listMultiCameras
      description: >
        This endpoint allows you to retrieve a list of multi cameras for a given
        account and location. Multi cameras are devices such as DVRs that have
        multiple cameras connected.  

        It is important to note that after using the pageSize parameter, the
        "totalSize" in the response represents the total number of available
        multi cameras, not the number of multi cameras resulting from the query
        string.
      tags:
        - Multi Cameras
      parameters:
        - $ref: '#/components/parameters/locationId__in'
        - $ref: '#/components/parameters/bridgeId__in'
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/qRelevance__gte'
        - $ref: '#/components/parameters/sort3'
        - $ref: '#/components/parameters/status__in'
        - $ref: '#/components/parameters/status__ne'
        - $ref: '#/components/parameters/include3'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPaginatedMultiCameraResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    post:
      operationId: addMultiCamera
      description: >-
        This endpoint allows a multi camera to be associated with an account. It
        can only be called with an end-user account and will fail if called with
        another type of account.
      tags:
        - Multi Cameras
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAddMultiCamera'
      responses:
        '201':
          description: Multi camera added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMultiCameraMain'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '409':
          description: There was a conflict while trying to perform your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiV3Error'
              examples:
                alreadyExists:
                  description: >-
                    The multi camera you're trying to add is already added or
                    currently being added in the system. There cannot be
                    duplicated multi camera (using the same MAC address or
                    GUID). Make sure to remove the existing one before you
                    proceed to add it again.
                  value:
                    code: 409
                    status: conflict
                    message: The resource already exists.
                    details:
                      - type: errorInfo
                        reason: alreadyExists
                        domain: apiv3
                        metadata:
                          path: /api/v3.0/<resource>
        '500':
          description: The request encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiV3Error'
        '504':
          description: >-
            The request had a deadline that expired before the operation
            completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiV3Error'
  '/multiCameras/{multiCameraId}':
    parameters:
      - in: path
        name: multiCameraId
        schema:
          type: string
        required: true
    get:
      operationId: getMultiCamera
      description: >-
        This endpoint allows you to retrieve information about a multi camera
        based on its ID.
      tags:
        - Multi Cameras
      parameters:
        - $ref: '#/components/parameters/include3'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMultiCameraWithIncludes'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    delete:
      operationId: deleteMultiCamera
      description: >
        This endpoint allows you to dis-associate a multi camera from the
        account, removing all references, recordings, and events.  
          
        This request will be blocked until the multi camera has been fully
        removed.
      tags:
        - Multi Cameras
      responses:
        '204':
          description: Multi camera deleted.
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      operationId: updateMultiCamera
      description: >-
        This endpoint allows you to update a multi camera's data based on its
        ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiMultiCameraUpdate'
      tags:
        - Multi Cameras
      responses:
        '204':
          description: Multi camera Updated
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/multiCameras/{multiCameraId}/channels':
    parameters:
      - in: path
        name: multiCameraId
        schema:
          type: string
        required: true
    get:
      operationId: getMultiCameraChannels
      description: >
        This endpoint allows you to retrieve the channel info of a multi camera.
        This information can be used to add a camera connected to the channel to
        the account using the /cameras endpoint. The channel details are
        read-only. To manipulate a new camera use the /cameras endpoint. If the
        cameraId is not empty then it means that the camera is already added to
        the account. It is important to note that after using the pageSize
        parameter, the "totalSize" in  the response represents the total number
        of available channels, not the number of channels resulting from the
        query string.
      tags:
        - Multi Cameras
      parameters:
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPaginatedMultiCameraChannelResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  /availableDevices:
    get:
      operationId: listAvailableDevices
      tags:
        - Available Devices
      description: >
        This endpoint returns a list of all devices found by the bridges in the
        account that have not yet been added. Devices of a certain type will not
        be reported in the response if the user does not have permission to add
        them. Since adding specific device types requires calling a
        device-type-specific API, it is recommended to filter on the devices
        supported by the cameras, rather than retrieving "all" types.

        It is important to note that after using the pageSize parameter, the
        "totalSize" in the response represents the total number of available
        devices, not the number of devices resulting from the query string.
      parameters:
        - $ref: '#/components/parameters/deviceType__in'
        - $ref: '#/components/parameters/state__in'
        - $ref: '#/components/parameters/bridgeId__in2'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/include4'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPaginatedAvailableDeviceResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalServerError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ApiEsn:
      type: string
      example: '00001106'
    ApiEsns:
      type: array
      items:
        type: string
        pattern: '^[a-fA-F0-9]{8},?$'
      example:
        - '00001106'
        - '00001107'
    ApiPaginatedCameraResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponseWithSize'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/ApiCameraForList'
    ApiCameraForList:
      allOf:
        - $ref: '#/components/schemas/ApiCameraMain'
        - $ref: '#/components/schemas/ApiCameraIncludes'
        - $ref: '#/components/schemas/ApiCameraFTSRelated'
    ApiCameraForSingle:
      allOf:
        - $ref: '#/components/schemas/ApiCameraMain'
        - $ref: '#/components/schemas/ApiCameraIncludes'
    ApiCameraMain:
      type: object
      properties:
        id:
          type: string
        accountId:
          type: string
        name:
          $ref: '#/components/schemas/DeviceName'
        bridgeId:
          $ref: '#/components/schemas/BridgeId'
        locationId:
          $ref: '#/components/schemas/LocationId'
        multiCameraId:
          nullable: true
          type: string
        createTimestamp:
          type: string
          format: date-time
          example: '2023-04-04T09:38:37.372Z'
          readOnly: true
      required:
        - id
        - accountId
        - name
        - bridgeId
        - createTimestamp
    ApiCameraIncludes:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/DeviceStatus'
        locationSummary:
          $ref: '#/components/schemas/LocationSummary'
        deviceAddress:
          $ref: '#/components/schemas/DeviceAddress'
        speakerId:
          $ref: '#/components/schemas/SpeakerId'
        timeZone:
          $ref: '#/components/schemas/ApiTimeZone'
        notes:
          $ref: '#/components/schemas/DeviceNotes'
        tags:
          $ref: '#/components/schemas/DeviceTags'
        devicePosition:
          $ref: '#/components/schemas/ApiDevicePosition'
        networkInfo:
          $ref: '#/components/schemas/ApiNetworkInfoWithMainIp'
        deviceInfo:
          $ref: '#/components/schemas/ApiDeviceInfo'
        firmware:
          $ref: '#/components/schemas/ApiFirmware'
        adminCredentials:
          $ref: '#/components/schemas/AdminCredentials'
        visibleByBridges:
          type: array
          x-jsoninclude-nonnull-annotation: true
          items:
            type: string
            pattern: '^(?:0[xX])?[0-9a-fA-F]{8}$'
            example: 1000f60d
        capabilities:
          $ref: '#/components/schemas/ApiCameraCapabilities'
        effectivePermissions:
          $ref: '#/components/schemas/EffectiveCameraPermissions'
        shareDetails:
          $ref: '#/components/schemas/ShareDetails'
        analog:
          $ref: '#/components/schemas/Analog'
        packages:
          readOnly: true
          type: array
          items:
            type: string
          example:
            - een.vsp
            - een.pos
          description: List of packages enabled for a camera.
        dewarpConfig:
          $ref: '#/components/schemas/ApiDewarpConfig'
        publicSafetySharing:
          $ref: '#/components/schemas/PublicSafetySharing'
        enabledAnalytics:
          $ref: '#/components/schemas/ApiCameraEnabledAnalytics'
    ApiCameraFTSRelated:
      type: object
      properties:
        qRelevance:
          type: number
          description: >
            Field is only returned when `q` parameter is used and its value
            indicates the relevance of the camera in relation to the terms in
            the `q` parameter. The range of this value is between 0 and 1,
            higher is better.
          format: float
          minimum: 0
          maximum: 1
          example: 0.5
          readOnly: true
    Analog:
      type: object
      readOnly: true
      properties:
        input:
          type: integer
          description: The identifier of the analog input.
          nullable: true
          example: 1
    EffectiveCameraPermissions:
      readOnly: true
      type: object
      x-jsoninclude-nonnull-annotation: true
      properties:
        read:
          type: boolean
        addToLayout:
          type: boolean
        viewPreviewVideo:
          type: boolean
          description: View preview images from cameras
        viewLiveVideo:
          type: boolean
          description: View full resolution video live
        viewHistoricVideo:
          type: boolean
          description: View historic video
        turnOnOff:
          type: boolean
          description: Turn Camera on/off
        controlPTZ:
          type: boolean
          description: >-
            Control Pan, Tilt, Zoom, & recall stations while viewing a preview
            or live video of PTZ cameras
        editPTZStations:
          type: boolean
          description: 'Set PTZ mode and create, delete, edit stations'
        downloadVideo:
          type: boolean
          description: Download preview and full resolution video
        delete:
          type: boolean
        editBillingSettings:
          type: boolean
          description: Editing all Camera Settings
        editNoBillingSettings:
          type: boolean
          description: >-
            Edit Camera Settings except for those that affect billing, like
            Cloud Retention and Full Video Resolution
        editMotionAreas:
          type: boolean
          description: >
            Set Motion object size and sensitivity, add/delete regions,
            add/delete alerts for regions. Edit and view existing Analytics. Set
            object size and sensitivity, add/delete alerts
        talkDown:
          type: boolean
          description: >-
            Allows the users to initiate Talk Down to the camera field(s) of
            view
    ApiBaseCameraCreate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/DeviceName'
        tags:
          $ref: '#/components/schemas/DeviceTags'
        locationId:
          $ref: '#/components/schemas/LocationId'
        devicePosition:
          $ref: '#/components/schemas/ApiDevicePosition'
        deviceAddress:
          $ref: '#/components/schemas/DeviceAddress'
    ApiBridgedCameraCreate:
      description: >
        Base schema for cameras that are attached to a bridge, vs cameras that
        are connected directly to the cloud.
      allOf:
        - $ref: '#/components/schemas/ApiBaseCameraCreate'
        - type: object
          properties:
            bridgeId:
              $ref: '#/components/schemas/BridgeId'
            credentials:
              $ref: '#/components/schemas/ApiDeviceCredentials'
    ApiBridgeCameraCreate:
      description: >
        Schema used to describe a new camera to be created that should be
        attached to a bridge.
      allOf:
        - $ref: '#/components/schemas/ApiBridgedCameraCreate'
        - type: object
          properties:
            guid:
              $ref: '#/components/schemas/Guid'
          required:
            - name
            - bridgeId
            - guid
    ApiRtspCameraCreate:
      description: >
        Schema used to describe a new virtual camera to be created that should
        be created based on an RTSP stream.
      allOf:
        - $ref: '#/components/schemas/ApiBridgedCameraCreate'
        - type: object
          properties:
            rtspSettings:
              $ref: '#/components/schemas/RtspConnectionSettings'
          required:
            - name
            - bridgeId
            - rtspSettings
    ApiCameraDirectCreate:
      description: >
        Schema used to describe a new camera to be created that directly
        connects to the cloud.
      allOf:
        - $ref: '#/components/schemas/ApiBaseCameraCreate'
        - type: object
          properties:
            macAddress:
              $ref: '#/components/schemas/MacAddress'
          required:
            - name
            - macAddress
    ApiAxisCameraDirectCreate:
      description: >
        Schema used to describe a new Axis camera to be created that directly
        connects to the cloud.
      allOf:
        - $ref: '#/components/schemas/ApiCameraDirectCreate'
        - type: object
          properties:
            oak:
              $ref: '#/components/schemas/oak'
            serial:
              $ref: '#/components/schemas/serial'
          required:
            - oak
            - serial
    ApiChannelCameraCreate:
      description: >
        Schema used to describe a new channel camera to be created that should
        be attached to a multi camera.
      properties:
        guid:
          $ref: '#/components/schemas/Guid'
        name:
          $ref: '#/components/schemas/DeviceName'
        tags:
          $ref: '#/components/schemas/DeviceTags'
        locationId:
          $ref: '#/components/schemas/LocationId'
        bridgeId:
          $ref: '#/components/schemas/BridgeId'
      required:
        - name
        - bridgeId
        - guid
    ApiAddCamera:
      description: |
        Base schema to describe all new cameras to be created.
      oneOf:
        - $ref: '#/components/schemas/ApiBridgeCameraCreate'
        - $ref: '#/components/schemas/ApiRtspCameraCreate'
        - $ref: '#/components/schemas/ApiCameraDirectCreate'
        - $ref: '#/components/schemas/ApiAxisCameraDirectCreate'
        - $ref: '#/components/schemas/ApiChannelCameraCreate'
      discriminator:
        propertyName: registrationStrategy
        mapping:
          bridge: '#/components/schemas/ApiBridgeCameraCreate'
          rtspUrl: '#/components/schemas/ApiRtspCameraCreate'
          cameraDirect: '#/components/schemas/ApiCameraDirectCreate'
          axisCameraDirect: '#/components/schemas/ApiAxisCameraDirectCreate'
          channel: '#/components/schemas/ApiChannelCameraCreate'
      properties:
        registrationStrategy:
          $ref: '#/components/schemas/ApiRegistrationStrategy'
      required:
        - registrationStrategy
    ApiUpdateBulkCamera:
      description: >
        This object identifies the list of cameras to be updated, and the fields
        and their values to be updated.
      properties:
        ids:
          type: array
          items:
            type: string
            minItems: 1
            maxItems: 500
          example:
            - 10088cde
            - 10088ceb
            - 10088abc
        updateFields:
          type: object
          description: >
            This defines the parameter that will be updated for list of cameras.
            Currently, we allow only one parameter to be updated at a time.
          properties:
            speakerId:
              nullable: true
              type: string
              example: 10039dab
            locationId:
              $ref: '#/components/schemas/LocationId'
            'on':
              type: boolean
              example: true
              description: Start/stop recording images and video.
      required:
        - ids
        - updateFields
    CameraBulkUpdate:
      properties:
        response:
          $ref: '#/components/schemas/BulkUpdateResponses'
    BulkUpdateResponses:
      type: object
      description: |
        Provides collection of individual responses of each camera update.
      additionalProperties:
        $ref: '#/components/schemas/BulkUpdateResponse'
      example:
        10088cde:
          status: 400
        10088ceb:
          status: 204
        10088abc:
          status: 500
    BulkUpdateResponse:
      type: object
      properties:
        status:
          type: integer
    ApiRegistrationStrategy:
      type: string
      enum:
        - bridge
        - rtspUrl
        - cameraDirect
        - channel
      description: >
        Cameras can be added in multiple ways, and this field indicates how this
        specific camera should be added. Possible methods:
         * `bridge`: Associate a camera found with `GET /api/v3.0/availableDevices` with one of the bridges that found it.
         * `rtspUrl`: Define a camera by giving a RTSP URL to retrieve its live stream and the bridge that should connect to it.
         * `cameraDirect`: Register a camera by its MAC address regardless of its physical location and without needing a bridge.
         * `channel`: Associate a channel camera with its parent multi camera.
    RtspConnectionSettings:
      type: object
      properties:
        ipAddress:
          type: string
          maxLength: 15
        videoResourceUrl:
          type: string
          example: live.sdp
          description: >
            The RTSP URL to connect to the main video (eg. h.264) stream will be created using the IP address and this
            URL.
        previewResourceUrl:
          type: string
          example: live2.sdp
          description: >
            The RTSP URL to connect to the preview video (eg. MJPEG) stream will be created using the IP address and
            this URL.
      required:
        - ipAddress
        - videoResourceUrl
    BridgeId:
      type: string
      pattern: '^(?:0[xX])?[0-9a-fA-F]{8}$'
      example: 1000f60d
      description: >
        The bridge a camera is connected to. Keep in mind that some cameras are
        connected directly to the cloud, which is when this field will not be
        reported.
    SpeakerId:
      description: >
        Optional unique identifier of the speaker device associated with this
        camera. This should be a speaker that is audible to anyone visible in
        the camera view, allowing an operator to talk to visible people.
      type: string
      nullable: true
      example: 10039dab
    Guid:
      type: string
      format: uuid
      nullable: true
      example: ddfa5b34-5d04-431e-8287-110fe87edf71
    MacAddress:
      type: string
      pattern: '^([A-F0-9]{2}:){5}[A-F0-9]{2}$'
      nullable: true
      example: '8A:D4:AD:09:DF:91'
    oak:
      description: Owner Authentication Key
      type: string
      pattern: '^[A-Z0-9]{12}$'
      nullable: false
      example: 5A8Z09BD0091
    serial:
      type: string
      pattern: '^[A-F0-9]{12}$'
      nullable: false
      example: B8A44F8DC15B
    ApiDevicePosition:
      type: object
      x-jsoninclude-nonnull-annotation: true
      properties:
        latitude:
          description: The latitude of the device. (WGS 84)
          type: number
          format: double
          minimum: -90
          maximum: 90
          example: 52.3074013
          nullable: true
        longitude:
          description: The longitude of the device. (WGS 84).
          type: number
          format: double
          minimum: -180
          maximum: 180
          nullable: true
          example: 4.9459903
        azimuth:
          type: number
          format: double
          minimum: 0
          maximum: 360
          nullable: true
          example: 7.419435
        rangeInMeters:
          type: number
          format: double
          minimum: 0
          nullable: true
          example: 50.4
        floor:
          type: integer
          minimum: -30
          maximum: 300
          nullable: true
          example: 50
        fieldOfView:
          description: >-
            Field of view is the range of the observable world visible at any
            given time through camera viewfinder.
          type: number
          format: double
          minimum: 0
          maximum: 360
          nullable: true
          example: 100
    ApiDeviceInfo:
      type: object
      x-jsoninclude-nonnull-annotation: true
      properties:
        icon:
          description: >
            This field allows UIs to roughly differentiate between camera types
            when displaying a list of cameras. * Important: this should not be
            used in any way to decide on what functionality is available for a
            camera, that logic should be based on the capabilities and possibly
            the settings endpoints. * Important: more enum values might be added
            in the future, clients should handle new values by having a fallback
            icon, eg a generic "security camera" icon. * Important: The value
            for a specific model might change without notice.
          type: string
          enum:
            - securityCamera
            - bodycam
            - doorbell
          default: securityCamera
        directToCloud:
          type: boolean
          description: >
            Indicates the camera is connected directly to the VMS cloud, and not
            going through a bridge. This excludes cameras that connect through a
            different cloud.
        make:
          description: The Manufacturer or brand of the camera.
          type: string
          nullable: true
        model:
          description: The model of the camera.
          type: string
          nullable: true
        guid:
          $ref: '#/components/schemas/Guid'
    ApiCameraUpdate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/DeviceName'
        notes:
          $ref: '#/components/schemas/DeviceNotes'
        speakerId:
          nullable: true
          description: Id of the speaker.
          type: string
          example: 10039dab
        locationId:
          $ref: '#/components/schemas/LocationId'
        tags:
          $ref: '#/components/schemas/DeviceTags'
        devicePosition:
          $ref: '#/components/schemas/ApiDevicePosition'
        deviceAddress:
          $ref: '#/components/schemas/DeviceAddress'
        publicSafetySharing:
          $ref: '#/components/schemas/PublicSafetySharing'
    ApiCameraCapabilities:
      type: object
      x-jsoninclude-nonnull-annotation: true
      properties:
        ptz:
          $ref: '#/components/schemas/ApiCameraPTZCapabilities'
        audio:
          $ref: '#/components/schemas/ApiCameraAudioCapabilities'
        imageTuning:
          $ref: '#/components/schemas/ApiCameraImageTuningCapabilities'
        io:
          $ref: '#/components/schemas/ApiDeviceIOCapabilities'
        varifocal:
          $ref: '#/components/schemas/ApiCameraVarifocalCapability'
      required:
        - ptz
        - audio
        - imageTuning
        - io
        - varifocal
    ApiCameraPTZCapabilities:
      type: object
      properties:
        capable:
          type: boolean
          description: >
            Indicates that the camera has some PTZ capability. Check the other
            capabilities for what exact capability it has.
          default: false
        panTilt:
          type: boolean
          description: |
            Indicates that the camera can be panned and tilted using the API.
          default: false
        zoom:
          type: boolean
          description: |
            Indicates that the camera can be zoomed in and out using the API.
          default: false
        positionMove:
          type: boolean
          description: >
            Indicates that the camera supports the "position" move, see the PTZ
            API for details.
          default: false
        directionMove:
          type: boolean
          description: >
            Indicates that the camera supports the "direction" move, see the PTZ
            API for details.
          default: false
        centerOnMove:
          type: boolean
          description: >
            Indicates that the camera supports the "centerOn" move, see the PTZ
            API for details.
          default: false
        fisheye:
          type: boolean
          description: >
            Indicates that the camera has a circular panoramic view for which
            de-warping is supported. See Viewports API for details.
          default: false
      required:
        - capable
    ApiCameraAudioCapabilities:
      type: object
      properties:
        recordingEnabled:
          description: >-
            Indicates that audio is recorded by the camera. The source of audio
            can be microphone or other camera.
          type: boolean
        speaker:
          description: >-
            Indicates that audio can be broadcast by the camera, or an
            associated speaker.
          type: boolean
        halfDuplex:
          description: >
            Indicates that audio can be used to communicate in both directions,
            but only one direction at a time. Also known as "push to talk", this
            behaves the same as most "walkie-talkie" systems: only one side can
            talk at a time.
          type: boolean
        fullDuplex:
          description: >
            Indicates that audio can be used to communicate in both directions
            simultaneously. This behaves similarly to most telephone systems
            where both sides can talk at the same time.
          type: boolean
    ApiCameraImageTuningCapabilities:
      type: object
      properties:
        continuousZoom:
          type: boolean
          description: >
            Indicates that the camera supports image tuning with continuous
            zooming.
          default: false
    ApiCameraEnabledAnalytics:
      readOnly: true
      type: array
      items:
        type: object
        description: List of analytics enabled on camera
        properties:
          creatorId:
            type: string
            example: een.bridgeTampering
          type:
            type: string
            example: een.tamperDetectionEvent.v1
        required:
          - creatorId
          - type
    ShareDetails:
      type: object
      properties:
        shared:
          type: boolean
          description: >
            If true, this camera is owned by another account and shared with the
            current account. This includes cameras shared using the camera
            sharing feature, and cameras shared using the first responder
            feature.
        firstResponder:
          type: boolean
          description: 'If true, this camera is shared as a first responder camera.'
        accountId:
          type: string
          nullable: true
          description: >
            If the camera is shared, this is the ID of the account that shared
            this camera with the current account. Null if the camera is not
            shared.
          example: '00009983'
        accountName:
          type: string
          nullable: true
          description: >
            If the camera is shared, this is the name of the account that shared
            this camera with the current account. Null if the camera is not
            shared.
          example: EEN Demo.
    CameraSwap:
      type: object
      properties:
        guid:
          allOf:
            - $ref: '#/components/schemas/Guid'
            - description: Represents a new camera
    MetricQueryResponse:
      type: array
      items:
        $ref: '#/components/schemas/MetricQuery'
      example:
        - target: kilobytesOnDisk
          dataPoints:
            -   - 1450754160000
                - 3823886336
            -   - 1450754220000
                - 3823886336
    MetricQuery:
      type: object
      required: ["target", "dataPoints"]
      properties:
        target:
          type: string
          example: bandwidth
        dataPoints:
          type: array
          example: [ [1557385723416, 2.5], [1557385731634, 3.5] ]
          items:
            type: array
            description: >
              First value is unix timestamp in milliseconds.
              Second value is Metric value as a float.
            minItems: 2
            maxItems: 2
            items:
              type: number
    DeviceStatus:
      description: >-
        Indicates various aspects of the device's status. The statuses defined
        here should be in sync with the events schema defined for the Device
        Cloud Status Update.
      type: object
      x-jsoninclude-nonnull-annotation: true
      properties:
        connectionStatus:
          $ref: '#/components/schemas/DeviceConnectionStatus'
    DeviceConnectionStatus:
      type: string
      description: |
        Indicates the connection status of the device:
          * `online`: The device is online and operational.
          * `deviceOffline`: The device is offline.
          * `invalidCredentials`: The known credentials for this device, including the default credentials, are invalid. This is causing the device to appear offline.
          * `bridgeOffline`: The bridge that connects this device to the cloud is offline. However, both the device and the bridge may still be operational locally, even though the cloud has no visibility into their status.
          * `off`: The device is online, but has been turned off by the user.
          * `error`: The device is offline due to some problem that has not been described by any of the other statuses.
          * `unknown`: The device state is unknown for some reason.
      enum:
        - online
        - deviceOffline
        - invalidCredentials
        - bridgeOffline
        - 'off'
        - error
        - unknown
    DeviceAddress:
      type: object
      x-jsoninclude-nonnull-annotation: true
      description: Address of the device.
      properties:
        name:
          nullable: true
          type: string
        address:
          nullable: true
          type: string
    LocationSummary:
      type: object
      x-jsoninclude-nonnull-annotation: true
      description: Summary of location information.
      properties:
        id:
          type: string
        name:
          type: string
        address:
          type: object
          properties:
            country:
              type: string
              nullable: true
            region:
              type: string
              nullable: true
            city:
              type: string
              nullable: true
            streetAddress:
              type: string
              nullable: true
            streetAddress2:
              type: string
              nullable: true
            postalCode:
              type: string
              nullable: true
    TimeZoneString:
      type: string
      example: America/Chicago
      description: >
        The timezone the device is in. The list of supported timezones is
        provided by the /timeZones endpoint. Changing the time zone will change
        the time zone for the bridge and attached cameras.
    ApiTimeZone:
      type: object
      x-jsoninclude-nonnull-annotation: true
      properties:
        zone:
          type: string
          example: America/Chicago
          description: >-
            The timezone the device is in. The list of supported timezones is
            provided by the [/timeZones](ref:listtimezones) endpoint.
    ApiNetworkInfo:
      type: object
      x-jsoninclude-nonnull-annotation: true
      properties:
        globalIP:
          $ref: '#/components/schemas/IpAddress'
        adapters:
          type: array
          items:
            $ref: '#/components/schemas/ApiAdapterInfo'
    ApiNetworkInfoWithMainIp:
      type: object
      x-jsoninclude-nonnull-annotation: true
      properties:
        globalIP:
          $ref: '#/components/schemas/IpAddress'
        ipUsedByBridge:
          $ref: '#/components/schemas/IpUsedByBridge'
        adapters:
          type: array
          items:
            $ref: '#/components/schemas/ApiAdapterInfo'
    ApiDeviceCredentials:
      type: object
      x-jsoninclude-nonnull-annotation: true
      properties:
        username:
          type: string
          description: Username to use when authenticating with the device
          maxLength: 126
        password:
          type: string
          description: Password to use when authenticating with the device
          maxLength: 126
    AdminCredentials:
      allOf:
        - description: >
            Credentials that allow the bearer to access the camera's internal
            UI. This UI, available via the [tunneling
            endpoint](ref:putcameratunnel), can be used to apply certain
            advanced configurations.
        - $ref: '#/components/schemas/ApiDeviceCredentials'
    ApiFirmware:
      type: object
      x-jsoninclude-nonnull-annotation: true
      properties:
        currentVersion:
          nullable: true
          type: string
          example: v20211019_542_3022
    ApiAdapterInfo:
      type: object
      properties:
        macAddress:
          $ref: '#/components/schemas/MacAddress'
        ipAddress:
          $ref: '#/components/schemas/IpAddress'
    IpAddress:
      type: string
      pattern: >-
        ^(?:25[0-5]|2[0-4]\d|[0-1]?\d{1,2})(?:\.(?:25[0-5]|2[0-4]\d|[0-1]?\d{1,2})){3}$
      nullable: true
      example: 10.143.55.140
    IpUsedByBridge:
      type: string
      pattern: >-
        ^(?:25[0-5]|2[0-4]\d|[0-1]?\d{1,2})(?:\.(?:25[0-5]|2[0-4]\d|[0-1]?\d{1,2})){3}$|(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,7}:|(?:[0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,5}(?::[0-9a-fA-F]{1,4}){1,2}|(?:[0-9a-fA-F]{1,4}:){1,4}(?::[0-9a-fA-F]{1,4}){1,3}|(?:[0-9a-fA-F]{1,4}:){1,3}(?::[0-9a-fA-F]{1,4}){1,4}|(?:[0-9a-fA-F]{1,4}:){1,2}(?::[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:(?:(?::[0-9a-fA-F]{1,4}){1,6})|:(?:(?::[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(?::[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(?::0{1,4}){0,1}:){0,1}(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3,3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|(?:[0-9a-fA-F]{1,4}:){1,4}:(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3,3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)
      nullable: true
      example: 10.143.55.140
      description: 'The current IP address the bridge is using, in IPv4 or IPv6 format.'
    ApiTunnelResponse:
      type: object
      properties:
        httpUrl:
          description: 'Unencrypted tunnel URL, if HTTPS is not enabled.'
          type: string
          nullable: true
          example: 'http://example.com'
        httpsUrl:
          description: Encrypted tunnel URL when enabled at the account level.
          type: string
          nullable: true
          example: 'https://example.com'
      oneOf:
        - required:
            - httpUrl
          properties:
            httpsUrl:
              type: string
              nullable: true
              enum:
                - null
        - required:
            - httpsUrl
          properties:
            httpUrl:
              type: string
              nullable: true
              enum:
                - null
    CameraStatusCounts:
      type: object
      properties:
        online:
          type: integer
        deviceOffline:
          type: integer
        'off':
          type: integer
        bridgeOffline:
          type: integer
        invalidCredentials:
          type: integer
        error:
          type: integer
        unknown:
          type: integer
    DeviceTags:
      type: array
      maxItems: 64
      items:
        type: string
        minLength: 1
        maxLength: 64
    DeviceNotes:
      type: string
      example: Painted black to better blend with its environment.
      maxLength: 5000
    DeviceName:
      description: User-defined name for the device.
      type: string
      example: My new device
      minLength: 1
      maxLength: 126
    PublicSafetySharing:
      type: object
      properties:
        enabled:
          description: Indicates whether the device is shared with public safety agencies.
          type: boolean
          example: false
    ApiCameraVarifocalCapability:
      type: boolean
      description: >
        This camera features a varifocal lens, allowing it to zoom in and out,
        similar to the PTZ feature. The difference between varifocal and PTZ
        zoom is that the PTZ hardware is meant for continuous usage while the
        varifocal capability is only meant for use during setup.
    PaginatedResponse:
      type: object
      description: >
        Used to wrap results for a paginated response, containing information on
        how to retrieve further pages and, if  available, the total number of
        results.
      properties:
        nextPageToken:
          type: string
          readOnly: true
          nullable: true
          description: >
            Token to retrieve the next page. The value of this token is passed
            into the field pageToken.  This value can be null if there is no
            next page.
        prevPageToken:
          type: string
          readOnly: true
          nullable: true
          description: >
            Token to retrieve the previous page. The value of this token is
            passed into the field pageToken.  This value can be null of there is
            no previous page.
        totalSize:
          type: integer
          minimum: 0
          readOnly: true
          nullable: true
          description: >
            The number of resource entries being returned from the result set.  This can be omitted if the API endpoint does not have total size
            information.
        results:
          type: array
          readOnly: true
          description: The result set from a collection API call.
          items:
            type: object
      required:
        - nextPageToken
        - prevPageToken
        - results
    PaginatedResponseWithSize:
      description: >
        Used to wrap results for a paginated response, containing information on
        how to retrieve further pages and  the total number of results.  
      allOf:
        - $ref: '#/components/schemas/PaginatedResponseNoTotalSize'
        - properties:
            totalSize:
              type: integer
              readOnly: true
              description: |
                Size of the total result set.
          required:
            - totalSize
    PaginatedResponseNoTotalSize:
      type: object
      description: >
        Used to wrap results for a paginated response, containing information on
        how to retrieve further pages.
      properties:
        nextPageToken:
          type: string
          readOnly: true
          nullable: true
          description: >
            Token to retrieve the next page. The value of this token is passed
            into the field pageToken.  This value can be null if there is no
            next page.
        prevPageToken:
          type: string
          readOnly: true
          nullable: true
          description: >
            Token to retrieve the previous page. The value of this token is
            passed into the field pageToken.  This value can be null of there is
            no previous page.
        results:
          type: array
          readOnly: true
          description: The result set from a collection API call.
          items:
            type: object
      required:
        - nextPageToken
        - prevPageToken
        - results
    ApiV3Error:
      type: object
      properties:
        code:
          description: HTTP code defined in EEN Standard Code Values
          type: integer
        status:
          description: A string enum describing the code
          type: string
          enum:
            - cancelled
            - unknown
            - invalidArgument
            - deadlineExceeded
            - notFound
            - conflict
            - permissionDenied
            - resourceExhausted
            - failedPrecondition
            - aborted
            - outOfRange
            - unimplemented
            - internal
            - unavailable
            - dataLoss
            - unauthenticated
            - mediaTypeNotSupported
            - acceptNotSupported
            - methodNotSupported
            - tooManyRequests
        message:
          description: Developer friendly human readable error message in English
          type: string
        details:
          description: An array of extensible objects that define error information
          type: array
          items:
            $ref: '#/components/schemas/ExceptionDetail'
      required:
        - code
        - status
        - message
        - details
    ExceptionDetail:
      type: object
      oneOf:
        - $ref: '#/components/schemas/ErrorInfoExceptionDetail'
        - $ref: '#/components/schemas/BadRequestExceptionDetail'
        - $ref: '#/components/schemas/ResourceInfoExceptionDetail'
      discriminator:
        propertyName: type
        mapping:
          errorInfo: '#/components/schemas/ErrorInfoExceptionDetail'
          badRequest: '#/components/schemas/BadRequestExceptionDetail'
          resourceInfo: '#/components/schemas/ResourceInfoExceptionDetail'
      properties:
        type:
          description: A string enum describing the type of detail object.
          type: string
          enum:
            - errorInfo
            - badRequest
            - resourceInfo
      required:
        - type
    ErrorInfoExceptionDetail:
      properties:
        type:
          description: A string enum describing the type of detail object.
          type: string
          enum:
            - errorInfo
        reason:
          description: >
            The reason for the error. This is a constant value that identifies
            the proximate cause of the

            error. Error reasons are unique within a particular domain of
            errors.
          type: string
          enum:
            - unauthenticated
            - unexpectedArgument
            - missingRequiredArgument
            - wrongArgumentValue
            - invalidPermission
            - wrongEdition
            - wrongAccountType
            - resourceNotFound
            - endpointNotFound
            - methodNotSupported
            - unexpectedError
            - acceptNotSupported
            - alreadyExists
            - foreignKeyConflict
            - childDevicesExist
            - contentNotSupported
            - deadlineExpired
            - tooManyRequests
            - deviceUnavailable
            - serviceUnavailable
            - invalidJSON
            - resourceLocked
            - notSupportedOnBridge
            - outOfRetention
            - deviceIdentificationFailed
            - credentialValidationFailed
            - credentialSetupFailed
            - localUrlValidationFailed
            - hwRegistrationFailed
            - failedAddingCameraAfterValidation
            - neverConnected
            - reconnectFailed
            - unsupportedModel
            - purged
            - userBlocked
            - userTemporarilyBlocked
            - quotaExceeded
        domain:
          description: |
            Logical grouping to which the "reason" belongs
          type: string
        metadata:
          $ref: '#/components/schemas/ExceptionMetadata'
    BadRequestExceptionDetail:
      properties:
        type:
          description: A string enum describing the type of detail object.
          type: string
          enum:
            - badRequest
        argumentViolations:
          type: array
          items:
            $ref: '#/components/schemas/ArgumentViolation'
    ArgumentViolation:
      properties:
        argumentName:
          type: string
          description: Name of the argument
        description:
          type: string
          description: Description of the violation
    ResourceInfoExceptionDetail:
      properties:
        type:
          description: A string enum describing the type of detail object.
          type: string
          enum:
            - resourceInfo
        resource:
          description: 'Referenced resource type, eg "cameras", "bridges", or "locations".'
          type: string
        ids:
          type: array
          description: Identities of resources
          items:
            type: string
    ExceptionMetadata:
      properties:
        path:
          description: Path of the request
          type: string
        method:
          description: Method of the request
          type: string
    LocationId:
      description: ID Of the location.
      minLength: 1
      type: string
      nullable: true
      example: 2428fda3-389f-48ce-b062-85875dd6b2e2
    Mount:
      type: string
      description: Mounting type
      example: ceiling
      enum:
        - ceiling
        - wall
        - floor
    ApiDewarpConfigComposite:
      type: object
      properties:
        id:
          type: string
          description: Composite ID.
          example: 41770c16-600f-4ad5-a0d0-1fb96905603e
          readOnly: true
        name:
          type: string
          description: Human given name of the composite.
          example: Quad view
        aspect:
          type: number
          description: Aspect ratio of resulting composite image
          example: 1.77778
        panes:
          type: array
          minLength: 1
          description: Array containing individual panes that make up composite image.
          items:
            $ref: '#/components/schemas/ApiDewarpConfigPane'
    ApiDewarpConfigCompositeGetCreate:
      allOf:
        - $ref: '#/components/schemas/ApiDewarpConfigComposite'
        - type: object
          required:
            - id
            - name
            - aspect
            - panes
    ApiDewarpConfigPane:
      type: object
      required:
        - x
        - 'y'
        - width
        - height
        - fov
        - lookAt
      properties:
        x:
          type: string
          description: Top left x coordinate of pane relative to top left of composite
          example: 50%
        'y':
          type: string
          description: Top left y coordinate of pane relative to top left of composite
          example: 50%
        width:
          type: string
          description: Width of pane inside of composite
          example: 50%
        height:
          type: string
          description: Height of pane inside of composite
          example: 50%
        shader:
          type: string
          description: The shader used to present the pane
          enum:
            - sphere
            - panorama
          example: sphere
        fov:
          type: number
          description: >-
            The field of view in degrees of the rendered view. This primarily
            controls zoom.
          example: 45
        lookAt:
          description: >-
            The direction the camera will be pointed within the pane. Values are
            generated by the dewarp library.
          allOf:
            - $ref: '#/components/schemas/ApiDewarpConfigVector3'
    ApiDewarpConfigVector3:
      type: object
      properties:
        x:
          type: number
          example: 1
        'y':
          type: number
          example: -1
        z:
          type: number
          example: 0.5
      required:
        - x
        - 'y'
        - z
    ApiDewarpConfig:
      type: object
      required:
        - cameraId
        - fov
        - curve
        - mount
        - scale
        - offset
        - composites
      properties:
        cameraId:
          type: string
          description: Esn identifying the camera
          example: 1007ff4e
          readOnly: true
        fov:
          type: number
          description: Camera Field of View
          example: 180
        curve:
          type: string
          description: Type of dewarp curve to apply
          example: equidistant
        mount:
          $ref: '#/components/schemas/Mount'
        scale:
          type: object
          description: Scale of input video
          required:
            - x
            - 'y'
          properties:
            x:
              type: number
              example: 0.5
            'y':
              type: number
              example: 0.5
        offset:
          type: object
          description: Offset of input video
          required:
            - x
            - 'y'
          properties:
            x:
              type: number
              example: 0.5
            'y':
              type: number
              example: 0.5
        composites:
          type: array
          description: All composite objects related to this device
          items:
            $ref: '#/components/schemas/ApiDewarpConfigCompositeGetCreate'
    ApiDeviceIOCapabilities:
      type: object
      properties:
        capable:
          type: boolean
          description: Indicates that the device support input / output ports
          default: false
        sharedTrigger:
          type: boolean
          description: >-
            Indicates an input can trigger video record on many devices on the
            bridge
          default: false
    PortRules:
      type: object
      properties:
        recordOnActive:
          type: boolean
          description: >-
            If this value is set to true, the port is an input and the device
            can record video, then the bridge should start recording when the
            port becomes active.
        icon:
          type: string
          nullable: true
          description: >-
            If enabled, the given icon is shown for all livestreams of the
            camera and highlighted when the port is active. For ports of
            "output" type the icon can then also be clicked to change the state
            of the camera.
          enum:
            - siren
            - light
            - dot
            - door
            - bell
        iconEnabled:
          type: boolean
          description: Inidicates if the icon should be visible on all livestreams.
    PortStatusGet:
      type: object
      properties:
        state:
          type: string
          description: Interpreted state of the connected circuit.
          enum:
            - active
            - idle
            - unknown
    PortStatusPatch:
      type: object
      properties:
        state:
          type: string
          description: Set the state of the connected circuit.
          enum:
            - active
            - idle
        durationSeconds:
          type: integer
          description: >
            Number of seconds to hold the circuit in the given state.  If not
            provided, the state will hold indefinitely.
          example: 10
          minimum: 1
          maximum: 60
    Port:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: Unique ID for the port.
          example: '1'
        enabled:
          type: boolean
          description: >-
            If the port is not enabled, no events will be created, and the icon
            will not show up in the live stream.
        name:
          type: string
          description: >-
            Human changeable name of the port, defaults to value of the id
            field.
          example: Input 1
          maxLength: 126
        type:
          type: string
          readOnly: true
          description: Denotes whether this is an input or output port.
          enum:
            - input
            - output
        idleCircuitState:
          type: string
          description: >
            Indicates the normal, inactive or idle, state of the connected
            circuit.

            Possible values:


            * `open`: means the port is "off" when in `idle` state (open
            circuit; has no voltage), and the port state being `active` means it
            is turned "on" (circuit is closed; has voltage).

            * `closed`: means the port is "on" when in `idle` state (closed
            circuit; has voltage), and the port state being active means it is
            turned "off" (open circuit; has no voltage).
          enum:
            - open
            - closed
        rules:
          $ref: '#/components/schemas/PortRules'
    PortGet:
      allOf:
        - $ref: '#/components/schemas/Port'
        - type: object
          properties:
            status:
              $ref: '#/components/schemas/PortStatusGet'
      required:
        - id
        - enabled
        - name
        - type
        - idleCircuitState
    PortOutputPatch:
      allOf:
        - $ref: '#/components/schemas/Port'
        - type: object
          properties:
            status:
              $ref: '#/components/schemas/PortStatusPatch'
    PortPatch:
      oneOf:
        - $ref: '#/components/schemas/Port'
        - $ref: '#/components/schemas/PortOutputPatch'
    PaginatedPortResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponseWithSize'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/PortGet'
    CameraSettingsSchema:
      type: object
      readOnly: true
      description: Json schema of version draft 4.
      example:
        $schema: 'http://json-schema.org/draft-04/schema#'
        type: object
        properties:
          retention:
            type: object
            properties:
              cloudDays:
                type: integer
                minimum: 1
                maximum: 1825
          audio:
            type: object
            properties:
              microphoneEnabled:
                type: boolean
              inputSourceId:
                type: string
          previewVideo:
            type: object
            properties:
              transmitMode:
                type: string
                enum:
                  - onDemand
                  - always
                  - background
                  - event
              resolution:
                type: string
                enum:
                  - cif
                  - std
              intervalMs:
                type: integer
                minimum: 250
                maximum: 16000
              quality:
                type: string
                enum:
                  - low
                  - med
          mainVideo:
            type: object
            properties:
              transmitMode:
                type: string
                enum:
                  - onDemand
                  - always
                  - background
                  - event
              resolution:
                type: string
                enum:
                  - cif
                  - std
                  - high
                  - 1080P
              kbpsFactor:
                type: integer
                minimum: 1
                maximum: 4
              quality:
                type: string
                enum:
                  - low
                  - med
                  - high
              captureMode:
                type: string
                enum:
                  - event
                  - always
    CameraSettings:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Settings'
        schema:
          $ref: '#/components/schemas/CameraSettingsSchema'
        proposedValues:
          $ref: '#/components/schemas/CameraSettingProposedValues'
      required:
        - data
    Settings:
      type: object
      properties:
        timeZone:
          $ref: '#/components/schemas/TimeZoneString'
        rtsp:
          $ref: '#/components/schemas/RtspConnectionSettings'
        credentials:
          $ref: '#/components/schemas/ApiDeviceCredentials'
        retention:
          $ref: '#/components/schemas/Retention'
        audio:
          $ref: '#/components/schemas/Audio'
        previewVideo:
          $ref: '#/components/schemas/PreviewVideo'
        mainVideo:
          $ref: '#/components/schemas/MainVideo'
        analog:
          $ref: '#/components/schemas/Analog1'
        operatingSettings:
          $ref: '#/components/schemas/OperatingSettings'
    PreviewVideo:
      type: object
      properties:
        transmitMode:
          type: string
          enum:
            - onDemand
            - always
            - background
            - event
          description: >
            Controls when the preview video is sent to the cloud data center.  The recommended mode is Always. Always means that the Preview Video
            is immediately sent to the cloud, but it can be limited by the
            bridge bandwidth. On Demand means that the Preview Video is only
            sent to the cloud when it is being displayed in the VMS. Event means
            that the Preview Video is only sent to the cloud when an event
            occurs on the recording. Background means that the Preview Video is
            only sent when bandwidth is available on the schedule for the
            bridge. Options 'background' and 'event' could lead to a bad user
            experience and because of this are not presented on the main VMS UI.
        resolution:
          type: string
          example: std
          description: >-
            Resolution of the preview video that will be recorded. Possible
            values can be found in the `supportedResolutions` field.
        intervalMs:
          type: integer
          description: >
            Specifies the time interval in milliseconds between frames for the
            preview video. 1000ms is recommended. Lowering the value increases
            bandwidth usage.
          example: 250
          minimum: 250
          maximum: 16000
        quality:
          type: string
          example: low
          description: >
            Controls the amount of compression on the preview video. Default
            quality will reduce bandwidth the most. Use extreme caution when
            increasing it,  as exceeding available bandwidth can prevent all
            video from being transmitted to the cloud. Possible values can be
            found in the `supportedResolutions` field.
        supportedResolutions:
          $ref: '#/components/schemas/PreviewResolutions'
    PreviewResolutions:
      readOnly: true
      type: object
      description: >-
        Read-only listing of resolutions and quality settings supported by the
        camera.
      additionalProperties:
        $ref: '#/components/schemas/PreviewResolutionsItem'
      example:
        std:
          width: 640
          height: 360
          qualities:
            low:
              kbps: 256
            med:
              kbps: 320
    PreviewResolutionsItem:
      type: object
      properties:
        width:
          type: integer
          example: 640
        height:
          type: integer
          example: 360
        qualities:
          $ref: '#/components/schemas/PreviewResolutionQualities'
    PreviewResolutionQualities:
      type: object
      description: Specification for qualities supported by the camera.
      additionalProperties:
        $ref: '#/components/schemas/PreviewQualitiesItem'
    PreviewQualitiesItem:
      type: object
      properties:
        kbps:
          type: integer
          description: >-
            Measurement of how much video data exists per second of video
            footage shown as Kilobits per second.
          example: 256
    MainVideoResolutions:
      readOnly: true
      type: object
      description: >-
        Read-only listing of resolutions and quality settings supported by the
        camera.
      additionalProperties:
        $ref: '#/components/schemas/MainVideoResolutionsItem'
      example:
        4MP:
          width: 2592
          height: 1520
          qualities:
            low:
              kbps: 1200
              fps: 12
            med:
              kbps: 1400
              fps: 10
    MainVideoResolutionsItem:
      allOf:
        - $ref: '#/components/schemas/PreviewResolutionsItem'
      properties:
        qualities:
          $ref: '#/components/schemas/MainVideoResolutionQualities'
    MainVideoResolutionQualities:
      type: object
      description: Specification for qualities supported by the camera.
      additionalProperties:
        $ref: '#/components/schemas/MainVideoQualitiesItem'
    MainVideoQualitiesItem:
      allOf:
        - $ref: '#/components/schemas/PreviewQualitiesItem'
      properties:
        fps:
          type: integer
          example: 30
          description: Frames per second for the video.
    MainVideo:
      type: object
      properties:
        transmitMode:
          type: string
          enum:
            - onDemand
            - background
            - event
            - always
          description: >
            Controls when the Main Video is sent to the cloud data center. The
            recommended value is Background. Always means that the video is
            immediately sent to the cloud, but it can be limited by the bridge
            bandwidth.  This can affect available bandwidth for the business.
            Background means that the video is only sent when bandwidth is
            available on the schedule for the bridge. On Demand means that the
            video is only sent to the cloud when it is being displayed in the
            VMS. Event means that the video is only sent to the cloud when an
            event occurs on the recording. Options 'always' and 'event' could
            lead to a bad user experience and because of this are not presented
            on the main VMS UI.
        resolution:
          type: string
          example: 3MP
          description: >
            Resolution that will be used for full frame rate H.264 recording.
            Possible values can be found in the `supportedResolutions` field.
        quality:
          type: string
          example: high
          description: >
            Controls the compression rate and the frame rate on the H.264
            recording. We recommend Low or Medium.  Make certain you have
            adequate bandwidth before changing the setting higher than Low.  Misconfiguration can prevent all video from being transmitted to the
            cloud.  Possible values can be found in the `supportedResolutions`
            field.
        kbpsFactor:
          type: integer
          example: 1
          description: >
            It refers to how the camera can process the image it's recording. It
            also controls the compression rate of the video recording. The
            setting depends greatly on the camera. We recommend leaving this at
            its default value.
        captureMode:
          type: string
          enum:
            - event
            - always
          description: >
            Configures when the Main Video is recorded.  By default, recording
            is only done when there is an event detected.  This is usually when
            motion or an analytic event is detected. However, you can choose
            Always to record Main Video continuously.  Use extreme caution if
            setting to Always, as this can use a large amount of bandwidth,  which could prevent some video from being transmitted to the cloud
            or result in early deletion due to filled up on-premise storage.  Make certain there is enough upload bandwidth if using this setting.
        supportedResolutions:
          $ref: '#/components/schemas/MainVideoResolutions'
    Audio:
      type: object
      properties:
        microphoneEnabled:
          type: boolean
          description: >
            Enables audio recording.  Only one audio source can be active at the
            time.  The microphone cannot be enabled if the audio is copied from
            another camera, which means `inputSourceId` should be set to null
            before enabling the microphone.
        inputSourceId:
          type: string
          nullable: true
          description: >
            Audio is copied from the camera with the given ID.  The source
            camera needs to be attached to the same bridge to copy audio from
            it. Copying the audio stream from another camera is not possible if
            the microphone is enabled for this camera.
    Retention:
      type: object
      properties:
        cloudDays:
          type: integer
          minimum: 1
          description: Number of days that recorded video will be kept in the cloud.
        cloudPreviewOnly:
          type: boolean
          description: >
            Allows previews to be transmitted to cloud while keeping full video
            locally on the CMVR. This setting is only available for cameras
            attached to a CMVR.
        minimumOnPremiseDays:
          minimum: 0
          type: integer
          description: >
            The number of days that recorded video will be kept on premise. The
            minimum on premise retention should be less than the maximum on
            premise retention. If the CMVR runs out of disk space it will delete
            old video to make room for the new —  even if it must delete video
            within this retention period.  If the local CMVR hard drive fills
            before the Minimum On Premise Retention is  met, it will be
            displayed in camera metrics under delta storage  as well as bridge
            metrics under delta storage as a purge. Recordings won't be stored
            on premise if this setting will be set to 0. This setting is only
            available for cameras attached to a CMVR.
        maximumOnPremiseDays:
          type: integer
          minimum: 0
          maximum: 5
          description: >
            The maximum on premise retention should be greater than the minimum
            on premise retention. Video will be kept on the CMVR for as long as
            possible up to the maximum,  then it is deleted to make room for new
            video.  There is no notification or graphical display of purge for
            the Maximum On Premise Retention. Setting this value to 0 will
            remove limit for maximum retention. This setting is only available
            for cameras attached to a CMVR.
        alwaysRecordingDays:
          type: integer
          minimum: 0
          description: >
            This setting is only available if `captureMode` is set to record
            `always`; If this setting is set to 0 then it means that it is
            disabled and recordings are stored based on retention settings. It
            sets how many days the video is kept. After “x” days, the recordings
            without motion or events will be purged. Recordings with motion or
            events will be kept for the set retention time.
    Analog1:
      type: object
      properties:
        videoStandard:
          type: string
          enum:
            - auto
            - ntsc
            - pal
          description: >-
            The 'auto' option will automatically choose the proper standard for
            a camera.
        badSignalProtection:
          type: boolean
          description: >
            Certain bad analog signals can affect all analog cameras to the same
            device. If set to true, the other cameras are protected against this
            by disabling the camera altogether when signals with this effect are
            detected.
        badSignalDetected:
          type: boolean
          description: >
            This value is set to true to indicate the camera was disabled due to
            bad analog signals. Set this value to false to enable the camera
            again, resetting the bad signal detection.
    'On':
      type: boolean
      description: >
        If off, all functionality of the camera will be disabled.  This means
        that no recordings will be made, live streaming is not possible,  and
        features like PTZ and talkdown are disabled. If on, the camera will
        behave normally.
    OperatingSettings:
      type: object
      properties:
        'on':
          $ref: '#/components/schemas/On'
        scheduledOverride:
          $ref: '#/components/schemas/ScheduledOverride'
    ScheduledOverride:
      type: object
      required:
        - 'on'
        - schedule
      nullable: true
      description: >
        Defines a scheduled override to the operating settings,  allowing the
        user to for example turn a camera off during specified hours of the day.
      properties:
        'on':
          $ref: '#/components/schemas/On'
        schedule:
          $ref: '#/components/schemas/WeeklyScheduleAllRequired'
    CameraSettingProposedValues:
      description: >-
        Lists of proposed values to be displayed to users for each property.
        Although users can choose any number of days, this subset keeps the list
        manageable and agrees with any billing thresholds.
      type: object
      readOnly: true
      properties:
        retention:
          type: object
          properties:
            cloudDays:
              description: >-
                Proposed set of cloud retention days that the user could chose
                between.
              type: array
              items:
                type: integer
              example:
                - 1
                - 2
                - 3
                - 5
                - 7
                - 14
                - 28
                - 30
                - 31
                - 60
                - 90
                - 180
                - 365
                - 730
                - 1095
                - 1825
            cloudPreviewOnlyDays:
              description: >-
                Proposed set of cloud retention days that the user could choose
                between if they choose to keep only preview videos in the cloud.
                This list should replace cloudDays if cloudPreviewOnly property
                is set to true.
              type: array
              items:
                type: integer
              example:
                - 1
                - 2
                - 3
                - 5
                - 7
                - 14
                - 28
                - 30
                - 31
                - 60
                - 90
                - 180
            minimumOnPremiseDays:
              description: >
                Proposed set of minimum on-premise retention days the user could
                choose between. 

                Keep in mind that the minimum on-premise retention days value
                should be less than the maximum on-premise retention days value.
              type: array
              items:
                type: integer
              example:
                - 0
                - 1
                - 2
                - 3
                - 5
                - 7
                - 14
                - 28
                - 30
                - 31
                - 60
                - 90
                - 180
            maximumOnPremiseDays:
              description: >
                Proposed set maximum on-premise retention days the user could
                choose between.

                Keep in mind that the minimum on-premise retention days value
                should be less than the maximum on-premise retention days value.
              type: array
              items:
                type: integer
              example:
                - 0
                - 1
                - 2
                - 3
                - 5
                - 7
                - 14
                - 28
                - 30
                - 31
                - 60
                - 90
                - 180
                - 365
    WeeklyScheduleAllRequired:
      type: object
      properties:
        days:
          $ref: '#/components/schemas/WeeklyScheduleDaysAllRequired'
        hours:
          $ref: '#/components/schemas/WeeklyScheduleHours'
      required:
        - days
        - hours
    WeeklyScheduleDays:
      type: object
      description: Days of the week that the start and end times are applied.
      properties:
        sunday:
          type: boolean
        monday:
          type: boolean
        tuesday:
          type: boolean
        wednesday:
          type: boolean
        thursday:
          type: boolean
        friday:
          type: boolean
        saturday:
          type: boolean
    WeeklyScheduleDaysAllRequired:
      allOf:
        - $ref: '#/components/schemas/WeeklyScheduleDays'
      required:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
    WeeklyScheduleHours:
      type: object
      description: >
        Times that the schedule starts and ends. If the start time is greater
        than the end time, the interval is considered to cover the remaining
        time of the day from the start time until 24:00, and then from 00:00 to
        the end time. 

        For example, start: 16:30 and end: 06:00 on monday means the interval
        covers from 16:30 to 24:00 and continues from 00:00 to 06:00 on the same
        day (monday).
      properties:
        start:
          type: string
          pattern: '^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$'
          description: >-
            Starting point of the interval. It should be in the range of 00:00
            to 23:59 since this is the range for a day.
          minLength: 5
          maxLength: 5
        end:
          type: string
          pattern: '^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$'
          description: >-
            End point of the interval. It should be in the range of 00:00 to
            23:59 since this is the range for the day.
          minLength: 5
          maxLength: 5
      required:
        - start
        - end
    ApiPaginatedBridgeResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponseWithSize'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/ApiBridgeForList'
    ApiBridgeForList:
      allOf:
        - $ref: '#/components/schemas/ApiBridgeMain'
        - $ref: '#/components/schemas/ApiBridgeIncludes'
        - $ref: '#/components/schemas/ApiBridgeFTSRelated'
    ApiBridgeForSingle:
      allOf:
        - $ref: '#/components/schemas/ApiBridgeMain'
        - $ref: '#/components/schemas/ApiBridgeIncludes'
    ApiBridgeMain:
      type: object
      properties:
        id:
          type: string
          example: 1002bc5a
          description: Unique bridge identifier
        accountId:
          type: string
          description: Account ID specified in as an ESN Type.
          pattern: '^[a-fA-F0-9]{8}$'
          example: '00001106'
        name:
          $ref: '#/components/schemas/DeviceName'
        locationId:
          $ref: '#/components/schemas/LocationId'
        createTimestamp:
          type: string
          format: date-time
          example: '2023-04-04T09:38:37.372Z'
          readOnly: true
      required:
        - id
        - accountId
        - name
        - createTimestamp
    ApiBridgeIncludes:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/DeviceStatus'
        locationSummary:
          $ref: '#/components/schemas/LocationSummary'
        timeZone:
          $ref: '#/components/schemas/ApiTimeZone'
        deviceAddress:
          $ref: '#/components/schemas/DeviceAddress'
        notes:
          $ref: '#/components/schemas/DeviceNotes'
        tags:
          $ref: '#/components/schemas/DeviceTags'
        devicePosition:
          $ref: '#/components/schemas/ApiDevicePosition2'
        networkInfo:
          $ref: '#/components/schemas/ApiNetworkInfo'
        deviceInfo:
          $ref: '#/components/schemas/ApiDeviceInfo1'
        effectivePermissions:
          $ref: '#/components/schemas/EffectiveBridgePermissions'
        resourceCounts:
          $ref: '#/components/schemas/ResourceCounts'
        resourceStatusCounts:
          $ref: '#/components/schemas/ResourceStatusCounts'
    ApiBridgeFTSRelated:
      type: object
      properties:
        qRelevance:
          type: number
          description: >
            Field is only returned when `q` parameter is used and its value
            indicates the relevance of the bridge in relation to the terms in
            the `q` parameter. The range of this value is between 0 and 1,
            higher is better.
          format: float
          minimum: 0
          maximum: 1
          example: 0.5
          readOnly: true
    ResourceCounts:
      description: Count of resources.
      type: object
      readOnly: true
      properties:
        cameras:
          type: integer
          minimum: 0
          example: 23
        speakers:
          type: integer
          minimum: 0
          example: 1
        multiCameras:
          type: integer
          minimum: 0
          example: 1
    ResourceStatusCounts:
      description: Count of resources by status.
      type: object
      readOnly: true
      properties:
        cameras:
          $ref: '#/components/schemas/CameraStatusCounts'
        multiCameras:
          $ref: '#/components/schemas/CameraStatusCounts'
    Guid1:
      type: string
      format: uuid
      example: ddfa5b34-5d04-431e-8287-110fe87edf71
    BridgeSwap:
      type: object
      properties:
        guid:
          allOf:
            - $ref: '#/components/schemas/Guid1'
            - description: Represents a new bridge
    EffectiveBridgePermissions:
      readOnly: true
      type: object
      x-jsoninclude-nonnull-annotation: true
      properties:
        read:
          type: boolean
        delete:
          type: boolean
        editBillingSettings:
          type: boolean
        editNoBillingSettings:
          type: boolean
    ApiDevicePosition2:
      type: object
      x-jsoninclude-nonnull-annotation: true
      properties:
        latitude:
          description: The latitude of the device. (WGS 84)
          type: number
          format: double
          minimum: -90
          maximum: 90
          example: 52.3074013
          nullable: true
        longitude:
          description: The longitude of the device. (WGS 84).
          type: number
          format: double
          minimum: -180
          maximum: 180
          example: 4.9459903
          nullable: true
        floor:
          type: integer
          minimum: 0
          example: 50
          nullable: true
    ApiDeviceInfo1:
      type: object
      x-jsoninclude-nonnull-annotation: true
      properties:
        icon:
          description: >
            This field allows UIs to roughly differentiate between bridge types
            when displaying a list of bridges. * Important: this should not be
            used in any way to decide on what functionality is available for a
            bridge, that logic should be based on the capabilities and possibly
            the settings endpoints. * Important: more enum values might be added
            in the future, clients should handle new values by having a fallback
            icon, eg a generic "bridge" icon. * Important: The value for a
            specific model might change without notice.
          type: string
          enum:
            - bridge
            - vehicle bridge
            - mobile bridge
            - CMVR
          default: bridge
        serialNumber:
          description: The serial number of the bridge.
          type: string
        guid:
          $ref: '#/components/schemas/Guid1'
    ApiBridgeCreate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/DeviceName'
        connectId:
          type: string
          description: The code delivered with a bridge and assigned to it
          example: 1ABC-1234-A12B-1AB4
        locationId:
          $ref: '#/components/schemas/LocationId'
        tags:
          $ref: '#/components/schemas/DeviceTags'
      required:
        - name
        - connectId
    ApiBridgeUpdate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/DeviceName'
        notes:
          $ref: '#/components/schemas/DeviceNotes'
        locationId:
          $ref: '#/components/schemas/LocationId'
        tags:
          $ref: '#/components/schemas/DeviceTags'
        deviceAddress:
          $ref: '#/components/schemas/DeviceAddress'
        devicePosition:
          $ref: '#/components/schemas/ApiDevicePosition2'
    ApiUpdateBulkBridge:
      description: >
        This object identifies the list of bridges to be updated, and the fields
        and their values to be updated.
      properties:
        ids:
          type: array
          items:
            type: string
            minItems: 1
          example:
            - 10088cde
            - 10088ceb
            - 10088abc
        updateFields:
          type: object
          description: >
            This defines the parameter that will be updated for list of bridges.
            Currently, we allow only one parameter to be updated at a time.
          properties:
            locationId:
              $ref: '#/components/schemas/LocationId'
      required:
        - ids
        - updateFields
    BridgeBulkUpdate:
      properties:
        response:
          $ref: '#/components/schemas/BulkUpdateResponses'
    MetricQueryResponse2:
      allOf:
        - $ref: '#/components/schemas/MetricQueryResponse'
      example:
        - target: kilobytesOnDisk
          dataPoints:
            -   - 1450754160000
                - 3823886336
            -   - 1450754220000
                - 3823886336
        - target: availableKilobytesOnDisk
          dataPoints:
            -   - 1450754160000
                - 782518114.461538
            -   - 1450754220000
                - 779823891.692308
    ApiBridgePostAction:
      type: object
      properties:
        action:
          type: string
          enum:
            - reboot
          description: >
            Possible values:

            * `reboot` - Initiates a reboot operation on the specified bridge.
            Once the reboot process is queued, the user can monitor the bridge's
            status to determine when it becomes offline and operational again
            (online).
      required:
        - action
    BridgeSettingsGet:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/SettingsGet'
      required:
        - data
    BridgeSettingsPatch:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/SettingsPatch'
      required:
        - data
    BasicSettings:
      type: object
      properties:
        timeZone:
          $ref: '#/components/schemas/TimeZoneString'
        upnpEnabled:
          type: boolean
          default: false
          description: >
            Some cameras require Universal Plug and Play in order to be
            discovered. Only enable if your cameras requires UPNP. All UPNP
            devices will show under available cameras.    
        bridgeRtspEnabled:
          type: boolean
          default: false
          description: >
            RTSP (Real Time Streaming Protocol) from Bridge network connections.
            This setting allows for cameras on the bridge to be streamed in full
            resolution, and quality over the local network.
        bridgeRtspAuth:
          type: boolean
          default: false
          description: >
            Enabled by default when Bridge RTSP is requested. With Bridge RTSP
            Auth enabled, an additional Username and Password is needed to
            access the RTSP stream, or to use it in another application. If
            Bridge RTSP Auth is disabled, the camera stream is available to
            anyone with access to the streaming URL to watch or use in another
            application.
    SettingsGet:
      allOf:
        - $ref: '#/components/schemas/BasicSettings'
        - type: object
          properties:
            bandwidth:
              $ref: '#/components/schemas/Bandwidth'
            localDisplay:
              $ref: '#/components/schemas/LocalDisplayGet'
            mediaShortcut:
              $ref: '#/components/schemas/MediaShortcutGet'
            videoStandard:
              $ref: '#/components/schemas/VideoStandard'
      required:
        - bandwidth
        - localDisplay
        - timeZone
        - upnpEnabled
        - mediaShortcut
        - bridgeRtspEnabled
        - bridgeRtspAuth
    SettingsPatch:
      allOf:
        - $ref: '#/components/schemas/BasicSettings'
        - type: object
          properties:
            bandwidth:
              $ref: '#/components/schemas/Bandwidth'
            localDisplay:
              $ref: '#/components/schemas/LocalDisplayPatch'
            mediaShortcut:
              $ref: '#/components/schemas/MediaShortcutPatch'
            videoStandard:
              $ref: '#/components/schemas/VideoStandard'
    VideoStandard:
      type: string
      enum:
        - ntsc
        - pal
      description: >-
        Default video standard for analog inputs. Available only for bridges
        with analog inputs.
    Bandwidth:
      description: >
        Bandwith shaping properties.  The bridge will observe the defined
        bandwidth limts when there is no active bandwidth schedule.
      type: object
      properties:
        mode:
          description: |
            The default mode of bandwidth shaping.
              * `fixed`: uses up to fixed amount (Mbps) of bandwidth.
              * `percent`: uses up to a set percentage of measured bandwdith
              * `minimum`: puts the bridge in minimum bandwdith mode (affects other settings)
          default: fixed
          enum:
            - fixed
            - percent
            - minimum
          type: string
        limit:
          description: >
            Bandwith limit interpreted as either a percentage or Mbps depending
            on the bandwith mode. When the bridge is in minimum bandwdith mode,
            the value will be null.
          type: number
          format: double
          minimum: 0
          nullable: true
          default: 30.1
        override:
          $ref: '#/components/schemas/BandwidthSchedule'
      required:
        - mode
        - limit
    BandwidthSchedule:
      type: object
      nullable: true
      properties:
        mode:
          description: |
            The mode when the schedule is active.
              * `fixed`: uses up to fixed amount (Mbps) of bandwidth.
              * `percent`: uses up to a set percentage of measured bandwdith
          default: fixed
          enum:
            - fixed
            - percent
          type: string
        limit:
          description: >
            Bandwith limit interpreted as either a percentage or Mbps depending
            on the bandwith mode.
          type: number
          format: double
          minimum: 0
          nullable: true
          default: 30.1
        schedule:
          $ref: '#/components/schemas/WeeklyScheduleAllRequired'
      required:
        - mode
        - limit
        - schedule
    MediaShortcut:
      type: object
      properties:
        enabled:
          type: boolean
          default: false
          description: >
            Turn on a service on the bridge that will allow the VMS GUI to
            receive images and videos directly from the bridge on a local
            network.  This will boost performance by eliminating calls to the
            cloud.  Images and video will continue to be pushed to the cloud.
        ipOverrides:
          description: >
            By default the media shortcut feature will serve content from the
            `wan` interface. For bridges that are behind a firewall or NATed,
            this property can be used to provide those IPv4 addresses to the VMS
            system.  The list is composed of IPv4 addresses and the constants
            `wan` or `camLan`.
          type: array
          default:
            - wan
          example:
            - wan
            - 10.45.4.4
          items:
            type: string
    MediaShortcutGet:
      allOf:
        - $ref: '#/components/schemas/MediaShortcut'
      required:
        - enabled
        - ipOverrides
    MediaShortcutPatch:
      allOf:
        - $ref: '#/components/schemas/MediaShortcut'
    LocalDisplay:
      type: object
      properties:
        browserEnabled:
          type: boolean
          default: false
          description: >
            Enable a minimal VMS web application on the bridge to allow local
            viewing using a web browser.
        monitorEnabled:
          type: boolean
          default: false
          description: >
            Enable video output on the Bridge's external video connector which
            depends on the Bridge model. (HDMI/VGA/DVI/DDP)
        layoutIds:
          description: >
            The layout ID's to make available through either of the enabled
            local displays.  Only device admins will be allowed to set this
            property
          type: array
          items:
            type: string
            format: uuid
    LocalDisplayGet:
      allOf:
        - $ref: '#/components/schemas/LocalDisplay'
      required:
        - browserEnabled
        - layoutIds
        - monitorEnabled
    LocalDisplayPatch:
      allOf:
        - $ref: '#/components/schemas/LocalDisplay'
    MoveType:
      type: string
      enum:
        - position
        - centerOn
        - direction
    ApiPtzPositionMove:
      description: >-
        Moves the camera to a ptz coordinate in a space defined as pan:(-1,1),
        tilt:(-1,1), zoom:(0,1). This move is normally used for moving to
        presets. It is not only possible to give the full x,y,z coordinates
        here, you can also either give only x,y or give only z.
      allOf:
        - $ref: '#/components/schemas/ApiPtzPosition'
        - properties:
            moveType:
              type: string
              enum:
                - position
    ApiPtzMove:
      type: object
      oneOf:
        - $ref: '#/components/schemas/ApiPtzCenterOnMove'
        - $ref: '#/components/schemas/ApiPtzDirectionMove'
        - $ref: '#/components/schemas/ApiPtzPositionMove'
      discriminator:
        propertyName: moveType
        mapping:
          centerOn: '#/components/schemas/ApiPtzCenterOnMove'
          direction: '#/components/schemas/ApiPtzDirectionMove'
          position: '#/components/schemas/ApiPtzPositionMove'
      properties:
        moveType:
          $ref: '#/components/schemas/MoveType'
      required:
        - moveType
    ApiPtzCenterOnMove:
      description: >-
        Move the center of the camera to the indicated(clicked) point within the
        shown image. The point is encoded as the relative x and y based on the
        width and height of the shown image on a scale from 0 to 1, where the
        (0,0) coordinate is top left and (1,1) is bottom right.
      properties:
        moveType:
          type: string
          enum:
            - centerOn
        relativeX:
          type: number
          format: double
          minimum: 0
          maximum: 1
          description: Relative x coordinate.
        relativeY:
          type: number
          format: double
          minimum: 0
          maximum: 1
          description: Relative y coordinate.
      required:
        - relativeX
        - relativeY
    ApiPtzDirectionMove:
      description: Move the camera in the given direction.
      properties:
        moveType:
          type: string
          enum:
            - direction
        direction:
          description: The direction to move in.
          type: array
          minItems: 1
          maxItems: 3
          items:
            type: string
            enum:
              - up
              - down
              - left
              - right
              - in
              - out
        stepSize:
          description: >-
            How much we will move, if no stepSize is given then `medium`
            stepsize is taken.
          type: string
          enum:
            - small
            - medium
            - large
          default: medium
      required:
        - direction
    ApiPtzPosition:
      description: >-
        The ptz coordinates of the camera in a space defined as pan:(-1,1),
        tilt:(-1,1), zoom:(0,1).
      type: object
      properties:
        x:
          type: number
          format: double
          description: Pan coordinate given as value between -1(max left) and 1(max right).
          minimum: -1
          maximum: 1
        'y':
          type: number
          format: double
          description: Tilt coordinate given as value between -1(max down) and 1(max up).
          minimum: -1
          maximum: 1
        z:
          type: number
          format: double
          description: >-
            Zoom coordinate given as value between 0(fully zoomed out) and
            1(fully zoomed in).
          minimum: 0
          maximum: 1
      minProperties: 1
    PtzPreset:
      type: object
      properties:
        name:
          type: string
          example: Preset 1
        position:
          $ref: '#/components/schemas/ApiPtzPosition'
        timeAtPreset:
          type: integer
          minimum: 5
          description: >-
            Specifies the number of seconds to remain at a preset when in tour
            mode.
      required:
        - name
        - position
        - timeAtPreset
    PtzSettings:
      type: object
      properties:
        presets:
          type: array
          maxItems: 30
          description: Saved positions. Order of this array will be used by the tour mode.
          items:
            $ref: '#/components/schemas/PtzPreset'
        homePreset:
          nullable: true
          type: string
          example: Preset 1
          description: >-
            Name of the default preset to which the camera will return if set to
            homeReturn after the specified auto start delay.
        mode:
          type: string
          enum:
            - homeReturn
            - tour
            - manualOnly
          description: >
            The following modes are available:
              * `manualOnly`: The PTZ camera will only move when issued a direct command by the user.
              * `homeReturn`: After a specified amount of time without receiving a command,
            the PTZ camera will navigate back to the home preset position.  If
            none is set, this will be the factory default position.
              * `tour`: After the specified auto start delay, the PTZ camera will tour through all
            presets in the order specified by the user. It will continue doing
            so until interrupted and will resume after the aforementioned auto
            start delay.
        autoStartDelay:
          type: integer
          minimum: 5
          description: >-
            The time in seconds after which the PTZ camera should resume Touring
            or return to Home when idling.
    PtzSettingsGet:
      allOf:
        - $ref: '#/components/schemas/PtzSettings'
      required:
        - presets
        - homePreset
        - mode
        - autoStartDelay
    PaginatedSpeakerResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/SpeakerForList'
    SpeakerForList:
      allOf:
        - $ref: '#/components/schemas/ApiSpeakerMain'
        - $ref: '#/components/schemas/ApiSpeakerIncludes'
        - $ref: '#/components/schemas/ApiSpeakerFTSRelated'
    SpeakerForSingle:
      allOf:
        - $ref: '#/components/schemas/ApiSpeakerMain'
        - $ref: '#/components/schemas/ApiSpeakerIncludes'
    ApiSpeakerMain:
      type: object
      properties:
        id:
          type: string
        accountId:
          type: string
        name:
          $ref: '#/components/schemas/DeviceName'
        bridgeId:
          $ref: '#/components/schemas/BridgeId1'
        locationId:
          $ref: '#/components/schemas/LocationId'
        isShared:
          type: boolean
      required:
        - id
        - accountId
        - name
        - bridgeId
    ApiSpeakerIncludes:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/DeviceStatus'
        notes:
          $ref: '#/components/schemas/DeviceNotes'
        tags:
          $ref: '#/components/schemas/DeviceTags'
        capabilities:
          $ref: '#/components/schemas/ApiSpeakerCapabilities'
        locationSummary:
          $ref: '#/components/schemas/LocationSummary'
        timeZone:
          $ref: '#/components/schemas/ApiTimeZone'
        devicePosition:
          $ref: '#/components/schemas/ApiDevicePosition'
        networkInfo:
          $ref: '#/components/schemas/ApiNetworkInfo1'
        deviceInfo:
          $ref: '#/components/schemas/ApiDeviceInfo2'
        visibleByBridges:
          type: array
          items:
            type: string
            pattern: '^(?:0[xX])?[0-9a-fA-F]{8}$'
            example: 1000f60d
        settings:
          $ref: '#/components/schemas/SpeakerSettings'
        effectivePermissions:
          $ref: '#/components/schemas/EffectiveSpeakerPermissions'
    ApiSpeakerFTSRelated:
      type: object
      properties:
        qRelevance:
          type: number
          description: >
            Field is only returned when `q` parameter is used and its value
            indicates the relevance of the speaker in relation to the terms in
            the `q` parameter. The range of this value is between 0 and 1,
            higher is better.
          format: float
          minimum: 0
          maximum: 1
          example: 0.5
          readOnly: true
    ApiSpeakerCapabilities:
      type: object
      x-jsoninclude-nonnull-annotation: true
      properties:
        io:
          $ref: '#/components/schemas/ApiDeviceIOCapabilities'
      required:
        - io
    EffectiveSpeakerPermissions:
      readOnly: true
      type: object
      properties:
        read:
          type: boolean
        delete:
          type: boolean
        edit:
          type: boolean
    ApiNetworkInfo1:
      type: object
      properties:
        interface:
          type: string
          enum:
            - lan
            - wan
          description: |
            The bridge interface to which the speaker is attached:
             * lan: Camera lan interface.
             * wan: Wide Area network interface.
        ipUsedByBridge:
          $ref: '#/components/schemas/IpUsedByBridge'
        adapters:
          type: array
          items:
            $ref: '#/components/schemas/ApiAdapterInfo'
    ApiDeviceCredentials1:
      type: object
      properties:
        username:
          type: string
          description: Username to use when authenticating with the device
        password:
          type: string
          description: >-
            Password to use when authenticating with the device. Password will
            not be returned in the GET apis. However, POST and PATCH will take
            the password field.
      required:
        - username
    ApiDeviceInfo2:
      description: Information that could also be visible on the physical device.
      type: object
      properties:
        make:
          description: The Manufactorer or brand of the speaker.
          type: string
          example: Axis communications
        model:
          description: The model of the speaker.
          type: string
          example: C1310-E Network Horn Speaker
        guid:
          $ref: '#/components/schemas/Guid2'
    SpeakerSettings:
      description: >-
        Device specific settings that can be configured on the speakers. This is
        accessible for shared speakers?
      type: object
      properties:
        mainCredentials:
          allOf:
            - description: >
                The credentials that will used for communicating with the
                devices with the main API of the device, which generally is its
                ONVIF API.
            - $ref: '#/components/schemas/ApiDeviceCredentials1'
        adminCredentials:
          $ref: '#/components/schemas/AdminCredentials'
        sipCredentials:
          allOf:
            - description: |
                The credentials that will be used to authenticate SIP sessions.
            - $ref: '#/components/schemas/ApiDeviceCredentials1'
        sipPort:
          type: integer
          description: >-
            Port to which SIP requests should be sent from the bridge.
            Applicable for sip speakers and defaults to 5060
          minimum: 1025
          maximum: 65535
          default: 5060
          example: 5060
    ApiSpeakerUpdate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/DeviceName'
        notes:
          $ref: '#/components/schemas/DeviceNotes'
        tags:
          $ref: '#/components/schemas/DeviceTags'
        locationId:
          $ref: '#/components/schemas/LocationId'
    Guid2:
      type: string
      format: uuid
      example: ddfa5b34-5d04-431e-8287-110fe87edf71
    BridgeId1:
      type: string
      pattern: '^(?:0[xX])?[0-9a-fA-F]{8}$'
      example: 1000f60d
    ApiAddSpeaker:
      allOf:
        - $ref: '#/components/schemas/SpeakerSettings'
        - type: object
          properties:
            registrationStrategy:
              $ref: '#/components/schemas/RegistrationStrategy'
            name:
              $ref: '#/components/schemas/DeviceName'
            tags:
              $ref: '#/components/schemas/DeviceTags'
            bridgeId:
              $ref: '#/components/schemas/BridgeId1'
            guid:
              $ref: '#/components/schemas/Guid2'
            locationId:
              $ref: '#/components/schemas/LocationId'
          required:
            - registrationStrategy
            - name
            - bridgeId
            - guid
    RegistrationStrategy:
      description: Indicates how the speaker was added to the system
      type: string
      default: discoveredSip
      enum:
        - discoveredSip
    AdvancedSettings:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Settings1'
        schema:
          $ref: '#/components/schemas/AdvancedSettingsSchema'
      required:
        - data
    AdvancedSettingsSchema:
      type: object
      readOnly: true
      description: Json schema of version draft 4.
      example:
        $schema: 'http://json-schema.org/draft-04/schema#'
        type: object
        properties:
          audioMode:
            type: string
            enum:
              - disabled
              - talkDown
              - twoWayAudio
          mainCredentials:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
          sipCredentials:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
    Settings1:
      type: object
      properties:
        audioMode:
          type: string
          description: Specifies mode of audio communication.
          enum:
            - disabled
            - talkDown
            - twoWayAudio
        mainCredentials:
          allOf:
            - description: >
                The credentials that will used for communicating with the
                devices with the main API of the device, which generally is its
                ONVIF API.
            - $ref: '#/components/schemas/ApiDeviceCredentials'
        sipCredentials:
          allOf:
            - description: |
                The credentials that will be used to authenticate SIP sessions.
            - $ref: '#/components/schemas/ApiDeviceCredentials'
    PortRecordingActionGet:
      type: object
      properties:
        cameraId:
          type: string
          description: The cameraId of the camera
        enabled:
          type: boolean
          description: >-
            Determines if the camera will record video when the port is
            triggered
    PortRecordingActionPatch:
      type: object
      properties:
        enabled:
          type: boolean
    PaginatedPortRecordingActionResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponseWithSize'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/PortRecordingActionGet'
    ApiEsns1:
      type: array
      example:
        - '00001106'
        - '00001107'
      items:
        type: string
    ApiPaginatedSwitchResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponseWithSize'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/ApiSwitchWithIncludes'
    ApiSwitchUpdate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name1'
    ApiSwitchWithIncludes:
      allOf:
        - $ref: '#/components/schemas/ApiSwitchMain'
        - $ref: '#/components/schemas/ApiSwitchIncludes'
        - type: object
    ApiSwitchMain:
      type: object
      properties:
        id:
          type: string
          example: 25c72162-cfe0-57d1-a94a-ac43904ed01a
          format: uuid
          description: Unique switch identifier
        accountId:
          type: string
          description: Account ID.
          example: '00001106'
        name:
          $ref: '#/components/schemas/Name1'
        bridgeId:
          $ref: '#/components/schemas/BridgeId2'
        portCount:
          type: integer
          example: 4
      required:
        - id
        - name
        - accountId
    ApiSwitchIncludes:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/DeviceStatus'
        notes:
          type: string
          x-jsoninclude-nonnull-annotation: true
          example: Switch with label "SW001"
        ports:
          type: array
          x-jsoninclude-nonnull-annotation: true
          description: >-
            List of ports of the switch and details about each port and what is
            possibly connected to it.
          items:
            $ref: '#/components/schemas/ApiSwitchPort'
        networkInfo:
          $ref: '#/components/schemas/ApiNetworkInfo'
        firmware:
          $ref: '#/components/schemas/ApiFirmware'
        visibleByBridges:
          type: array
          x-jsoninclude-nonnull-annotation: true
          items:
            $ref: '#/components/schemas/BridgeId2'
    ApiSwitchPortUpdate:
      type: object
      properties:
        action:
          type: string
          enum:
            - enable
            - disable
            - reboot
          description: >
            Possible values:

            * `enable` - Turn on the port. * `disable` - Turn off the port. *
            `reboot` - Power cycle the port.
      required:
        - action
    ApiSwitchPort:
      type: object
      x-jsoninclude-nonnull-annotation: true
      properties:
        id:
          type: integer
          example: 11
          description: 'Port identifier, unique for the given switch'
        enabled:
          type: boolean
          description: Indicates whether the port is on (true) or off (false)
        power:
          type: number
          description: Power in Watts that this port is drawing
          example: 9.8
        detectedDeviceCount:
          type: integer
          description: >
            Number of devices connected to the port. If a single device has been
            detected, the Mac address and possibly the IP Address are returned.
          example: 4
        devices:
          type: array
          description: List of devices that are known to be connected to the port.
          items:
            $ref: '#/components/schemas/DetectedDevice'
    DetectedDevice:
      type: object
      description: Describes a device detected behind a port.
      properties:
        macAddress:
          allOf:
            - $ref: '#/components/schemas/MacAddress1'
            - description: MAC address behind the port.
        ipAddress:
          allOf:
            - $ref: '#/components/schemas/IpAddress1'
            - description: IP Address found using ARP for the given MAC address.
        guid:
          type: string
          format: uuid
          description: >-
            GUID of the device that corresponds to the MAC or IP connected to
            the port.
        esn:
          type: string
          description: >-
            Esn of the device that corresponds to the MAC or IP connected to the
            port.
          example: '100052842'
        deviceName:
          type: string
          nullable: true
          description: >-
            Name of the device that corresponds to the MAC or IP connected to
            the port. The value is null if no device is connected to the port.
          example: CAM 1
        deviceId:
          type: string
          nullable: true
          description: >-
            Id of the device that corresponds to the MAC or IP connected to the
            port. The value is null if no device is connected to the port.
          example: '100052842'
        deviceType:
          type: string
          nullable: true
          description: >
            Type of the device that corresponds to the MAC or IP connected to
            the port. The value is null if no device is connected to the port.
            new devices might be added in the future.
          enum:
            - camera
            - speaker
            - bridge
            - multiCamera
    Name1:
      type: string
      example: EEN 4 Port PoE
      description: Switch name
    MacAddress1:
      type: string
      pattern: '^([A-F0-9]{2}:){5}[A-F0-9]{2}$'
      example: '8A:D4:AD:09:DF:91'
    IpAddress1:
      type: string
      pattern: >-
        ^(?:25[0-5]|2[0-4]\d|[0-1]?\d{1,2})(?:\.(?:25[0-5]|2[0-4]\d|[0-1]?\d{1,2})){3}$
      example: 10.143.55.140
    BridgeId2:
      type: string
      example: 1000f60d
      description: |
        The bridge a switch is connected to.
    ApiPaginatedMultiCameraResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponseWithSize'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/ApiMultiCameraWithIncludes'
    ApiMultiCameraWithIncludes:
      allOf:
        - $ref: '#/components/schemas/ApiMultiCameraMain'
        - $ref: '#/components/schemas/ApiMultiCameraIncludes'
        - type: object
    ApiMultiCameraMain:
      type: object
      properties:
        id:
          type: string
        accountId:
          type: string
        name:
          type: string
        bridgeId:
          $ref: '#/components/schemas/BridgeId3'
        locationId:
          $ref: '#/components/schemas/LocationId'
      required:
        - id
        - accountId
        - name
        - bridgeId
    ApiMultiCameraChannel:
      type: object
      properties:
        guid:
          $ref: '#/components/schemas/Guid3'
        cameraId:
          type: string
        channelName:
          type: string
          example: Channel 01
      required:
        - guid
        - channelName
    ApiPaginatedMultiCameraChannelResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponseWithSize'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/ApiMultiCameraChannel'
    ApiMultiCameraIncludes:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/DeviceStatus'
        locationSummary:
          $ref: '#/components/schemas/LocationSummary'
        deviceAddress:
          $ref: '#/components/schemas/DeviceAddress'
        timeZone:
          $ref: '#/components/schemas/ApiTimeZone'
        notes:
          $ref: '#/components/schemas/DeviceNotes'
        tags:
          $ref: '#/components/schemas/DeviceTags'
        devicePosition:
          $ref: '#/components/schemas/ApiDevicePosition'
        networkInfo:
          $ref: '#/components/schemas/ApiNetworkInfoWithMainIp'
        deviceInfo:
          $ref: '#/components/schemas/ApiDeviceInfo3'
        firmware:
          $ref: '#/components/schemas/ApiFirmware'
        visibleByBridges:
          type: array
          x-jsoninclude-nonnull-annotation: true
          items:
            type: string
            pattern: '^(?:0[xX])?[0-9a-fA-F]{8}$'
            example: 1000f60d
        effectivePermissions:
          $ref: '#/components/schemas/EffectiveMulticameraPermissions'
    ApiAddMultiCamera:
      type: object
      properties:
        guid:
          $ref: '#/components/schemas/Guid3'
        name:
          $ref: '#/components/schemas/DeviceName'
        tags:
          $ref: '#/components/schemas/DeviceTags'
        locationId:
          $ref: '#/components/schemas/LocationId'
        bridgeId:
          $ref: '#/components/schemas/BridgeId3'
        credentials:
          $ref: '#/components/schemas/ApiDeviceCredentials'
      required:
        - name
        - bridgeId
        - guid
    BridgeId3:
      type: string
      pattern: '^(?:0[xX])?[0-9a-fA-F]{8}$'
      example: 1000f60d
      description: |
        The bridge a multi camera is connected to. 
    Guid3:
      type: string
      format: uuid
      example: ddfa5b34-5d04-431e-8287-110fe87edf71
    ApiDeviceInfo3:
      type: object
      x-jsoninclude-nonnull-annotation: true
      properties:
        icon:
          description: Icon of multi camera.
          type: string
        make:
          description: The Manufactorer or brand of the multi camera.
          type: string
        model:
          description: The model of the multi camera.
          type: string
        guid:
          $ref: '#/components/schemas/Guid3'
    ApiMultiCameraUpdate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/DeviceName'
        notes:
          $ref: '#/components/schemas/DeviceNotes'
        locationId:
          $ref: '#/components/schemas/LocationId'
        tags:
          $ref: '#/components/schemas/DeviceTags'
    EffectiveMulticameraPermissions:
      readOnly: true
      type: object
      x-jsoninclude-nonnull-annotation: true
      properties:
        read:
          type: boolean
        delete:
          type: boolean
        edit:
          type: boolean
    ApiPaginatedAvailableDeviceResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponseWithSize'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/ApiAvailableDevice'
    ApiAvailableDevice:
      description: >
        Represents a device found that is available to be added to the account.
        Note: Schema might change for new device types, so make sure any parsing
        code that has strict requirements only tries to parse device types it
        has been written for and doesn't try to parse everything.
      type: object
      properties:
        deviceType:
          $ref: '#/components/schemas/DeviceType1'
        guid:
          $ref: '#/components/schemas/Guid4'
        state:
          type: string
          enum:
            - addable
            - notSupported
            - inOtherAccount
            - unknown
          default: unknown
          description: >
            Indicates if and how a device can be added. *As there might be
            future reasons why devices cannot be added clients should be written
            in such a way that they can handle new values to be added. In case a
            client doesn't understand the state, it should handle it as it
            handles the "unknown" state, which should be to still show the
            device, but tell the user to contact support to help. add the
            device.

            The states:
              * `addable`: Camera can be added and should work.
              * `notSupported`: Indicates if the device can really be added, or if it is unsupported, due to for example an
            untested firmware version or unexpected responses from the device.
            Unsupported devices are reported to help users debug why they cannot
            add a device. The users should contact support if they wish to add
            the device to their account.
              * `inOtherAccount`: Indicates if the device has already been added to a different account, and it is thus not
            possible to add it to the current account. The user should contact
            support to resolve this issue.
              * `unknown`: Indicates the camera is in a state that means it is visible, but cannot be added due to some
            issue. This state cane be transient, so users should be told to try
            again a few minutes later. If it is still in this state, users
            should contact support to help resolve the issue.
        unknownCredentials:
          type: boolean
          description: >
            No working credentials are known for this camera, and thus the
            device will not work directly after adding. The user can either
            supply credentials while adding the device, change them after
            adding, or reset the device and thus its credentials.
        visibleByBridges:
          type: array
          items:
            $ref: '#/components/schemas/BridgeId4'
        make:
          description: The manufacturer or brand of the camera.
          type: string
          nullable: true
        model:
          description: The model of the camera.
          type: string
          nullable: true
        firmwareVersion:
          type: string
          example: v20211019_542_3022
          nullable: true
        ipAddress:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/IpAddress2'
            - description: The IP address that is used to communicate to the device.
        otherIpAddress:
          description: Other known IP addresses of the device.
          type: array
          items:
            $ref: '#/components/schemas/IpAddress2'
        visibleByBridgesDetailed:
          type: array
          x-jsoninclude-nonnull-annotation: true
          items:
            $ref: '#/components/schemas/Bridge'
      required:
        - deviceType
        - guid
        - state
        - unknownCredentials
        - visibleByBridges
    DeviceType1:
      type: string
      enum:
        - camera
        - speaker
        - display
        - multiCamera
    Bridge:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/BridgeId4'
        name:
          type: string
          description: Name of the bridge.
          example: Bridge Name
    BridgeId4:
      type: string
      pattern: '^(?:0[xX])?[0-9a-fA-F]{8}$'
      example: 1000f60d
      description: |
        Unique ID of an EEN bridge.
    Guid4:
      type: string
      format: uuid
      example: ddfa5b34-5d04-431e-8287-110fe87edf71
    IpAddress2:
      type: string
      pattern: >-
        ^(?:25[0-5]|2[0-4]\d|[0-1]?\d{1,2})(?:\.(?:25[0-5]|2[0-4]\d|[0-1]?\d{1,2})){3}$
      example: 10.143.55.140
  parameters:
    cameraId:
      in: path
      name: cameraId
      schema:
        type: string
      required: true
    name__contains:
      in: query
      name: name__contains
      description: >
        Filter to get the cameras whose the name contains the provided
        substring. The lookup is exact and case insensitive
      schema:
        type: string
    locationId__in:
      in: query
      name: locationId__in
      required: false
      description: List of Location IDs to filter on that is comma separated.
      style: form
      explode: false
      schema:
        type: array
        example:
          - 2428fda3-389f-48ce-b062-85875dd6b2e2
        items:
          type: string
    id__in:
      in: query
      name: id__in
      description: >-
        Filter to get the cameras whose id is on the provided list. The lookup
        is exact and case insensitive.
      schema:
        type: array
        items:
          type: string
      style: form
      explode: false
    id__notIn:
      in: query
      name: id__notIn
      description: >-
        Filter to exlude the cameras whose ids are in the provided list. The
        lookup is exact and case insensitive.
      schema:
        type: array
        items:
          type: string
      style: form
      explode: false
    id__contains:
      in: query
      name: id__contains
      description: >
        Filter to get the cameras whose the id contains the provided substring.
        The lookup is exact and case insensitive
      schema:
        type: string
    shared:
      in: query
      name: shareDetails.shared
      description: >
        If set to `true`, only cameras that are shared with the current account
        by another account will be returned. If set to `false`, the cameras that
        are shared with the current account will be filtered out.
      schema:
        type: boolean
    sharedCameraAccount:
      in: query
      name: shareDetails.accountId
      description: Filter to get the cameras that are shared from the provided account.
      schema:
        type: string
    firstResponder:
      in: query
      name: shareDetails.firstResponder
      description: >
        If set to `true`, only cameras that are shared with the current account
        using the "First responder" feature will be returned. If set to `false`,
        the cameras that are shared with the current account using the "First
        responder" feature will be filtered out.
      schema:
        type: boolean
    directToCloud:
      in: query
      name: deviceInfo.directToCloud
      description: >
        If set to `true`, only cameras that connect directly to the VMS cloud,
        and not through a bridge will be returned. If set to `false`, the
        cameras that connect directly to the VMS cloud will be filtered out.
      schema:
        type: boolean
    name:
      in: query
      name: name
      description: >-
        Filter to get the cameras with the specified name. The lookup is exact
        and case insensitive.
      schema:
        type: string
    name__in:
      in: query
      name: name__in
      description: >-
        Filter to get the cameras whose name is on the provided list. The lookup
        is exact and case insensitive.
      schema:
        type: array
        items:
          type: string
      style: form
      explode: false
    bridgeId__in:
      in: query
      name: bridgeId__in
      required: false
      description: List of Bridge IDs to filter on that is comma separated.
      style: form
      explode: false
      schema:
        $ref: '#/components/schemas/ApiEsns'
    multiCameraId:
      in: query
      name: multiCameraId
      required: false
      description: >-
        Filter to get cameras with given multiCameraId. multiCameraId=null
        returns cameras that are not multi camera cameras.
      schema:
        $ref: '#/components/schemas/ApiEsn'
    multiCameraId__ne:
      in: query
      name: multiCameraId__ne
      required: false
      description: >-
        Filter to get cameras with multiCameraId that is not equal to given
        value.
      schema:
        $ref: '#/components/schemas/ApiEsn'
    multiCameraId__in:
      in: query
      name: multiCameraId__in
      required: false
      description: List of multi camera IDs to filter on that is comma seperated.
      style: form
      explode: false
      schema:
        $ref: '#/components/schemas/ApiEsns'
    tags__contains:
      in: query
      name: tags__contains
      required: false
      description: 'Only return cameras that have all tags in the list, separated by commas.'
      style: form
      explode: false
      schema:
        type: array
        example:
          - string
        items:
          type: string
    tags__any:
      in: query
      name: tags__any
      required: false
      description: >-
        Only return cameras that have one or more of the tags in the list,
        separated by commas.
      style: form
      explode: false
      schema:
        type: array
        example:
          - string
        items:
          type: string
    packages__contains:
      in: query
      name: packages__contains
      required: false
      description: >-
        Only return cameras that have enabled all packages in the list,
        separated by commas.
      style: form
      explode: false
      schema:
        type: array
        example:
          - een.vsp
        items:
          type: string
    layoutId:
      in: query
      name: layoutId
      required: false
      description: Filter to get cameras that are part of the given layout.
      schema:
        type: string
    speakerId__in:
      in: query
      name: speakerId__in
      required: false
      description: Filter to get cameras that are a part of the given speaker esn.
      schema:
        type: array
        items:
          type: string
      style: form
      explode: false
    q:
      in: query
      name: q
      description: >
        Text search that is applied to multiple fields. The fields being
        searched are defined by the backend and can be changed without warning.
        Example fields being searched are metadata fields of the camera itself
        such as `id`, `name`, `notes`, `timezone`, `multiCameraId`, `speakerId`
        and `tags`; the important ids such as `accountId`, `bridgeId`, and,
        `locationId`, and metadata of important linked resources such as the
        location, bridge, share details, device position, device info and the
        viewports configured for the camera.
      schema:
        type: string
        example: entrance
    qRelevance__gte:
      in: query
      name: qRelevance__gte
      description: >
        Sets the current minimum similarity threshold that is used with the `q`
        parameter. The threshold must be between 0 and 1 (float, default is
        0.5).
      schema:
        type: number
        format: float
        minimum: 0
        maximum: 1
        example: 0.5
    enabledAnalytics__contains:
      in: query
      name: enabledAnalytics__contains
      required: false
      description: >-
        Only return cameras that have enabled all analytics in the
        comma-separated list.
      style: form
      explode: false
      schema:
        type: array
        example:
          - een.tamperDetectionEvent.v1
        items:
          type: string
    includeForList:
      in: query
      name: include
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - status
            - locationSummary
            - deviceAddress
            - timeZone
            - notes
            - tags
            - devicePosition
            - networkInfo
            - deviceInfo
            - firmware
            - visibleByBridges
            - capabilities
            - effectivePermissions
            - shareDetails
            - analog
            - qRelevance
            - packages
            - dewarpConfig
            - adminCredentials
            - publicSafetySharing
            - enabledAnalytics
    includeForSingle:
      in: query
      name: include
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - status
            - locationSummary
            - deviceAddress
            - timeZone
            - notes
            - tags
            - devicePosition
            - networkInfo
            - deviceInfo
            - firmware
            - visibleByBridges
            - capabilities
            - effectivePermissions
            - shareDetails
            - analog
            - packages
            - dewarpConfig
            - enabledAnalytics
    sort:
      in: query
      name: sort
      description: |
        Comma separated list of of fields that should be sorted.
         * `sort=` - not providing any value will result in error 400
         * `sort=+name,+name` - same values will result in error 400
         * `sort=-name,+name` - mutially exclusive values will return error 400
         * maxItem=3 - Only Three values will be accepted, more will return error 400
         * qRelevance is optional ordering parameter which is available if q filter is used, if q filter is not passed qRelevance as ordering parameter will return error 400 
      schema:
        type: array
        default:
          - +name
        items:
          type: string
          maxItems: 3
          enum:
            - '-name'
            - '-locationSummary.name'
            - '-bridgeSummary.name'
            - '-qRelevance'
            - +name
            - +locationSummary.name
            - +bridgeSummary.name
            - +qRelevance
      example:
        - +name
        - '-locationSummary.name'
      style: form
      explode: false
    timestamp__gte:
      in: query
      name: timestamp__gte
      description: Minimum timestamp to list metrics. Defaults to 7 days ago.
      schema:
        type: string
        format: date-time
        example: '2023-04-04T09:38:37.372Z'
    timestamp__lte:
      in: query
      name: timestamp__lte
      description: Maximum timestamp to list metrics. Defaults to now.
      schema:
        type: string
        format: date-time
        example: '2023-04-04T11:48:52.000Z'
    target__in:
      in: query
      required: true
      name: target__in
      description: >
        Comma separated list of metric types. The following targets are
        available:
         * `kilobytesOnDisk` - shows how much storage capacity is used on bridge.
         * `bytesPurged` - shows how much data was purged. Data is marked as purged if it is removed before Minimum On Premise Retention is met.
         * `bytesStored` - shows how much data was stored.
         * `bytesFreed` - shows how much data was freed, includes purges.
         * `bandwidthBackground` - extra data that contains data from the past
        which bridge is sending to try to meet cloud retention goals and the
        data that are requested from cloud e.g when user is viewing a video.
         * `bandwidthRealtime` - the minimum amount of data, required to keep the camera operational.
      style: form
      explode: false
      schema:
        type: array
        example:
          - kilobytesOnDisk
        minItems: 1
        items:
          type: string
          enum:
            - kilobytesOnDisk
            - bytesPurged
            - bytesStored
            - bytesFreed
            - bandwidthBackground
            - bandwidthRealtime
    period:
      in: query
      name: period
      description: >-
        Defaults to hour. It performs linear interpolation to get to the target
        period.
      schema:
        type: string
        enum:
          - day
          - hour
          - minute
    status__in:
      in: query
      name: status__in
      description: >-
        Filter to get the devices with the specified status. The lookup is exact
        and case insensitive.
      schema:
        type: array
        items:
          $ref: '#/components/schemas/DeviceConnectionStatus'
      example:
        - online
        - error
      style: form
      explode: false
      required: false
    status__ne:
      in: query
      name: status__ne
      description: >-
        Filter to get the devices with status that is not equal to the provided
        value. The lookup is exact and case insensitive.
      schema:
        type: array
        items:
          $ref: '#/components/schemas/DeviceConnectionStatus'
      example:
        - online
        - error
      style: form
      explode: false
      required: false
    pageToken:
      in: query
      name: pageToken
      description: >
        Token string value that references a page for pagination. This value is
        received when retrieving the first page in the `nextPageToken` and
        `prevPageToken` fields.
      example: b2Zmc2V0PTEwJmxpbWl0PTEw
      required: false
      schema:
        type: string
    pageSize:
      in: query
      name: pageSize
      description: >
        The number of entries to return per page. The maximum range of valid
        page sizes is documented with minimum and  maximum values, but the range
        might be further limited dynamically based on the requested information,
        account, and system status. Values outside of the (dynamic) allowed
        range will not result in an error, but will be clamped to the nearest
        limit. Thus, logic to detect the last page should not be based on
        comparing the requested size with the received size, but on the
        existence of a `nextPageToken` value.
      example: 100
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 500
        default: 100
    portId:
      in: path
      name: portId
      schema:
        type: string
      required: true
    include:
      in: query
      name: include
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - status
            - rules
    include1:
      in: query
      name: include
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - schema
            - proposedValues
    bridgeId:
      in: path
      name: bridgeId
      schema:
        type: string
      required: true
    name__contains1:
      in: query
      name: name__contains
      description: >
        Filter to get the bridges whose the name contains the provided
        substring. The lookup is exact and case insensitive
      schema:
        type: string
    tags__contains1:
      in: query
      name: tags__contains
      required: false
      description: 'Only return bridges that have all tags in the list, separated by commas.'
      style: form
      explode: false
      schema:
        type: array
        example:
          - string
        items:
          type: string
    tags__any1:
      in: query
      name: tags__any
      required: false
      description: >-
        Only return bridges that have one or more of the tags in the list,
        separated by commas.
      style: form
      explode: false
      schema:
        type: array
        example:
          - string
        items:
          type: string
    id__in1:
      in: query
      name: id__in
      description: >-
        Filter to get the bridges whose id is on the provided list. The lookup
        is exact and case insensitive.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    id__contains1:
      in: query
      name: id__contains
      description: >
        Filter to get the bridges whose the id contains the provided substring.
        The lookup is exact and case insensitive
      schema:
        type: string
    name1:
      in: query
      name: name
      description: >-
        Filter to get the bridges with the specified name. The lookup is exact
        and case insensitive.
      schema:
        type: string
    name__in1:
      in: query
      name: name__in
      description: >-
        Filter to get the bridges whose name is on the provided list. The lookup
        is exact and case insensitive.
      schema:
        type: array
        items:
          type: string
      style: form
      explode: false
    includeForList1:
      in: query
      name: include
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - status
            - locationSummary
            - deviceAddress
            - timeZone
            - notes
            - tags
            - devicePosition
            - networkInfo
            - deviceInfo
            - effectivePermissions
            - resourceCounts
            - resourceStatusCounts
            - qRelevance
    includeForSingle1:
      in: query
      name: include
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - status
            - locationSummary
            - deviceAddress
            - timeZone
            - notes
            - tags
            - devicePosition
            - networkInfo
            - deviceInfo
            - effectivePermissions
            - resourceCounts
            - resourceStatusCounts
    target__in1:
      in: query
      required: true
      name: target__in
      description: >
        Comma separated list of metric types. The following targets are
        available:
         * `kilobytesOnDisk` - shows how much storage capacity is used on bridge.
         * `availableKilobytesOnDisk` - shows how much storage capacity is not used on bridge.
         * `bytesStored` - shows how much data was stored.
         * `bandwidthBackground` - extra data that contains data from the past
        which bridge is sending to try to meet cloud retention goals and the
        data that are requested from cloud e.g when user is viewing a video.
         * `bandwidthRealtime` - the minimum amount of data, required to keep the bridge operational.
         * `bytesFreed` - shows how much data was freed, includes purges.
         * `bandwidth` - the bandwidth as measured while sending data to the cloud.
      style: form
      explode: false
      schema:
        type: array
        example:
          - kilobytesOnDisk
          - availableKilobytesOnDisk
        minItems: 1
        items:
          type: string
          enum:
            - kilobytesOnDisk
            - availableKilobytesOnDisk
            - bytesStored
            - bandwidthBackground
            - bandwidthRealtime
            - bytesFreed
            - bandwidth
    q1:
      in: query
      name: q
      description: >
        Text search that is applied to multiple fields. The fields being
        searched are defined by the backend and can be changed without warning.
        Example fields being searched: `id`, `accountId`, `name`, `notes`,
        `tags`, `timeZone.zone`, `devicePosition.floor`, and metadata of
        important linked resources such as the location.
      schema:
        type: string
        example: entrance
    sort1:
      in: query
      name: sort
      description: |
        Comma separated list of of fields that should be sorted.
         * `sort=` - not providing any value will result in error 400
         * `sort=+name,+name` - same values will result in error 400
         * `sort=-name,+name` - mutially exclusive values will return error 400
         * maxItem=3 - Only Three values will be accepted, more will return error 400
         * qRelevance is optional ordering parameter which is available if q filter is used, if q filter is not passed qRelevance as ordering parameter will return error 400
      schema:
        type: array
        default:
          - +name
        items:
          type: string
          maxItems: 3
          enum:
            - '-name'
            - '-locationSummary.name'
            - '-qRelevance'
            - +name
            - +locationSummary.name
            - +qRelevance
      example:
        - +name
        - '-qRelevance'
      style: form
      explode: false
    id:
      in: path
      name: id
      schema:
        type: string
        pattern: '^\w{8}$'
      required: true
    cameraId1:
      name: cameraId
      in: path
      required: true
      description: ID of camera we want to operate on.
      schema:
        type: string
        pattern: '^[0-9a-f]{8}$'
        example: abcdef01
    cameraId2:
      name: cameraId
      in: path
      required: true
      description: ID of camera we want to operate on.
      schema:
        type: string
        pattern: '^[0-9a-f]{8}$'
        example: abcdef01
    name__contains2:
      in: query
      name: name__contains
      description: >
        Filter to get the speakers whose the name contains the provided
        substring. The lookup is exact and case insensitive
      schema:
        type: string
    id__in2:
      in: query
      name: id__in
      description: >-
        Filter to get the speakers whose id is on the provided list. The lookup
        is exact and case insensitive.
      schema:
        type: array
        items:
          type: string
      style: form
      explode: false
    id__contains2:
      in: query
      name: id__contains
      description: >
        Filter to get the speakers whose the id contains the provided substring.
        The lookup is exact and case insensitive
      schema:
        type: string
    name2:
      in: query
      name: name
      description: >-
        Filter to get the speakers with the specified name. The lookup is exact
        and case insensitive.
      schema:
        type: string
    name__in2:
      in: query
      name: name__in
      description: >-
        Filter to get the speakers whose name is on the provided list. The
        lookup is exact and case insensitive.
      schema:
        type: array
        items:
          type: string
      style: form
      explode: false
    bridgeId__in1:
      in: query
      name: bridgeId__in
      required: false
      description: List of Bridge IDs to filter on that is comma separated.
      schema:
        $ref: '#/components/schemas/ApiEsns'
    tags__contains2:
      in: query
      name: tags__contains
      required: false
      description: >-
        Only return speakers that have all tags in the list, separated by
        commas.
      style: form
      explode: false
      schema:
        type: array
        example:
          - string
        items:
          type: string
    tags__any2:
      in: query
      name: tags__any
      required: false
      description: >-
        Only return speakers that have one or more of the tags in the list,
        separated by commas.
      style: form
      explode: false
      schema:
        type: array
        example:
          - string
        items:
          type: string
    q2:
      in: query
      name: q
      description: >
        Text search that is applied to multiple fields. The fields being
        searched are defined by the backend and can be changed without warning.
        Example fields being searched: `id`, `accountId`, `name`, `bridgeId`,
        `locationId`, `notes`, `tags`, `locationSummary.name`.
      schema:
        type: string
        example: entrance
    includeForList2:
      in: query
      name: include
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - status
            - locationSummary
            - timeZone
            - notes
            - tags
            - capabilities
            - devicePosition
            - networkInfo
            - deviceInfo
            - visibleByBridges
            - settings
            - effectivePermissions
            - qRelevance
    includeForSingle2:
      in: query
      name: include
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - status
            - locationSummary
            - timeZone
            - notes
            - tags
            - capabilities
            - devicePosition
            - networkInfo
            - deviceInfo
            - visibleByBridges
            - settings
            - effectivePermissions
    sort2:
      in: query
      name: sort
      description: |
        Comma separated list of of fields that should be sorted.
         * `sort=` - not providing any value will result in error 400
         * `sort=+name,+name` - same values will result in error 400
         * `sort=-name,+name` - mutially exclusive values will return error 400
         * maxItem=2 - Only two values will be accepted, more will return error 400
         * qRelevance is optional ordering parameter which is available if q filter is used, if q filter is not passed qRelevance as ordering parameter will return error 400
      schema:
        type: array
        default:
          - +name
        items:
          type: string
          maxItems: 2
          enum:
            - '-name'
            - '-bridgeSummary.name'
            - '-locationSummary.name'
            - '-qRelevance'
            - +name
            - +bridgeSummary.name
            - +locationSummary.name
            - +qRelevance
      example:
        - +name
        - '-qRelevance'
      style: form
      explode: false
    speakerId:
      in: path
      name: speakerId
      schema:
        type: string
      required: true
    settingsInclude:
      in: query
      name: include
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - schema
    deviceId:
      in: path
      name: deviceId
      schema:
        type: string
      required: true
    switchId:
      in: path
      name: switchId
      schema:
        type: string
      required: true
    portId1:
      in: path
      name: portId
      schema:
        type: integer
      required: true
    id__in3:
      in: query
      name: id__in
      required: false
      description: List of IDs to filter on that is comma separated.
      style: form
      explode: false
      schema:
        $ref: '#/components/schemas/ApiEsns1'
    name__contains3:
      in: query
      name: name__contains
      required: false
      description: >
        Filter to get the switches whose the name contains the provided
        substring. The lookup is exact and case insensitive
      schema:
        type: string
    id__contains3:
      in: query
      name: id__contains
      required: false
      description: >
        Filter to get the switches whose the id contains the provided substring.
        The lookup is exact and case insensitive
      schema:
        type: string
    include2:
      in: query
      name: include
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - status
            - notes
            - networkInfo
            - firmware
            - ports
            - visibleByBridges
    include3:
      in: query
      name: include
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - status
            - locationSummary
            - deviceAddress
            - timeZone
            - notes
            - tags
            - devicePosition
            - networkInfo
            - deviceInfo
            - firmware
            - visibleByBridges
            - effectivePermissions
            - qRelevance
    sort3:
      in: query
      name: sort
      description: |
        Comma separated list of of fields that should be sorted.
         * `sort=` - not providing any value will result in error 400
         * `sort=+name,+name` - same values will result in error 400
         * `sort=-name,+name` - mutially exclusive values will return error 400
         * maxItem=2 - Only Three values will be accepted, more will return error 400
         * qRelevance is optional ordering parameter which is available if q filter is used, if q filter is not passed qRelevance as ordering parameter will return error 400 
      schema:
        type: array
        default:
          - +name
        items:
          type: string
          maxItems: 2
          enum:
            - '-name'
            - '-qRelevance'
            - +name
            - +qRelevance
      example:
        - +name
        - '-qRelevance'
      style: form
      explode: false
    deviceType__in:
      in: query
      name: deviceType__in
      required: true
      description: >
        List of device types that are supported by the client. Required as new
        device types might be added at any time, which might need client
        (parser) changes before they are supported.
      style: form
      explode: false
      schema:
        type: array
        minItems: 1
        items:
          type: string
          enum:
            - camera
            - speaker
            - display
            - multiCamera
    state__in:
      in: query
      name: state__in
      description: >
        List of different device states. If provided, the response will only
        contain devices with provided states.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - addable
            - notSupported
            - inOtherAccount
            - unknown
    bridgeId__in2:
      in: query
      name: bridgeId__in
      description: >-
        Filter to get the available devices whose bridge id is on the provided
        list. The lookup is exact and case insensitive
      schema:
        type: array
        items:
          type: string
    include4:
      in: query
      name: include
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - visibleByBridgesDetailed
  responses:
    validationError:
      description: >-
        The supplied object is invalid. Error detail will contain the validation
        error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiV3Error'
          examples:
            unexpectedArgument:
              value:
                code: 400
                status: invalidArgument
                message: 'Unexpected argument: name'
                details:
                  - type: errorInfo
                    reason: unexpectedArgument
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
            missingRequiredArgument:
              value:
                code: 400
                status: invalidArgument
                message: 'Missing required arguments: name, id'
                details:
                  - type: errorInfo
                    reason: missingRequiredArgument
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
            badRequestInvalidJSON:
              value:
                code: 400
                status: invalidArgument
                message: Invalid JSON
                details:
                  - type: errorInfo
                    reason: invalidJSON
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
            badRequestInvalidArgument:
              value:
                code: 400
                status: invalidArgument
                message: 'Invalid Argument: Argument name is too long'
                details:
                  - type: errorInfo
                    reason: wrongArgumentValue
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
                  - type: badRequest
                    argumentViolations:
                      - argumentName: name
                        description: Name is too long
    unauthorized:
      description: You are not authenticated. Please authenticate and try again.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiV3Error'
          example:
            code: 401
            status: unauthenticated
            message: The client caller does not have a valid authentication credential
            details:
              - type: errorInfo
                reason: unauthenticated
                domain: apiv3
                metadata:
                  path: /api/v3.0/<resource>
    forbidden:
      description: You have no permission to access the specified resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiV3Error'
          examples:
            invalidPermission:
              value:
                code: 403
                status: permissionDenied
                message: >-
                  The client caller does not have permission for the specified
                  operation
                details:
                  - type: errorInfo
                    reason: invalidPermission
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
            wrongEdition:
              value:
                code: 403
                status: permissionDenied
                message: This feature is not enabled for the account
                details:
                  - type: errorInfo
                    reason: wrongEdition
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/locations
            wrongAccountType:
              value:
                code: 403
                status: permissionDenied
                message: This feature is only available for end users
                details:
                  - type: errorInfo
                    reason: wrongAccountType
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/locations
    resourceNotFound:
      description: Referenced resource could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiV3Error'
          examples:
            endpointNotFound:
              value:
                code: 404
                status: notFound
                message: The API endpoint was not found
                details:
                  - type: errorInfo
                    reason: endpointNotFound
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
            resourceNotFound:
              value:
                code: 404
                status: notFound
                message: The resource was not found
                details:
                  - type: errorInfo
                    reason: resourceNotFound
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
                  - type: resourceInfo
                    resource: <resource>
                    ids:
                      - <ids>
    conflict:
      description: >-
        There was a conflict while trying to perform your request. See error
        details for more information.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiV3Error'
          examples:
            alreadyExists:
              value:
                code: 409
                status: conflict
                message: The resource already exists
                details:
                  - type: errorInfo
                    reason: alreadyExists
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
            foreignKeyConflict:
              value:
                code: 409
                status: conflict
                message: >-
                  The resource cannot be deleted as other resources link to it.
                  Please remove the links or delete the other resources first
                  before deleting this resource.
                details:
                  - type: errorInfo
                    reason: foreignKeyConflict
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
            childDevicesExist:
              value:
                code: 409
                status: conflict
                message: >-
                  This device can not be deleted before all attached cameras
                  have been deleted. Please delete all cameras and then delete
                  this device.
                details:
                  - type: errorInfo
                    reason: childDevicesExist
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
    internalServerError:
      description: Something went wrong in the server. Please try again.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiV3Error'
          example:
            code: 500
            status: internal
            message: An internal error has occurred. Please try again later.
            details:
              - type: errorInfo
                reason: unexpectedError
                domain: apiv3
                metadata:
                  path: /api/v3.0/<resource>
x-readme:
  explorer-enabled: true
