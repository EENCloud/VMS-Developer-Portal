---
openapi: 3.0.3
info:
  title: GROUPING
  version: 3.0.0
servers:
  - url: 'https://{BaseUrl}/api/v3.0'
    description: Eagle Eye Networks API Server
    variables:
      BaseUrl:
        default: api.cxxx.eagleeyenetworks.com
        description: >-
          HTTPS Base url to use for all API calls, retrieved from
          https://api.eagleeyenetworks.com/api/v3.0/clientSettings
security:
  - bearerAuth: []
tags:
  - name: Layouts
    description: >-
      All core operations on one layouts, which are used to show multiple feeds
      at the same time.
  - name: Tags
    description: Retrieve and manage the tags in the account.
  - name: Locations
    description: All core operations on the location resource.
  - name: Floors
    description: Allows the retrieval and management of the floors of a location.
  - name: Floor Plans
    description: Allows the retrieval and management of floor plans of a location.
paths:
  /layouts:
    get:
      operationId: getLayouts
      description: >
        This endpoint allows you to retrieve all the layouts associated with the
        account.

        It is important to note that after using the pageSize parameter, the
        "totalSize"  in the response represents the total number of available
        layouts, not the number of layouts resulting from the query string.
      parameters:
        - $ref: '#/components/parameters/includeForList'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/name__in'
        - $ref: '#/components/parameters/name__contains'
        - $ref: '#/components/parameters/id__in'
        - $ref: '#/components/parameters/bridge'
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/qRelevance__gte'
      responses:
        '200':
          description: Successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPaginatedLayoutResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalServerError'
      tags:
        - Layouts
    post:
      description: This endpoint allows you to create a layout.
      operationId: createLayout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiLayoutCreate'
      responses:
        '201':
          description: Layout Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiLayoutForSingle'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internalServerError'
      tags:
        - Layouts
  '/layouts/{layoutId}':
    parameters:
      - $ref: '#/components/parameters/layoutId'
    delete:
      operationId: deleteLayout
      description: This endpoint allows you to delete an existing layout.
      responses:
        '204':
          description: Layout deleted.
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
      tags:
        - Layouts
    get:
      operationId: getLayout
      description: This endpoint allows you to retrieve info of a specific layout.
      tags:
        - Layouts
      parameters:
        - $ref: '#/components/parameters/includeForSingle'
      responses:
        '200':
          description: Successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiLayoutForSingle'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      description: This endpoint allows you to update a specific layout.
      operationId: updateLayout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiLayoutUpdate'
      responses:
        '204':
          description: Layout Updated
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
      tags:
        - Layouts
  /tags:
    get:
      operationId: getTags
      description: >
        Retrieves a list of all tags visible to the current user.

        You can filter the result by name__contains and sort the result by sort
        field. Additionally, you can paginate the results by pageToken and
        pageSize.
      tags:
        - Tags
      parameters:
        - $ref: '#/components/parameters/sort1'
        - $ref: '#/components/parameters/name__contains1'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: Account retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsList'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalServerError'
  /locations:
    get:
      operationId: getLocations
      description: >
        This endpoint is used to retrieve a list of locations. Support for
        Location-based camera grouping is only available in the professional and
        enterprise editions.

        It is important to note that after using the pageSize parameter, the
        "totalSize" in the response represents the total number of available
        locations, not the number of locations resulting from the query string.
      tags:
        - Locations
      parameters:
        - $ref: '#/components/parameters/includeForList1'
        - $ref: '#/components/parameters/sort2'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/parentId'
        - $ref: '#/components/parameters/parentId__ne'
        - $ref: '#/components/parameters/parentId__in'
        - $ref: '#/components/parameters/name1'
        - $ref: '#/components/parameters/name__ne'
        - $ref: '#/components/parameters/name__in1'
        - $ref: '#/components/parameters/name__contains2'
        - $ref: '#/components/parameters/address.streetAddress'
        - $ref: '#/components/parameters/address.streetAddress__ne'
        - $ref: '#/components/parameters/address.streetAddress__in'
        - $ref: '#/components/parameters/address.streetAddress__contains'
        - $ref: '#/components/parameters/address.streetAddress2'
        - $ref: '#/components/parameters/address.streetAddress2__ne'
        - $ref: '#/components/parameters/address.streetAddress2__in'
        - $ref: '#/components/parameters/address.streetAddress2__contains'
        - $ref: '#/components/parameters/address.city'
        - $ref: '#/components/parameters/address.city__ne'
        - $ref: '#/components/parameters/address.city__in'
        - $ref: '#/components/parameters/address.city__contains'
        - $ref: '#/components/parameters/address.region'
        - $ref: '#/components/parameters/address.region__ne'
        - $ref: '#/components/parameters/address.region__in'
        - $ref: '#/components/parameters/address.region__contains'
        - $ref: '#/components/parameters/address.country'
        - $ref: '#/components/parameters/address.country__ne'
        - $ref: '#/components/parameters/address.country__in'
        - $ref: '#/components/parameters/address.country__contains'
        - $ref: '#/components/parameters/address.postalCode'
        - $ref: '#/components/parameters/address.postalCode__ne'
        - $ref: '#/components/parameters/address.postalCode__in'
        - $ref: '#/components/parameters/address.postalCode__contains'
        - $ref: '#/components/parameters/childLocationCount'
        - $ref: '#/components/parameters/childLocationCount__ne'
        - $ref: '#/components/parameters/q1'
        - $ref: '#/components/parameters/qRelevance__gte1'
      responses:
        '200':
          description: Successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLocationResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internalServerError'
    post:
      operationId: createLocation
      description: >
        This endpoint allows you to create a new location. Support for
        Location-based camera grouping is only available in the professional and
        enterprise editions.
      tags:
        - Locations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationCreate'
      responses:
        '201':
          description: Location created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicLocationResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/locations/{id}':
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: getLocation
      description: >
        This endpoint allows retrieval of the location with a specific ID.
        Support for Location-based camera grouping is only available in the
        professional and enterprise editions.
      tags:
        - Locations
      parameters:
        - $ref: '#/components/parameters/includeForSingle1'
      responses:
        '200':
          description: Successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationGet'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      operationId: updateLocation
      description: >
        This endpoint allows you to update the location with the given ID.
        Support for Location-based camera grouping is only available in the
        professional and enterprise editions.
      tags:
        - Locations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        '204':
          description: Location updated
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    delete:
      operationId: deleteLocation
      description: >
        This endpoint allows you to delete the location with the given ID.
        Support for Location-based camera grouping is only available in the
        professional and enterprise editions.
      tags:
        - Locations
      responses:
        '204':
          description: Location deleted
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/locations/{id}/locations':
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: getLocationDescendants
      description: >
        This endpoint allows you to retrieve the (grand) children of the
        location with the given ID. Support for Location-based camera grouping
        is only available in the professional and enterprise editions.
      tags:
        - Locations
      parameters:
        - $ref: '#/components/parameters/includeForSingle1'
        - $ref: '#/components/parameters/sortDescendants'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/parentId'
        - $ref: '#/components/parameters/parentId__ne'
        - $ref: '#/components/parameters/parentId__in'
        - $ref: '#/components/parameters/name1'
        - $ref: '#/components/parameters/name__ne'
        - $ref: '#/components/parameters/name__in1'
        - $ref: '#/components/parameters/name__contains2'
        - $ref: '#/components/parameters/address.streetAddress'
        - $ref: '#/components/parameters/address.streetAddress__ne'
        - $ref: '#/components/parameters/address.streetAddress__in'
        - $ref: '#/components/parameters/address.streetAddress__contains'
        - $ref: '#/components/parameters/address.streetAddress2'
        - $ref: '#/components/parameters/address.streetAddress2__ne'
        - $ref: '#/components/parameters/address.streetAddress2__in'
        - $ref: '#/components/parameters/address.streetAddress2__contains'
        - $ref: '#/components/parameters/address.city'
        - $ref: '#/components/parameters/address.city__ne'
        - $ref: '#/components/parameters/address.city__in'
        - $ref: '#/components/parameters/address.city__contains'
        - $ref: '#/components/parameters/address.region'
        - $ref: '#/components/parameters/address.region__ne'
        - $ref: '#/components/parameters/address.region__in'
        - $ref: '#/components/parameters/address.region__contains'
        - $ref: '#/components/parameters/address.country'
        - $ref: '#/components/parameters/address.country__ne'
        - $ref: '#/components/parameters/address.country__in'
        - $ref: '#/components/parameters/address.country__contains'
        - $ref: '#/components/parameters/address.postalCode'
        - $ref: '#/components/parameters/address.postalCode__ne'
        - $ref: '#/components/parameters/address.postalCode__in'
        - $ref: '#/components/parameters/address.postalCode__contains'
        - $ref: '#/components/parameters/childLocationCount'
        - $ref: '#/components/parameters/childLocationCount__ne'
      responses:
        '200':
          description: Successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLocationDescendantsResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/locations/{locationId}/floors':
    parameters:
      - $ref: '#/components/parameters/locationId'
    get:
      operationId: getLocationFloors
      description: >
        This endpoint allows you to retrieve the floors at the given location.
        Support for Location-based camera grouping is only available in the
        professional and enterprise editions.

        It is important to note that after using the pageSize parameter, the
        "totalSize" in the response represents the total number of available
        floors, not the number of floors resulting from the query string.
      tags:
        - Floors
      parameters:
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/getFloorInclude'
      responses:
        '200':
          description: Successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExtendedFloorResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internalServerError'
    post:
      operationId: createFloor
      description: >
        This endpoint allows you to create a floor. Support for Location-based
        camera grouping is only available in the professional and enterprise
        editions.
      tags:
        - Floors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FloorCreatePayload'
      responses:
        '201':
          description: Floor created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicFloorResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/locations/{locationId}/floors/{id}':
    parameters:
      - $ref: '#/components/parameters/locationId'
      - $ref: '#/components/parameters/floorId'
    get:
      operationId: getFloor
      description: >
        This endpoint allows you to retrieve a specific floor at a specific
        location. Support for Location-based camera grouping is only available
        in the professional and enterprise editions.
      parameters:
        - $ref: '#/components/parameters/getFloorInclude'
      tags:
        - Floors
      responses:
        '200':
          description: Successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FloorGetResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      description: >
        Updates one or more fields of the given floor. This has no effect on the
        cameras on that floor. Support for Location-based camera grouping is
        only available in the professional and enterprise editions.
      operationId: updateFloor
      tags:
        - Floors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtendedFloor'
      responses:
        '204':
          description: Floor updated
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    delete:
      description: >
        This endpoint allows you to delete a specific floor of a specific
        location. Support for Location-based camera grouping is only available
        in the professional and enterprise editions.
      operationId: deleteFloor
      tags:
        - Floors
      responses:
        '204':
          description: Floor deleted
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/locations/{locationId}/floors/{id}.{type}':
    parameters:
      - $ref: '#/components/parameters/locationId'
      - $ref: '#/components/parameters/floorId'
      - $ref: '#/components/parameters/type'
    get:
      operationId: getFloorImage
      description: >
        This endpoint allows you to retrieve the floor image of a specific
        floor. Please first check the floorPlans field in GET
        /locations/{locationId}/floors or GET
        /locations/{locationId}/floors/{id} to see if a file with this format
        exists. Support for Location-based camera grouping is only available in
        the professional and enterprise editions.
      tags:
        - Floors
      responses:
        '200':
          description: Successfully fetched
          content:
            image/png:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/locations/{locationId}/floors/{id}/plans':
    parameters:
      - $ref: '#/components/parameters/locationId'
      - $ref: '#/components/parameters/floorId'
    get:
      operationId: getFloorPlans
      description: >
        This endpoint allows you to retrieve plans of a specific floor at a
        specific location. Support for Location-based camera grouping is only
        available in the professional and enterprise editions.
      parameters:
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/pageSize'
      tags:
        - Floor Plans
      responses:
        '200':
          description: Successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFloorPlansResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internalServerError'
    post:
      operationId: setFloorPlan
      description: >
        This endpoint allows you to create a floor plan for a specific floor at
        a specific location. Currently only one floor plan file is supported per
        floor, which means that uploading a new file will overwrite any existing
        file, even if it has a different format (svg vs png). Support for
        Location-based camera grouping is only available in the professional and
        enterprise editions.
      tags:
        - Floor Plans
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                data:
                  type: string
                  format: binary
      responses:
        '201':
          description: Successfully set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FloorPlanGetResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/locations/{locationId}/floors/{id}/plans/{planId}':
    parameters:
      - $ref: '#/components/parameters/locationId'
      - $ref: '#/components/parameters/floorId'
      - $ref: '#/components/parameters/planId'
    delete:
      description: >
        This endpoint allows you to delete a floor plan and its corresponding
        SVG or PNG file. Support for Location-based camera grouping is only
        available in the professional and enterprise editions.
      operationId: deleteFloorPlan
      tags:
        - Floor Plans
      responses:
        '204':
          description: Floor plan deleted
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    EffectiveLayoutPermissions:
      readOnly: true
      type: object
      x-jsoninclude-nonnull-annotation: true
      properties:
        delete:
          type: boolean
        read:
          type: boolean
        edit:
          type: boolean
    ApiLayoutUpdate:
      properties:
        panes:
          type: array
          items:
            $ref: '#/components/schemas/ApiPane'
        settings:
          $ref: '#/components/schemas/ApiLayoutSettingsUpdate'
        name:
          type: string
          description: Name of the layout.
          example: Main office floor 1
          minLength: 1
          maxLength: 126
    ApiLayoutCreate:
      allOf:
        - $ref: '#/components/schemas/ApiLayoutUpdate'
        - properties:
            settings:
              $ref: '#/components/schemas/ApiLayoutSettings'
      required:
        - name
        - settings
    ApiLayoutForList:
      allOf:
        - $ref: '#/components/schemas/ApiLayoutCreate'
      properties:
        id:
          type: string
          example: 123ab123-1233-11a1-ab01-1b123ab1234
          description: Unique layout identifier
        accountId:
          type: string
          description: Account ID specified in as an ESN Type.
          pattern: '^[a-fA-F0-9]{8}$'
          example: '00001106'
        effectivePermissions:
          $ref: '#/components/schemas/EffectiveLayoutPermissions'
        resourceCounts:
          $ref: '#/components/schemas/ResourceCounts'
        resourceStatusCounts:
          $ref: '#/components/schemas/ResourceStatusCounts'
        panes:
          type: array
          items:
            $ref: '#/components/schemas/ApiPaneGet'
        qRelevance:
          type: number
          description: >
            Field is only returned when `q` parameter is used and its value
            indicates the relevance of the layout in relation to the terms in
            the `q` parameter. The range of this value is between 0 and 1,
            higher is better.
          format: float
          minimum: 0
          maximum: 1
          example: 0.5
          readOnly: true
      required:
        - id
        - panes
        - accountId
    ApiLayoutForSingle:
      allOf:
        - $ref: '#/components/schemas/ApiLayoutCreate'
      properties:
        id:
          type: string
          example: 123ab123-1233-11a1-ab01-1b123ab1234
          description: Unique layout identifier
        accountId:
          type: string
          description: Account ID specified in as an ESN Type.
          pattern: '^[a-fA-F0-9]{8}$'
          example: '00001106'
        effectivePermissions:
          $ref: '#/components/schemas/EffectiveLayoutPermissions'
        resourceCounts:
          $ref: '#/components/schemas/ResourceCounts'
        resourceStatusCounts:
          $ref: '#/components/schemas/ResourceStatusCounts'
        panes:
          type: array
          items:
            $ref: '#/components/schemas/ApiPaneGet'
      required:
        - id
        - panes
        - accountId
    ApiPane:
      properties:
        id:
          type: integer
          example: 1
          description: >-
            Unique identifier of pane in layout assigned to each pane. This
            determines the location indexing of panes in layout.
          minimum: 0
        name:
          type: string
          example: front door
          description: Name of the pane in layout
          maxLength: 126
        type:
          type: string
          example: preview
          enum:
            - preview
            - compositePreview
          description: >
            Possible values:

            * `preview` - show the view for a single camera using "preview"
            images which are lower resolution and lower frequency than the real
            stream. * `compositePreview` - show the composite of a de-warped
            camera view.
        size:
          type: integer
          example: 1
          description: Size of displayed image in pane. Size 1 shows the smallest size
          minimum: 1
          maximum: 3
        cameraId:
          type: string
          example: 1003b545
          description: Unique identifier of the camera.
        compositeId:
          nullable: true
          type: string
          description: Unique identifier of the composite of a de-warped camera view.
      required:
        - id
        - name
        - type
        - size
        - cameraId
    ApiPaneGet:
      allOf:
        - $ref: '#/components/schemas/ApiPane'
      required:
        - id
        - name
        - type
        - size
        - cameraId
        - compositeId
    ApiLayoutSettingsUpdate:
      description: Object identifying the layout settings
      properties:
        showCameraBorder:
          type: boolean
          example: true
          description: 'This flag if enabled, shows pane borders.'
        showCameraName:
          type: boolean
          example: true
          description: 'This flag if enabled, shows camera name'
        cameraAspectRatio:
          type: string
          description: Aspect ratio of image
          example: 16x9
          enum:
            - 16x9
            - 4x3
        paneColumns:
          type: integer
          minimum: 1
          maximum: 6
          description: Max number of cameras to show per row
    ApiLayoutSettings:
      allOf:
        - $ref: '#/components/schemas/ApiLayoutSettingsUpdate'
        - required:
            - showCameraBorder
            - showCameraName
            - cameraAspectRatio
            - paneColumns
    ApiPaginatedLayoutResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponseWithSize'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/ApiLayoutForList'
    ResourceCounts:
      description: Count of resources.
      type: object
      readOnly: true
      x-jsoninclude-nonnull-annotation: true
      properties:
        cameras:
          type: integer
          minimum: 0
          example: 23
    ResourceStatusCounts:
      description: Count of resources by status.
      type: object
      readOnly: true
      x-jsoninclude-nonnull-annotation: true
      properties:
        cameras:
          $ref: '#/components/schemas/CameraStatusCounts'
    PaginatedResponseWithSize:
      description: >
        Used to wrap results for a paginated response, containing information on
        how to retrieve further pages and  the total number of results.  
      allOf:
        - $ref: '#/components/schemas/PaginatedResponseNoTotalSize'
        - properties:
            totalSize:
              type: integer
              readOnly: true
              description: |
                Size of the total result set.
          required:
            - totalSize
    PaginatedResponseNoTotalSize:
      type: object
      description: >
        Used to wrap results for a paginated response, containing information on
        how to retrieve further pages.
      properties:
        nextPageToken:
          type: string
          readOnly: true
          nullable: true
          description: >
            Token to retrieve the next page. The value of this token is passed
            into the field pageToken.  This value can be null if there is no
            next page.
        prevPageToken:
          type: string
          readOnly: true
          nullable: true
          description: >
            Token to retrieve the previous page. The value of this token is
            passed into the field pageToken.  This value can be null of there is
            no previous page.
        results:
          type: array
          readOnly: true
          description: The result set from a collection API call.
          items:
            type: object
      required:
        - nextPageToken
        - prevPageToken
        - results
    ApiV3Error:
      type: object
      properties:
        code:
          description: HTTP code defined in EEN Standard Code Values
          type: integer
        status:
          description: A string enum describing the code
          type: string
          enum:
            - cancelled
            - unknown
            - invalidArgument
            - deadlineExceeded
            - notFound
            - conflict
            - permissionDenied
            - resourceExhausted
            - failedPrecondition
            - aborted
            - outOfRange
            - unimplemented
            - internal
            - unavailable
            - dataLoss
            - unauthenticated
            - mediaTypeNotSupported
            - acceptNotSupported
            - methodNotSupported
            - tooManyRequests
        message:
          description: Developer friendly human readable error message in English
          type: string
        details:
          description: An array of extensible objects that define error information
          type: array
          items:
            $ref: '#/components/schemas/ExceptionDetail'
      required:
        - code
        - status
        - message
        - details
    ExceptionDetail:
      type: object
      oneOf:
        - $ref: '#/components/schemas/ErrorInfoExceptionDetail'
        - $ref: '#/components/schemas/BadRequestExceptionDetail'
        - $ref: '#/components/schemas/ResourceInfoExceptionDetail'
      discriminator:
        propertyName: type
        mapping:
          errorInfo: '#/components/schemas/ErrorInfoExceptionDetail'
          badRequest: '#/components/schemas/BadRequestExceptionDetail'
          resourceInfo: '#/components/schemas/ResourceInfoExceptionDetail'
      properties:
        type:
          description: A string enum describing the type of detail object.
          type: string
          enum:
            - errorInfo
            - badRequest
            - resourceInfo
      required:
        - type
    ErrorInfoExceptionDetail:
      properties:
        type:
          description: A string enum describing the type of detail object.
          type: string
          enum:
            - errorInfo
        reason:
          description: >
            The reason for the error. This is a constant value that identifies
            the proximate cause of the

            error. Error reasons are unique within a particular domain of
            errors.
          type: string
          enum:
            - unauthenticated
            - unexpectedArgument
            - missingRequiredArgument
            - wrongArgumentValue
            - invalidPermission
            - wrongEdition
            - wrongAccountType
            - resourceNotFound
            - endpointNotFound
            - methodNotSupported
            - unexpectedError
            - acceptNotSupported
            - alreadyExists
            - foreignKeyConflict
            - childDevicesExist
            - contentNotSupported
            - deadlineExpired
            - tooManyRequests
            - deviceUnavailable
            - serviceUnavailable
            - invalidJSON
            - resourceLocked
            - notSupportedOnBridge
            - outOfRetention
            - deviceIdentificationFailed
            - credentialValidationFailed
            - credentialSetupFailed
            - localUrlValidationFailed
            - hwRegistrationFailed
            - failedAddingCameraAfterValidation
            - neverConnected
            - reconnectFailed
            - unsupportedModel
            - purged
            - userBlocked
            - userTemporarilyBlocked
            - quotaExceeded
        domain:
          description: |
            Logical grouping to which the "reason" belongs
          type: string
        metadata:
          $ref: '#/components/schemas/ExceptionMetadata'
    BadRequestExceptionDetail:
      properties:
        type:
          description: A string enum describing the type of detail object.
          type: string
          enum:
            - badRequest
        argumentViolations:
          type: array
          items:
            $ref: '#/components/schemas/ArgumentViolation'
    ArgumentViolation:
      properties:
        argumentName:
          type: string
          description: Name of the argument
        description:
          type: string
          description: Description of the violation
    ResourceInfoExceptionDetail:
      properties:
        type:
          description: A string enum describing the type of detail object.
          type: string
          enum:
            - resourceInfo
        resource:
          description: 'Referenced resource type, eg "cameras", "bridges", or "locations".'
          type: string
        ids:
          type: array
          description: Identities of resources
          items:
            type: string
    ExceptionMetadata:
      properties:
        path:
          description: Path of the request
          type: string
        method:
          description: Method of the request
          type: string
    CameraStatusCounts:
      type: object
      properties:
        online:
          type: integer
        deviceOffline:
          type: integer
        'off':
          type: integer
        bridgeOffline:
          type: integer
        invalidCredentials:
          type: integer
        error:
          type: integer
        unknown:
          type: integer
    BridgeStatusCounts:
      type: object
      properties:
        online:
          type: integer
        deviceOffline:
          type: integer
        unknown:
          type: integer
    UserStatusCounts:
      type: object
      properties:
        active:
          type: integer
        blocked:
          type: integer
        pending:
          type: integer
    TagsList:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponseWithSize'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/TagGetResponse'
    TagGetResponse:
      properties:
        name:
          type: string
          example: string
    id:
      type: string
      description: Unique identifier of the resource
      example: 123e4567-e89b-12d3-a456-426614174000
      readOnly: true
    LocationAddress:
      allOf:
        - type: object
          properties:
            country:
              type: string
              example: USA
              default: ''
              minLength: 0
              maxLength: 128
            region:
              type: string
              example: Texas
              default: ''
              minLength: 0
              maxLength: 128
            city:
              type: string
              example: Austin
              default: ''
              minLength: 0
              maxLength: 128
            streetAddress:
              type: string
              example: 4611 Bee Caves Rd
              minLength: 0
              maxLength: 128
            streetAddress2:
              type: string
              example: SUITE 102
              default: ''
              minLength: 0
              maxLength: 128
            postalCode:
              type: string
              example: '78746'
              default: ''
              minLength: 0
              maxLength: 128
    BasicLocation:
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: string
          example: CF2 - Austin Office
          minLength: 1
          maxLength: 126
        parentId:
          allOf:
            - $ref: '#/components/schemas/id'
            - description: >-
                Unique identifier of this location's parent location in the
                hierarchy
              default: null
              readOnly: false
        isDefault:
          type: boolean
          description: >
            Specifies if a new device should be automatically assigned to this
            location if not supplied
          default: false
    Location:
      allOf:
        - $ref: '#/components/schemas/BasicLocation'
      properties:
        address:
          $ref: '#/components/schemas/LocationAddress'
        notes:
          type: string
          description: Description for the location
          default: ''
          minLength: 0
          maxLength: 128
        geometry:
          type: object
          description: >
            GeoJSON structure to store polygon for the specific location.

            Currently the only supported geometry type is MultiPolygon, but in
            the future more GeoJSON schemas might be supported, so clients
            should be able to handle unknown schemas.


            This field must be in the standard GeoJSON format, as described in
            https://datatracker.ietf.org/doc/html/rfc7946


            Please read https://datatracker.ietf.org/doc/html/rfc7946 for more
            information about the GeoJSON standard.
          default: null
          nullable: true
          example:
            type: MultiPolygon
            coordinates:
              -   -   -   - 40
                          - 40
                      -   - 20
                          - 45
                      -   - 45
                          - 30
                      -   - 40
                          - 40
              -   -   -   - 20
                          - 35
                      -   - 10
                          - 30
                      -   - 10
                          - 10
                      -   - 30
                          - 5
                      -   - 45
                          - 20
                      -   - 20
                          - 35
                  -   -   - 30
                          - 20
                      -   - 20
                          - 15
                      -   - 20
                          - 25
                      -   - 30
                          - 20
            bbox:
              - -10
              - -10
              - 10
              - 10
          required:
            - type
            - coordinates
          properties:
            type:
              type: string
              enum:
                - MultiPolygon
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: array
                  minItems: 4
                  items:
                    type: array
                    minItems: 2
                    items:
                      type: number
            bbox:
              type: array
              minItems: 4
              items:
                type: number
        childLocationCount:
          readOnly: true
          type: integer
          description: The total count of direct children of the location
        effectivePermissions:
          $ref: '#/components/schemas/EffectiveLocationPermissions'
        resourceCounts:
          $ref: '#/components/schemas/ResourceCounts1'
        resourceStatusCounts:
          $ref: '#/components/schemas/ResourceStatusCounts1'
    FullTextSearchRelated:
      properties:
        qRelevance:
          type: number
          description: >
            Field is only returned when `q` parameter is used and its value
            indicates the relevance of the location in relation to the terms in
            the `q` parameter. The range of this value is between 0 and 1,
            higher is better.
          format: float
          minimum: 0
          maximum: 1
          example: 0.5
          readOnly: true
    ResourceStatusCounts1:
      description: Count of resources by status.
      type: object
      readOnly: true
      properties:
        cameras:
          $ref: '#/components/schemas/CameraStatusCounts'
        bridges:
          $ref: '#/components/schemas/BridgeStatusCounts'
        users:
          $ref: '#/components/schemas/UserStatusCounts'
        multiCameras:
          $ref: '#/components/schemas/CameraStatusCounts'
    EffectiveLocationPermissions:
      readOnly: true
      type: object
      properties:
        read:
          type: boolean
        delete:
          type: boolean
        edit:
          type: boolean
    BasicLocationResponse:
      allOf:
        - $ref: '#/components/schemas/BasicLocation'
      required:
        - id
        - name
        - isDefault
        - parentId
    LocationGet:
      allOf:
        - $ref: '#/components/schemas/Location'
      required:
        - id
        - name
        - isDefault
        - parentId
    LocationCreate:
      allOf:
        - $ref: '#/components/schemas/Location'
        - type: object
          required:
            - name
    PaginatedLocationResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponseWithSize'
        - type: object
          properties:
            results:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/LocationGet'
                  - $ref: '#/components/schemas/FullTextSearchRelated'
    PaginatedLocationDescendantsResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponseWithSize'
        - type: object
          properties:
            results:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/LocationGet'
    PointPosition:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          description: The latitude of the device. (WGS 84)
          type: number
          format: double
          minimum: -90
          maximum: 90
          example: 52.3074013
        longitude:
          description: The longitude of the device. (WGS 84).
          type: number
          format: double
          minimum: -180
          maximum: 180
          example: 4.9459903
    BasicFloor:
      type: object
      description: Represents a floor of a location
      properties:
        id:
          type: string
          description: Unique identifier of the floor
          readOnly: true
        name:
          type: string
          example: Lobby Area - Floor 1
          default: ''
          minLength: 0
          maxLength: 126
        floorLevel:
          type: integer
          description: The floor level in a multi-storey building
          example: 1
          minimum: -30
          maximum: 300
        topLeftCoordinates:
          type: object
          allOf:
            - $ref: '#/components/schemas/PointPosition'
        bottomRightCoordinates:
          type: object
          allOf:
            - $ref: '#/components/schemas/PointPosition'
    ExtendedFloor:
      allOf:
        - $ref: '#/components/schemas/BasicFloor'
      properties:
        floorPlans:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/FloorPlanGetResponse'
    BasicFloorResponse:
      allOf:
        - $ref: '#/components/schemas/BasicFloor'
        - required:
            - id
            - name
            - floorLevel
            - topLeftCoordinates
            - bottomRightCoordinates
    FloorGetResponse:
      allOf:
        - $ref: '#/components/schemas/ExtendedFloor'
        - required:
            - id
            - name
            - floorLevel
            - topLeftCoordinates
            - bottomRightCoordinates
    FloorCreatePayload:
      allOf:
        - $ref: '#/components/schemas/ExtendedFloor'
        - required:
            - name
            - floorLevel
            - topLeftCoordinates
            - bottomRightCoordinates
    PaginatedExtendedFloorResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponseWithSize'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/FloorGetResponse'
    FloorPlan:
      type: object
      description: Represents a floor plan file
      properties:
        id:
          type: string
          description: Unique identifier of the floor plan
          readOnly: true
        floorId:
          type: string
          description: Unique identifier of the floor
          readOnly: true
        type:
          type: string
          description: Type of the floor image
          readOnly: true
          enum:
            - png
            - svg
            - pdf
        creator:
          type: string
          enum:
            - originalUpload
            - cloudGenerated
          readOnly: true
    FloorPlanGetResponse:
      allOf:
        - $ref: '#/components/schemas/FloorPlan'
      required:
        - id
        - floorId
        - type
        - creator
    PaginatedFloorPlansResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponseWithSize'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/FloorPlanGetResponse'
    ResourceCounts1:
      description: Count of resources.
      type: object
      readOnly: true
      properties:
        cameras:
          type: integer
          minimum: 0
          example: 23
        bridges:
          type: integer
          minimum: 0
          example: 2
        speakers:
          type: integer
          minimum: 0
          example: 1
        users:
          type: integer
          minimum: 0
          example: 12
        multiCameras:
          type: integer
          minimum: 0
          example: 3
  parameters:
    layoutId:
      name: layoutId
      in: path
      required: true
      schema:
        type: string
        example: 123ab123-1233-11a1-ab01-1b123ab1234
        description: Unique layout identifier
    id__in:
      in: query
      name: id__in
      description: >-
        Filter to get the layouts whose id is on the provided list. The lookup
        is exact and case insensitive.
      schema:
        type: array
        items:
          type: string
      style: form
      explode: false
    name:
      in: query
      name: name
      description: >-
        Filter to get the layouts with the specified name. The lookup is exact
        and case insensitive.
      schema:
        type: string
    name__in:
      in: query
      name: name__in
      description: >-
        Filter to get the layouts whose name is on the provided list. The lookup
        is exact and case insensitive.
      schema:
        type: array
        items:
          type: string
      style: form
      explode: false
    name__contains:
      in: query
      name: name__contains
      description: >
        Filter to get the layouts whose the name contains the provided
        substring. The lookup is exact and case insensitive.
      schema:
        type: string
    bridge:
      in: query
      name: layoutPanes.cameras.bridgeId
      description: |
        Filter to get the layouts that contain cameras of given bridge id.
      schema:
        type: string
    includeForList:
      in: query
      name: include
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - effectivePermissions
            - resourceCounts
            - resourceStatusCounts
            - qRelevance
    includeForSingle:
      in: query
      name: include
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - effectivePermissions
            - resourceCounts
            - resourceStatusCounts
    q:
      in: query
      name: q
      description: >
        Text search that is applied to multiple fields. The fields being
        searched are defined by the backend and can be changed without warning.
        Example fields being searched: `name`, `id`, `accountId`.
      schema:
        type: string
        example: entrance
    qRelevance__gte:
      in: query
      name: qRelevance__gte
      description: >
        Sets the current minimum similarity threshold that is used with the `q`
        parameter. The threshold must be between 0 and 1 (float, default is
        0.5).
      schema:
        type: number
        format: float
        minimum: 0
        maximum: 1
        example: 0.5
        default: 0.5
    sort:
      in: query
      name: sort
      description: |
        Comma separated list of of fields that should be sorted.
         * `sort=` - not providing any value will result in error 400
         * `sort=+name,+name` - same values will result in error 400
         * `sort=-name,+name` - mutially exclusive values will return error 400
         * maxItem=3 - Only Three values will be accepted, more will return error 400
         * qRelevance is optional ordering parameter which is available if q filter is used, if q filter is not passed qRelevance as ordering parameter will return error 400
         * rotationOrder is ordering elements according to the user's list of Layout ids as configured in the user configuration parameter layoutSettings.rotationOrder. Layouts which are not in the list are ordered based on lower priority ordering params if specified, or by the default ordering if not specified.
      schema:
        type: array
        default:
          - +name
        items:
          type: string
          maxItems: 3
          enum:
            - '-name'
            - '-qRelevance'
            - +name
            - +rotationOrder
            - +qRelevance
      example:
        - +name
        - '-qRelevance'
      style: form
      explode: false
    pageToken:
      in: query
      name: pageToken
      description: >
        Token string value that references a page for pagination. This value is
        received when retrieving the first page in the `nextPageToken` and
        `prevPageToken` fields.
      example: b2Zmc2V0PTEwJmxpbWl0PTEw
      required: false
      schema:
        type: string
    pageSize:
      in: query
      name: pageSize
      description: >
        The number of entries to return per page. The maximum range of valid
        page sizes is documented with minimum and  maximum values, but the range
        might be further limited dynamically based on the requested information,
        account, and system status. Values outside of the (dynamic) allowed
        range will not result in an error, but will be clamped to the nearest
        limit. Thus, logic to detect the last page should not be based on
        comparing the requested size with the received size, but on the
        existence of a `nextPageToken` value.
      example: 100
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 500
        default: 100
    sort1:
      in: query
      name: sort
      description: List of fields that should be sorted
      schema:
        type: array
        items:
          type: string
          enum:
            - '-name'
            - +name
        default:
          - +name
      style: form
      explode: false
    name__contains1:
      in: query
      name: name__contains
      description: >-
        Filter to get Tags whose the name contains the provided substring. The
        lookup is exact and case insensitive
      schema:
        type: string
        minLength: 3
      style: form
      explode: false
    id:
      in: path
      required: true
      name: id
      description: Location ID
      schema:
        type: string
    locationId:
      in: path
      required: true
      name: locationId
      description: Location ID
      schema:
        type: string
    floorId:
      in: path
      required: true
      name: id
      description: Floor ID
      schema:
        type: string
    planId:
      in: path
      required: true
      name: planId
      description: Plan ID
      schema:
        type: string
    type:
      in: path
      required: true
      name: type
      description: Type of the floor image
      schema:
        type: string
        enum:
          - svg
          - png
    includeForList1:
      in: query
      name: include
      description: List of properties that should be included in the response
      schema:
        type: array
        items:
          type: string
          enum:
            - notes
            - address
            - geometry
            - childLocationCount
            - effectivePermissions
            - resourceCounts
            - resourceStatusCounts
            - qRelevance
      style: form
      explode: false
    includeForSingle1:
      in: query
      name: include
      description: List of properties that should be included in the response
      schema:
        type: array
        items:
          type: string
          enum:
            - notes
            - address
            - geometry
            - childLocationCount
            - effectivePermissions
            - resourceCounts
            - resourceStatusCounts
      style: form
      explode: false
    getFloorInclude:
      in: query
      name: include
      description: List of properties that should be included in the response
      schema:
        type: array
        items:
          type: string
          enum:
            - floorPlans
      style: form
      explode: false
    sort2:
      in: query
      name: sort
      description: |
        Comma separated list of of fields that should be sorted.
         * `sort=` - not providing any value will result in error 400
         * `sort=+name,+name` - same values will result in error 400
         * `sort=-name,+name` - mutially exclusive values will return error 400
         * maxItem=8 - Only eight values will be accepted, more will return error 400
         * qRelevance is optional ordering parameter which is available if q filter is used, if q filter is not passed qRelevance as ordering parameter will return error 400
      schema:
        type: array
        default:
          - +name
        items:
          type: string
          maxItems: 8
          enum:
            - '-name'
            - '-address.streetAddress'
            - '-address.streetAddress2'
            - '-address.city'
            - '-address.region'
            - '-address.country'
            - '-address.postalCode'
            - '-qRelevance'
            - +name
            - +address.streetAddress
            - +address.streetAddress2
            - +address.city
            - +address.region
            - +address.country
            - +address.postalCode
            - +qRelevance
      example:
        - +name
        - '-qRelevance'
      style: form
      explode: false
    sortDescendants:
      in: query
      name: sort
      description: |
        Comma separated list of of fields that should be sorted.
         * `sort=` - not providing any value will result in error 400
         * `sort=+name,+name` - same values will result in error 400
         * `sort=-name,+name` - mutially exclusive values will return error 400
         * maxItem=8 - Only eight values will be accepted, more will return error 400
      schema:
        type: array
        default:
          - +name
        items:
          type: string
          maxItems: 8
          enum:
            - '-name'
            - '-address.streetAddress'
            - '-address.streetAddress2'
            - '-address.city'
            - '-address.region'
            - '-address.country'
            - '-address.postalCode'
            - +name
            - +address.streetAddress
            - +address.streetAddress2
            - +address.city
            - +address.region
            - +address.country
            - +address.postalCode
      example:
        - +name
      style: form
      explode: false
    parentId:
      in: query
      name: parentId
      description: >-
        Filter to get the locations with the specified parentId. parentId=null
        returns only the locations which do not have a parent location
      schema:
        allOf:
          - $ref: '#/components/schemas/id'
    parentId__in:
      in: query
      name: parentId__in
      description: >-
        Filter to get the locations whose parentId is on the provided list. The
        lookup is exact and case insensitive
      schema:
        type: array
        items:
          $ref: '#/components/schemas/id'
      style: form
      explode: false
    parentId__ne:
      in: query
      name: parentId__ne
      description: >-
        Filter to get the locations with the parentId that is not equal to the
        provided value. The lookup is exact and case insensitive
      schema:
        allOf:
          - $ref: '#/components/schemas/id'
    name1:
      in: query
      name: name
      description: >-
        Filter to get the locations with the specified name. The lookup is exact
        and case insensitive
      schema:
        type: string
    name__in1:
      in: query
      name: name__in
      description: >-
        Filter to get the locations whose name is on the provided list. The
        lookup is exact and case insensitive
      schema:
        type: array
        items:
          type: string
      style: form
      explode: false
    name__ne:
      in: query
      name: name__ne
      description: >-
        Filter to get the locations with the name that is not equal to the
        provided value. The lookup is exact and case insensitive
      schema:
        type: string
    name__contains2:
      in: query
      name: name__contains
      description: >
        Filter to get the locations whose the name contains the provided
        substring. The lookup is exact and case insensitive
      schema:
        type: string
    address.streetAddress:
      in: query
      name: address.streetAddress
      description: >-
        Filter to get the locations with the specified address.streetAddress.
        The lookup is exact and case insensitive
      schema:
        type: string
    address.streetAddress__in:
      in: query
      name: address.streetAddress__in
      description: >-
        Filter to get the locations whose address.streetAddress is on the
        provided list. The lookup is exact and case insensitive
      schema:
        type: array
        items:
          type: string
      style: form
      explode: false
    address.streetAddress__ne:
      in: query
      name: address.streetAddress__ne
      description: >-
        Filter to get the locations with an address.streetAddress that is not
        equal to the provided value. The lookup is exact and case insensitive
      schema:
        type: string
    address.streetAddress__contains:
      in: query
      name: address.streetAddress__contains
      description: >
        Filter to get the locations whose the address.streetAddress contains the
        provided substring. The lookup is exact and case insensitive
      schema:
        type: string
    address.streetAddress2:
      in: query
      name: address.streetAddress2
      description: >-
        Filter to get the locations with the specified address.streetAddress2.
        The lookup is exact and case insensitive
      schema:
        type: string
    address.streetAddress2__in:
      in: query
      name: address.streetAddress2__in
      description: >-
        Filter to get the locations whose address.streetAddress2 is on the
        provided list. The lookup is exact and case insensitive
      schema:
        type: array
        items:
          type: string
      style: form
      explode: false
    address.streetAddress2__ne:
      in: query
      name: address.streetAddress2__ne
      description: >-
        Filter to get the locations with an address.streetAddress2 that is not
        equal to the provided value. The lookup is exact and case insensitive
      schema:
        type: string
    address.streetAddress2__contains:
      in: query
      name: address.streetAddress2__contains
      description: >
        Filter to get the locations whose the address.streetAddress2 contains
        the provided substring. The lookup is exact and case insensitive
      schema:
        type: string
    address.city:
      in: query
      name: address.city
      description: >-
        Filter to get the locations with the specified address.city. The lookup
        is exact and case insensitive
      schema:
        type: string
    address.city__in:
      in: query
      name: address.city__in
      description: >-
        Filter to get the locations whose address.city is on the provided list.
        The lookup is exact and case insensitive
      schema:
        type: array
        items:
          type: string
      style: form
      explode: false
    address.city__ne:
      in: query
      name: address.city__ne
      description: >-
        Filter to get the locations with an address.city that is not equal to
        the provided value. The lookup is exact and case insensitive
      schema:
        type: string
    address.city__contains:
      in: query
      name: address.city__contains
      description: >
        Filter to get the locations whose the address.city contains the provided
        substring. The lookup is exact and case insensitive
      schema:
        type: string
    address.region:
      in: query
      name: address.region
      description: >-
        Filter to get the locations with the specified address.region. The
        lookup is exact and case insensitive
      schema:
        type: string
    address.region__in:
      in: query
      name: address.region__in
      description: >-
        Filter to get the locations whose address.region is on the provided
        list. The lookup is exact and case insensitive
      schema:
        type: array
        items:
          type: string
      style: form
      explode: false
    address.region__ne:
      in: query
      name: address.region__ne
      description: >-
        Filter to get the locations with an address.region that is not equal to
        the provided value. The lookup is exact and case insensitive
      schema:
        type: string
    address.region__contains:
      in: query
      name: address.region__contains
      description: >
        Filter to get the locations whose the address.region contains the
        provided substring. The lookup is exact and case insensitive
      schema:
        type: string
    address.country:
      in: query
      name: address.country
      description: >-
        Filter to get the locations with the specified address.country. The
        lookup is exact and case insensitive
      schema:
        type: string
    address.country__in:
      in: query
      name: address.country__in
      description: >-
        Filter to get the locations whose address.country is on the provided
        list. The lookup is exact and case insensitive
      schema:
        type: array
        items:
          type: string
      style: form
      explode: false
    address.country__ne:
      in: query
      name: address.country__ne
      description: >-
        Filter to get the locations with an address.country that is not equal to
        the provided value. The lookup is exact and case insensitive
      schema:
        type: string
    address.country__contains:
      in: query
      name: address.country__contains
      description: >
        Filter to get the locations whose the address.country contains the
        provided substring. The lookup is exact and case insensitive
      schema:
        type: string
    address.postalCode:
      in: query
      name: address.postalCode
      description: >-
        Filter to get the locations with the specified address.postalCode. The
        lookup is exact and case insensitive
      schema:
        type: string
    address.postalCode__in:
      in: query
      name: address.postalCode__in
      description: >-
        Filter to get the locations whose address.postalCode is on the provided
        list. The lookup is exact and case insensitive
      schema:
        type: array
        items:
          type: string
      style: form
      explode: false
    address.postalCode__ne:
      in: query
      name: address.postalCode__ne
      description: >-
        Filter to get the locations with an address.postalCode that is not equal
        to the provided value. The lookup is exact and case insensitive
      schema:
        type: string
    address.postalCode__contains:
      in: query
      name: address.postalCode__contains
      description: >
        Filter to get the locations whose the address.postalCode contains the
        provided substring. The lookup is exact and case insensitive
      schema:
        type: string
    childLocationCount:
      in: query
      name: childLocationCount
      description: Filter to get the locations with the specified number of direct children
      schema:
        type: integer
    childLocationCount__ne:
      in: query
      name: childLocationCount__ne
      description: >-
        Filter to get the locations with the number of direct children not equal
        to the provided value.
      schema:
        type: integer
    q1:
      in: query
      name: q
      description: >
        Text search that is applied to multiple fields. The fields being
        searched are defined by the backend and can be changed without warning.
        Example fields being searched: `name`, `id`, `notes`.
      schema:
        type: string
        example: entrance
    qRelevance__gte1:
      in: query
      name: qRelevance__gte
      description: >
        Sets the current minimum similarity threshold that is used with the `q`
        parameter. The threshold must be between 0 and 1 (float, default is
        0.5).
      schema:
        type: number
        format: float
        minimum: 0
        maximum: 1
        example: 0.5
  responses:
    validationError:
      description: >-
        The supplied object is invalid. Error detail will contain the validation
        error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiV3Error'
          examples:
            unexpectedArgument:
              value:
                code: 400
                status: invalidArgument
                message: 'Unexpected argument: name'
                details:
                  - type: errorInfo
                    reason: unexpectedArgument
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
            missingRequiredArgument:
              value:
                code: 400
                status: invalidArgument
                message: 'Missing required arguments: name, id'
                details:
                  - type: errorInfo
                    reason: missingRequiredArgument
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
            badRequestInvalidJSON:
              value:
                code: 400
                status: invalidArgument
                message: Invalid JSON
                details:
                  - type: errorInfo
                    reason: invalidJSON
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
            badRequestInvalidArgument:
              value:
                code: 400
                status: invalidArgument
                message: 'Invalid Argument: Argument name is too long'
                details:
                  - type: errorInfo
                    reason: wrongArgumentValue
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
                  - type: badRequest
                    argumentViolations:
                      - argumentName: name
                        description: Name is too long
    unauthorized:
      description: You are not authenticated. Please authenticate and try again.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiV3Error'
          example:
            code: 401
            status: unauthenticated
            message: The client caller does not have a valid authentication credential
            details:
              - type: errorInfo
                reason: unauthenticated
                domain: apiv3
                metadata:
                  path: /api/v3.0/<resource>
    forbidden:
      description: You have no permission to access the specified resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiV3Error'
          examples:
            invalidPermission:
              value:
                code: 403
                status: permissionDenied
                message: >-
                  The client caller does not have permission for the specified
                  operation
                details:
                  - type: errorInfo
                    reason: invalidPermission
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
            wrongEdition:
              value:
                code: 403
                status: permissionDenied
                message: This feature is not enabled for the account
                details:
                  - type: errorInfo
                    reason: wrongEdition
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/locations
            wrongAccountType:
              value:
                code: 403
                status: permissionDenied
                message: This feature is only available for end users
                details:
                  - type: errorInfo
                    reason: wrongAccountType
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/locations
    resourceNotFound:
      description: Referenced resource could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiV3Error'
          examples:
            endpointNotFound:
              value:
                code: 404
                status: notFound
                message: The API endpoint was not found
                details:
                  - type: errorInfo
                    reason: endpointNotFound
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
            resourceNotFound:
              value:
                code: 404
                status: notFound
                message: The resource was not found
                details:
                  - type: errorInfo
                    reason: resourceNotFound
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
                  - type: resourceInfo
                    resource: <resource>
                    ids:
                      - <ids>
    conflict:
      description: >-
        There was a conflict while trying to perform your request. See error
        details for more information.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiV3Error'
          examples:
            alreadyExists:
              value:
                code: 409
                status: conflict
                message: The resource already exists
                details:
                  - type: errorInfo
                    reason: alreadyExists
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
            foreignKeyConflict:
              value:
                code: 409
                status: conflict
                message: >-
                  The resource cannot be deleted as other resources link to it.
                  Please remove the links or delete the other resources first
                  before deleting this resource.
                details:
                  - type: errorInfo
                    reason: foreignKeyConflict
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
            childDevicesExist:
              value:
                code: 409
                status: conflict
                message: >-
                  This device can not be deleted before all attached cameras
                  have been deleted. Please delete all cameras and then delete
                  this device.
                details:
                  - type: errorInfo
                    reason: childDevicesExist
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
    internalServerError:
      description: Something went wrong in the server. Please try again.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiV3Error'
          example:
            code: 500
            status: internal
            message: An internal error has occurred. Please try again later.
            details:
              - type: errorInfo
                reason: unexpectedError
                domain: apiv3
                metadata:
                  path: /api/v3.0/<resource>
x-readme:
  explorer-enabled: true
