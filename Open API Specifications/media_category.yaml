---
openapi: 3.0.3
info:
  title: MEDIA
  version: 3.0.0
servers:
  - url: 'https://{BaseUrl}/api/v3.0'
    description: Eagle Eye Networks API Server
    variables:
      BaseUrl:
        default: api.cxxx.eagleeyenetworks.com
        description: >-
          HTTPS Base url to use for all API calls, retrieved from
          https://api.eagleeyenetworks.com/api/v3.0/clientSettings
security:
  - bearerAuth: []
tags:
  - name: Media
    description: Retrieve information about and manage recorded media.
  - name: Feeds
    description: Retrieve available live feeds.
  - name: Exports
    description: Retrieve and manage recording exports.
  - name: Jobs
    description: All core operations on jobs.
  - name: Files
    description: Operations about files.
    externalDocs:
      description: More information about files.
      url: 'https://developerv3.eagleeyenetworks.com/docs'
  - name: Downloads
    description: Operations about downloads.
    externalDocs:
      description: More information about downloads.
      url: 'https://developerv3.eagleeyenetworks.com/docs'
paths:
  /media:
    get:
      operationId: listMedia
      description: >
        This endpoint requests a list of intervals for which there are recordings for the given `type` 
        and `mediaType`. If no `endTimestamp__lte` (formatted according to ISO 8601) is given, then the 
        results until now are returned.


        Note: The ISO 8601 timestamp format is a standardized format for representing date and time 
        information. It uses the format `YYYY-MM-DDTHH:MM:SS.sss±hh:mm` where "T" is the separator 
        between the date and time portions.
      tags:
        - Media
      parameters:
        - $ref: '#/components/parameters/deviceId'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/mediaType'
        - $ref: '#/components/parameters/startTimestamp'
        - $ref: '#/components/parameters/endTimestamp'
        - $ref: '#/components/parameters/coalesce'
        - $ref: '#/components/parameters/include'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPaginatedMediaResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  /media/recordedImage.jpeg:
    get:
      operationId: getRecordedImage
      description: >
        This endpoint retrieves an image based on a specified timestamp. You can
        indicate whether the image must be captured exactly at that timestamp or
        allow a nearest match before or after. The timestamp must be submitted
        in ISO 8601 format.


        Each request must include one timestamp parameter and specify the
        desired image type — either `main` or `preview`. Alternatively, by
        submitting a `pageToken`, the next/previous image from the last image is
        returned. In this case, none of the other parameters are used.


        Be aware that the image type `main` is rate-limited, and should not be used in quick 
        succession. Additionally, it requires that a full-resolution recording is available 
        at the given timestamp. If no recording is available, a 404 `NOT FOUND` error will 
        be returned.


        If an overlay is requested in the `include` parameter, then at least one overlayId 
        must be provided as part of the `overlayId__in` parameter. The list of available 
        overlay ids can be retrieved using the GET
        [/media/recordedImage.jpeg:listFieldValues](ref:listrecordedimagefieldvalues) endpoint.
      tags:
        - Media
      x-een-accept-signed-url: true
      security:
        - signedUrlAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/deviceIdNotRequired'
        - $ref: '#/components/parameters/token'
        - $ref: '#/components/parameters/recordedType'
        - $ref: '#/components/parameters/timestampLess'
        - $ref: '#/components/parameters/timestampLessOrEqual'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/timestampGreaterOrEqual'
        - $ref: '#/components/parameters/timestampGreater'
        - $ref: '#/components/parameters/overlayIds'
        - $ref: '#/components/parameters/overlaysInclude'
      responses:
        '200':
          description: OK
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
          headers:
            X-Een-Timestamp:
              schema:
                type: string
              description: Timestamp of image
              required: true
            X-Een-NextToken:
              schema:
                type: string
              description: Token to fetch the next image
            X-Een-PrevToken:
              schema:
                type: string
              description: Token to fetch the previous image
            X-Een-OverlaySvg:
              $ref: '#/components/headers/OverlaySvgHeader'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/media/recordedImage.jpeg:listFieldValues':
    get:
      tags:
        - Media
      description: >-
        Retrieves the available values for each field. It is useful to know
        which filters to use when retrieving the recorded image.
      operationId: listRecordedImageFieldValues
      parameters:
        - $ref: '#/components/parameters/deviceId'
        - $ref: '#/components/parameters/recImagelistFieldValuesInclude'
      responses:
        '200':
          description: 'Success, lists field values.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordedImageFieldValues'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  /media/liveImage.jpeg:
    get:
      operationId: getLiveImage
      description: >
        This endpoint allows users to get a new image from the device. This call
        will wait until the image is available.
      tags:
        - Media
      parameters:
        - $ref: '#/components/parameters/deviceId'
        - $ref: '#/components/parameters/liveType'
      responses:
        '200':
          description: OK
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
          headers:
            X-Een-Timestamp:
              schema:
                type: string
              description: Timestamp of image
              required: true
            X-Een-PrevToken:
              schema:
                type: string
              description: Token to fetch the previous image
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
        '503':
          $ref: '#/components/responses/unavailable'
  /media/session:
    get:
      operationId: getMediaSession
      description: >
        Api to list the url to call to set the media session cookie. The call
        will also redirect to the same url.

        The media session cookie can be used to replace the bearer
        authentication for mp4 playback in web browsers.
      tags:
        - Media
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMediaSessionURL'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalServerError'
        '503':
          $ref: '#/components/responses/unavailable'
  /feeds:
    get:
      operationId: listFeeds
      description: >
        This endpoint allows developers to list and retrieve information about
        the feeds that are generated by a device.  

        It is important to note that after using the pageSize parameter, the
        "totalSize" in the response represents the  total number of available
        feeds, not the number of feeds resulting from the query string.
      tags:
        - Feeds
      parameters:
        - $ref: '#/components/parameters/deviceId1'
        - $ref: '#/components/parameters/deviceIdIn'
        - $ref: '#/components/parameters/type1'
        - $ref: '#/components/parameters/include1'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPaginatedFeedResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  /exports:
    post:
      operationId: createExportJob
      description: Creates and starts a new video export job
      tags:
        - Exports
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/BundleExportDetails'
                - $ref: '#/components/schemas/TimeLapseExportDetails'
                - $ref: '#/components/schemas/VideoExportDetails'
              discriminator:
                propertyName: type
                mapping:
                  bundle: '#/components/schemas/BundleExportDetails'
                  timeLapse: '#/components/schemas/TimeLapseExportDetails'
                  video: '#/components/schemas/VideoExportDetails'
            examples:
              bundle:
                summary: Bundle
                value:
                  deviceId: 10058b7a
                  type: bundle
                  period:
                    startTimestamp: '2022-11-07T16:14:52.048Z'
                    endTimestamp: '2022-11-07T19:00:00.000Z'
                  osd:
                    timeZone: Americas/Chicago
                  info:
                    name: sun_going_under_on_the_7th
                    directory: /exports
                    notes: Looks great!
                    tags:
                      - great
                      - sun
                  playbackMultiplier: 2
              timeLapse:
                summary: TimeLapse
                value:
                  deviceId: 10058b7a
                  type: timeLapse
                  period:
                    startTimestamp: '2022-11-07T16:14:52.048Z'
                    endTimestamp: '2022-11-07T19:00:00.000Z'
                  osd:
                    timeZone: Americas/Chicago
                  info:
                    name: sun_going_under_on_the_7th
                    directory: /exports
                    notes: Looks great!
                    tags:
                      - great
                      - sun
                  playbackMultiplier: 10
              video:
                summary: Video
                value:
                  deviceId: 10058b7a
                  type: video
                  period:
                    startTimestamp: '2022-11-07T16:14:52.048Z'
                    endTimestamp: '2022-11-07T19:00:00.000Z'
                  osd:
                    timeZone: Americas/Chicago
                  info:
                    name: sun_going_under_on_the_7th
                    directory: /exports
                    notes: Looks great!
                    tags:
                      - great
                      - sun
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiCreateExportResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/exports/{jobId}:copy':
    post:
      operationId: retryExport
      description: >
        Start the export again with minor changes of some of the original
        parameters, which are specified in the body of the api.

        Fields that are not given will be kept the same as the original job.

        Failed intervals are tried again, adding a suffix to the names of the
        generated mp4's to indicate they are created by a retry.
      tags:
        - Exports
      parameters:
        - $ref: '#/components/parameters/jobId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiCopyExportBody'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiCreateExportResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '415':
          $ref: '#/components/responses/unsupportedMediaType'
        '500':
          $ref: '#/components/responses/internalServerError'
  /jobs:
    get:
      operationId: listJobs
      description: >
        List Jobs.  Filtering by userId, type, state namespace, createTimestamp,
        updateTimestamp, expireTimestamp.
      parameters:
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/requiredUserId'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/namespace'
        - $ref: '#/components/parameters/createTimestamp__gte'
        - $ref: '#/components/parameters/createTimestamp__lte'
        - $ref: '#/components/parameters/updateTimestamp__gte'
        - $ref: '#/components/parameters/updateTimestamp__lte'
        - $ref: '#/components/parameters/expireTimestamp__gte'
        - $ref: '#/components/parameters/expireTimestamp__lte'
        - $ref: '#/components/parameters/state__in'
      tags:
        - Jobs
      responses:
        '200':
          description: List Jobs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedJobResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/jobs/{jobId}':
    parameters:
      - in: path
        name: jobId
        schema:
          type: string
          format: uuid
        required: true
    get:
      operationId: getJob
      description: Get a single Job
      tags:
        - Jobs
      responses:
        '200':
          description: Get a single Job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    delete:
      operationId: deleteJob
      description: |
        Deletes a Job regardless of state.
      tags:
        - Jobs
      responses:
        '204':
          description: Job deleted.
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  /files:
    get:
      tags:
        - Files
      description: Returns a list of archived items.
      operationId: getFiles
      parameters:
        - $ref: '#/components/parameters/sort1'
        - $ref: '#/components/parameters/mimeType'
        - $ref: '#/components/parameters/mimeType__contains'
        - $ref: '#/components/parameters/createTimestamp__lte1'
        - $ref: '#/components/parameters/createTimestamp__gte1'
        - $ref: '#/components/parameters/directory'
        - $ref: '#/components/parameters/directory__contains'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/name__contains'
        - $ref: '#/components/parameters/notes__contains'
        - $ref: '#/components/parameters/size__lte'
        - $ref: '#/components/parameters/size__gte'
        - $ref: '#/components/parameters/include3'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPaginatedFileResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    post:
      tags:
        - Files
      description: >-
        Add a new file to the archive. If the directory specified does not
        exist, it will automatically be created. To create a new empty
        directory, specify the desired name, parent directory and a mimeType of
        `application/directory`.
      operationId: addFile
      parameters:
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/directory'
        - $ref: '#/components/parameters/mimeType'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
          application/directory: {}
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiFileGet'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/files/{id}':
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      tags:
        - Files
      description: Gets details of a file based on its ID.
      operationId: getFile
      parameters:
        - $ref: '#/components/parameters/include3'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiFileGetWithIncludes'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      tags:
        - Files
      description: Modifies the details of an item.
      operationId: updateFile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiFileCreateWithIncludes'
      responses:
        '204':
          description: File Updated.
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/internalServerError'
    delete:
      tags:
        - Files
      description: Recycles an item by ID.
      operationId: deleteFile
      responses:
        '204':
          description: File moved to recycle bin.
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/files/{id}:download':
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      tags:
        - Files
      description: Download file or folder by ID.
      operationId: downloadFile
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              schema:
                type: string
                example: >-
                  attachment; filename="Video North Door 2022-08-03
                  23-04-50.mp4"
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  /deletedFiles:
    get:
      tags:
        - Files
      description: Returns a list of deleted files.
      operationId: getTrash
      parameters:
        - $ref: '#/components/parameters/sort1'
        - $ref: '#/components/parameters/mimeType'
        - $ref: '#/components/parameters/mimeType__contains'
        - $ref: '#/components/parameters/createTimestamp__lte1'
        - $ref: '#/components/parameters/createTimestamp__gte1'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/name__contains'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPaginatedFileResponseSlim'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/deletedFiles/{id}':
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      tags:
        - Files
      description: Get details of a recycled item.
      operationId: getTrashFile
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiFileGet'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/internalServerError'
    delete:
      tags:
        - Files
      description: Permanently delete an item by ID.
      operationId: deleteTrashFile
      responses:
        '204':
          description: File deleted.
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  /deletedFiles/all:
    delete:
      tags:
        - Files
      description: Permanently delete all files in the recycle bin.
      operationId: deleteAllTrashFiles
      responses:
        '204':
          description: Permanently delete all files in the recycle bin.
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/deletedFiles/{id}:restore':
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      tags:
        - Files
      description: Restore a recycled item by ID.
      operationId: restoreTrashFile
      responses:
        '201':
          description: File restored.
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  /downloads:
    description: List or create downloads.
    get:
      tags:
        - Downloads
      description: Returns a list of downloaded items.
      operationId: getDownloads
      parameters:
        - $ref: '#/components/parameters/sort2'
        - $ref: '#/components/parameters/mimeType1'
        - $ref: '#/components/parameters/mimeType__contains1'
        - $ref: '#/components/parameters/createTimestamp__lte2'
        - $ref: '#/components/parameters/createTimestamp__gte2'
        - $ref: '#/components/parameters/expireTimestamp__lte1'
        - $ref: '#/components/parameters/expireTimestamp__gte1'
        - $ref: '#/components/parameters/directory'
        - $ref: '#/components/parameters/directory__contains'
        - $ref: '#/components/parameters/name1'
        - $ref: '#/components/parameters/name__contains'
        - $ref: '#/components/parameters/notes__contains'
        - $ref: '#/components/parameters/size__lte'
        - $ref: '#/components/parameters/size__gte'
        - $ref: '#/components/parameters/tags'
        - $ref: '#/components/parameters/tags__any'
        - $ref: '#/components/parameters/tags__contains'
        - $ref: '#/components/parameters/include4'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPaginatedDownloadResponse'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/downloads/{id}':
    description: Read or update a download by ID.
    parameters:
      - $ref: '#/components/parameters/id1'
    get:
      tags:
        - Downloads
      description: Gets details of a download based on its ID.
      operationId: getDownload
      parameters:
        - $ref: '#/components/parameters/include4'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiDownloadDetailsWithIncludes'
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      tags:
        - Downloads
      description: Modifies the details of a download.
      operationId: updateDownload
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiDownloadDetailsWithIncludes'
      responses:
        '204':
          description: Download metadata updated.
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/internalServerError'
  '/downloads/{id}:download':
    description: Download a download by ID.
    parameters:
      - $ref: '#/components/parameters/id1'
    get:
      tags:
        - Downloads
      description: Save a download by ID.
      operationId: downloadDownload
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              schema:
                type: string
                example: >-
                  attachment; filename="Video North Door 2022-08-03
                  23-04-50.mp4"
        '400':
          $ref: '#/components/responses/validationError'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/resourceNotFound'
        '500':
          $ref: '#/components/responses/internalServerError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ApiPaginatedMediaResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponseNoTotalSize'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/ApiMediaWithIncludes'
    ApiMediaWithIncludes:
      allOf:
        - $ref: '#/components/schemas/ApiMediaMain'
        - $ref: '#/components/schemas/ApiMediaIncludes'
        - type: object
    ApiMediaMain:
      type: object
      properties:
        type:
          description: >
            Multiple Media can be published per source, but they should all have
            the same viewpoint. They can differ in:
              * quality: `main` is higher resolution while `preview` is low resolution and low framerate.
          type: string
          enum:
            - preview
            - main
        deviceId:
          type: string
          description: The device that generated the media.
          example: 10058b7a
        mediaType:
          description: What type of media is contained.
          type: string
          enum:
            - video
            - image
        startTimestamp:
          description: Start time of the media.
          type: string
          format: date-time
        endTimestamp:
          description: End time of the media.
          type: string
          format: date-time
      required:
        - type
        - startTimestamp
        - endTimestamp
        - deviceId
        - mediaType
    ApiMediaIncludes:
      type: object
      properties:
        flvUrl:
          type: string
          nullable: true
          x-jsoninclude-nonnull-annotation: true
          description: >-
            Flash video delivered over HTTPS can be used to provide live
            streams, but also play back recordings.
          example: 'https://media.c13.eagleyenetworks.com/media/streams/main/flv'
        rtspUrl:
          type: string
          x-jsoninclude-nonnull-annotation: true
          description: >-
            RTSP is a protocol to request media to be sent, and to multiplex
            said media over one or more connections back to the client.
          example: 'rtsp://media.c13.eagleyenetworks.com/media/streams/main/rtsp'
        rtspsUrl:
          type: string
          x-jsoninclude-nonnull-annotation: true
          description: >-
            Same as RTSP, but communication happens over a TLS socket instead of
            an unencrypted TCP socket.
          example: 'rtsps://media.c13.eagleyenetworks.com/media/streams/main/rtsp'
        multipartUrl:
          type: string
          x-jsoninclude-nonnull-annotation: true
          description: >-
            Proprietary protocol that uses multipart over HTTPS to deliver raw
            encoded image, video and audio frames as they become available
          example: 'https://media.c13.eagleyenetworks.com/media/streams/main/multipart'
        mp4Url:
          type: string
          nullable: true
          x-jsoninclude-nonnull-annotation: true
          description: >-
            MPEG-4 Part 14 files, also known as “.mp4” files, retrieved over
            HTTPS to play back recorded video and sometimes audio streams. Not
            all video and audio codecs are supported if strictly following the
            standards.
          example: 'https://media.c13.eagleyenetworks.com/media/recordings.mp4'
    RecordedImageFieldValues:
      type: object
      description: A list of available values for each field.
      properties:
        overlayId:
          type: array
          description: >-
            A list of available overlay ids that can be used for fetching the
            overlays.
          items:
            $ref: '#/components/schemas/OverlayId'
    OverlayId:
      type: object
      description: The details of the overlays available.
      properties:
        id:
          type: string
          description: A unique identifier for the overlay.
          example: een.motionDetectionEvent.v1
        name:
          type: string
          description: The name of the event overlay.
          example: Motion Detection
        type:
          type: string
          description: The type of overlay event.
          example: event
    PaginatedResponse:
      type: object
      description: >
        Used to wrap results for a paginated response, containing information on
        how to retrieve further pages and, if  available, the total number of
        results.
      properties:
        nextPageToken:
          type: string
          readOnly: true
          nullable: true
          description: >
            Token to retrieve the next page. The value of this token is passed
            into the field pageToken.  This value can be null if there is no
            next page.
        prevPageToken:
          type: string
          readOnly: true
          nullable: true
          description: >
            Token to retrieve the previous page. The value of this token is
            passed into the field pageToken.  This value can be null of there is
            no previous page.
        totalSize:
          type: integer
          minimum: 0
          readOnly: true
          nullable: true
          description: >
            The number of resource entries being returned from the result set.  This can be omitted if the API endpoint does not have total size
            information.
        results:
          type: array
          readOnly: true
          description: The result set from a collection API call.
          items:
            type: object
      required:
        - nextPageToken
        - prevPageToken
        - results
    PaginatedResponseWithSize:
      description: >
        Used to wrap results for a paginated response, containing information on
        how to retrieve further pages and  the total number of results.  
      allOf:
        - $ref: '#/components/schemas/PaginatedResponseNoTotalSize'
        - properties:
            totalSize:
              type: integer
              readOnly: true
              description: |
                Size of the total result set.
          required:
            - totalSize
    PaginatedResponseNoTotalSize:
      type: object
      description: >
        Used to wrap results for a paginated response, containing information on
        how to retrieve further pages.
      properties:
        nextPageToken:
          type: string
          readOnly: true
          nullable: true
          description: >
            Token to retrieve the next page. The value of this token is passed
            into the field pageToken.  This value can be null if there is no
            next page.
        prevPageToken:
          type: string
          readOnly: true
          nullable: true
          description: >
            Token to retrieve the previous page. The value of this token is
            passed into the field pageToken.  This value can be null of there is
            no previous page.
        results:
          type: array
          readOnly: true
          description: The result set from a collection API call.
          items:
            type: object
      required:
        - nextPageToken
        - prevPageToken
        - results
    ApiV3Error:
      type: object
      properties:
        code:
          description: HTTP code defined in EEN Standard Code Values
          type: integer
        status:
          description: A string enum describing the code
          type: string
          enum:
            - cancelled
            - unknown
            - invalidArgument
            - deadlineExceeded
            - notFound
            - conflict
            - permissionDenied
            - resourceExhausted
            - failedPrecondition
            - aborted
            - outOfRange
            - unimplemented
            - internal
            - unavailable
            - dataLoss
            - unauthenticated
            - mediaTypeNotSupported
            - acceptNotSupported
            - methodNotSupported
            - tooManyRequests
        message:
          description: Developer friendly human readable error message in English
          type: string
        details:
          description: An array of extensible objects that define error information
          type: array
          items:
            $ref: '#/components/schemas/ExceptionDetail'
      required:
        - code
        - status
        - message
        - details
    ExceptionDetail:
      type: object
      oneOf:
        - $ref: '#/components/schemas/ErrorInfoExceptionDetail'
        - $ref: '#/components/schemas/BadRequestExceptionDetail'
        - $ref: '#/components/schemas/ResourceInfoExceptionDetail'
      discriminator:
        propertyName: type
        mapping:
          errorInfo: '#/components/schemas/ErrorInfoExceptionDetail'
          badRequest: '#/components/schemas/BadRequestExceptionDetail'
          resourceInfo: '#/components/schemas/ResourceInfoExceptionDetail'
      properties:
        type:
          description: A string enum describing the type of detail object.
          type: string
          enum:
            - errorInfo
            - badRequest
            - resourceInfo
      required:
        - type
    ErrorInfoExceptionDetail:
      properties:
        type:
          description: A string enum describing the type of detail object.
          type: string
          enum:
            - errorInfo
        reason:
          description: >
            The reason for the error. This is a constant value that identifies
            the proximate cause of the

            error. Error reasons are unique within a particular domain of
            errors.
          type: string
          enum:
            - unauthenticated
            - unexpectedArgument
            - missingRequiredArgument
            - wrongArgumentValue
            - invalidPermission
            - wrongEdition
            - wrongAccountType
            - resourceNotFound
            - endpointNotFound
            - methodNotSupported
            - unexpectedError
            - acceptNotSupported
            - alreadyExists
            - foreignKeyConflict
            - childDevicesExist
            - contentNotSupported
            - deadlineExpired
            - tooManyRequests
            - deviceUnavailable
            - serviceUnavailable
            - invalidJSON
            - resourceLocked
            - notSupportedOnBridge
            - outOfRetention
            - deviceIdentificationFailed
            - credentialValidationFailed
            - credentialSetupFailed
            - localUrlValidationFailed
            - hwRegistrationFailed
            - failedAddingCameraAfterValidation
            - neverConnected
            - reconnectFailed
            - unsupportedModel
            - purged
            - userBlocked
            - userTemporarilyBlocked
            - quotaExceeded
        domain:
          description: |
            Logical grouping to which the "reason" belongs
          type: string
        metadata:
          $ref: '#/components/schemas/ExceptionMetadata'
    BadRequestExceptionDetail:
      properties:
        type:
          description: A string enum describing the type of detail object.
          type: string
          enum:
            - badRequest
        argumentViolations:
          type: array
          items:
            $ref: '#/components/schemas/ArgumentViolation'
    ArgumentViolation:
      properties:
        argumentName:
          type: string
          description: Name of the argument
        description:
          type: string
          description: Description of the violation
    ResourceInfoExceptionDetail:
      properties:
        type:
          description: A string enum describing the type of detail object.
          type: string
          enum:
            - resourceInfo
        resource:
          description: 'Referenced resource type, eg "cameras", "bridges", or "locations".'
          type: string
        ids:
          type: array
          description: Identities of resources
          items:
            type: string
    ExceptionMetadata:
      properties:
        path:
          description: Path of the request
          type: string
        method:
          description: Method of the request
          type: string
    ApiMediaSessionURL:
      type: object
      required:
        - url
      properties:
        url:
          description: Url for the media endpoint that sets the media session cookie
          type: string
          format: url
          example: 'https://media.c13.eagleyenetworks.com/media/'
    ApiPaginatedFeedResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponseWithSize'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/ApiFeedWithIncludes'
    ApiFeedWithIncludes:
      allOf:
        - $ref: '#/components/schemas/ApiFeedMain'
        - $ref: '#/components/schemas/ApiFeedIncludes'
        - type: object
    ApiFeedMain:
      type: object
      properties:
        id:
          type: string
          description: Identifier of the feed
          example: 10058b7a-main
        type:
          description: >
            Multiple feeds can be published per source, but they should all have
            the same viewpoint. They can differ in:
              * quality: `main` is higher resolution while `preview` is low resolution and low framerate
              * trigger: some generate frames continuously, while others only generate frames when something specific is visible such as a license plate.
          type: string
          enum:
            - main
            - preview
            - talkdown
        deviceId:
          type: string
          description: The device generating the feed
          example: 10058b7a
        mediaType:
          description: What type of media is being generated
          type: string
          enum:
            - audio
            - video
            - image
            - halfDuplex
            - fullDuplex
      required:
        - id
        - type
        - deviceId
        - mediaType
    ApiFeedIncludes:
      type: object
      properties:
        flvUrl:
          type: string
          nullable: true
          x-jsoninclude-nonnull-annotation: true
          description: >-
            Flash video delivered over HTTPS can be used to provide live
            streams, but also play back recordings.
          example: 'https://media.c13.eagleyenetworks.com/10058b7a/main.flv'
        rtspUrl:
          type: string
          x-jsoninclude-nonnull-annotation: true
          description: >-
            RTSP is a protocol to request media to be sent, and to multiplex
            that media over one or more connections back to the client.
          example: 'rtsp://media.c13.eagleyenetworks.com/media/streams/main/rtsp'
        rtspsUrl:
          type: string
          x-jsoninclude-nonnull-annotation: true
          description: >-
            Same as RTSP, but communication happens over a TLS socket instead of
            an unencrypted TCP socket.
          example: 'rtsps://media.c13.eagleyenetworks.com/media/streams/main/rtsp'
        localRtspUrl:
          type: string
          nullable: true
          x-jsoninclude-nonnull-annotation: true
          description: >-
            Same as RTSP, but this time requested directly to the bridge instead
            of the cloud.
          example: 'rtsp://10.0.0.1:554/'
        hlsUrl:
          type: string
          nullable: true
          x-jsoninclude-nonnull-annotation: true
          description: Http Live Streaming can be used to deliver a live stream over HTTPS.
          example: 'https://media.c13.eagleyenetworks.com/media/streams/main/hls'
        multipartUrl:
          type: string
          x-jsoninclude-nonnull-annotation: true
          description: >-
            Proprietary protocol that uses multipart over HTTPS to deliver raw
            encoded image, video and audio frames as they become available
        webRtcUrl:
          type: string
          nullable: true
          x-jsoninclude-nonnull-annotation: true
          description: WebRTC can be used to set-up push to talk connections with speakers.
          example: 'https://media.c13.eagleyenetworks.com/media/streams/main/webRtc'
        audioPushHttpsUrl:
          type: string
          nullable: true
          x-jsoninclude-nonnull-annotation: true
          description: >-
            Audio push url can be used to push the audio to the speaker
            associated with a camera.
          example: 'https://media.c13.eagleyenetworks.com/media/streams/audio'
    ApiCreateExportResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          example: cd66d697-5ce2-4b70-abc6-4b70b9361537
          description: >-
            ID of the export job. This should be used with the jobs api to keep
            track of the state of the export job.
    BundleExportDetails:
      allOf:
        - $ref: '#/components/schemas/ApiExportDetails'
        - properties:
            type:
              type: string
              enum:
                - bundle
            playbackMultiplier:
              $ref: '#/components/schemas/playbackMultiplier'
          required:
            - playbackMultiplier
    TimeLapseExportDetails:
      allOf:
        - $ref: '#/components/schemas/ApiExportDetails'
        - properties:
            type:
              type: string
              enum:
                - timeLapse
            playbackMultiplier:
              $ref: '#/components/schemas/playbackMultiplier'
          required:
            - playbackMultiplier
    VideoExportDetails:
      allOf:
        - $ref: '#/components/schemas/ApiExportDetails'
        - properties:
            type:
              type: string
              enum:
                - video
    playbackMultiplier:
      type: integer
      description: Playback multiplier used to create the time lapse video
      minimum: 1
      maximum: 48
    ApiExportDetails:
      type: object
      required:
        - deviceId
        - period
        - type
        - info
      properties:
        deviceId:
          description: The ID of the device
          type: string
          example: 10058b7a
        type:
          description: >
            Type of export to make. Should be one of: video, timeLapse or
            bundle.

            Where:

            * video: Export the full video interval(s) between the given times
            to mp4.

            * timeLapse: Export the preview video as a time lapse video to mp4.

            * bundle: combination of video and timeLapse.
          type: string
        autoDelete:
          type: boolean
          default: false
          description: >
            If true the export is placed into the read-only "downloads" folder
            of archive, and will be removed after 2 weeks.

            Else the export is placed in archive with the end user having full
            control over it.
        skipSyncToCloud:
          allOf:
            - $ref: '#/components/schemas/skipSyncToCloud'
            - default: false
        period:
          type: object
          description: >
            Period for which to make the export of. The duration can't exceed 8
            hours.

            If `endTimestamp` is not given, the current time will be used.
          required:
            - startTimestamp
          properties:
            startTimestamp:
              $ref: '#/components/schemas/startTimestamp'
            endTimestamp:
              $ref: '#/components/schemas/endTimestamp'
        osd:
          type: object
          description: >-
            If included the timestamp of each frame is super imposed in the
            export.
          required:
            - timeZone
          properties:
            timeZone:
              type: string
              description: Timezone used to render the timestamps
              example: Americas/Chicago
        info:
          type: object
          required:
            - name
            - directory
          properties:
            name:
              type: string
              minLength: 1
              maxLength: 64
              pattern: '[^\/]*'
              description: Name of the export.
            directory:
              type: string
              maxLength: 256
              description: >-
                Destination path in archive to be used to save the generated
                files into.
            notes:
              type: string
              maxLength: 1024
              description: The description that is added to the file/folder in archive
            tags:
              type: array
              items:
                type: string
                maxLength: 32
    ApiCopyExportBody:
      type: object
      required:
        - retryStrategy
      properties:
        retryStrategy:
          type: string
          enum:
            - full
            - failedIntervalsFully
            - minimal
          description: >
            Strategy to use to decide what to export

            * full: export all files just as the original export

            * failedIntervalsFully: for each file that had a failed interval,
            retry the whole file

            * minimal: only retry the parts that failed
    skipSyncToCloud:
      type: boolean
      description: >
        If true: the job will not try to sync any data to the cloud, instead the
        export will only contain the data that is currently in the cloud.

        The missing parts can be found in the field:
        `detailedState.intervals.missingIntervals`.
    startTimestamp:
      description: Where to start the export.
      type: string
      format: date-time
      example: '2023-03-19T09:08:07.542Z'
    endTimestamp:
      description: Where to stop the export.
      type: string
      format: date-time
      example: '2023-03-20T09:08:07.542Z'
    PaginatedJobResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/Job'
    Job:
      oneOf:
        - $ref: '#/components/schemas/JobStarted'
        - $ref: '#/components/schemas/JobPending'
        - $ref: '#/components/schemas/JobSuccess'
        - $ref: '#/components/schemas/JobFailure'
        - $ref: '#/components/schemas/JobRevoked'
      discriminator:
        propertyName: state
        mapping:
          started: '#/components/schemas/JobStarted'
          pending: '#/components/schemas/JobPending'
          success: '#/components/schemas/JobSuccess'
          failure: '#/components/schemas/JobFailure'
          revoked: '#/components/schemas/JobRevoked'
    JobBase:
      required:
        - id
        - type
        - namespace
        - arguments
        - userId
        - createTimestamp
        - updateTimestamp
        - expireTimestamp
      properties:
        id:
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/JobTypeId'
        namespace:
          $ref: '#/components/schemas/JobNamespace'
        arguments:
          $ref: '#/components/schemas/JobArguments'
        userId:
          $ref: '#/components/schemas/UserId'
        scheduleTimestamp:
          allOf:
            - $ref: '#/components/schemas/NullableDateTimeBase'
            - description: >-
                When the Job is/was expected to run.  Null when the Job was
                'on-demand'.  Not changeable.
        createTimestamp:
          allOf:
            - $ref: '#/components/schemas/DateTimeBase'
            - description: When the Job was created.  Not changeable.
        updateTimestamp:
          allOf:
            - $ref: '#/components/schemas/DateTimeBase'
            - description: When the Job was updated.  Not directly changeable by user.
        expireTimestamp:
          allOf:
            - $ref: '#/components/schemas/DateTimeBase'
            - description: >-
                4 weeks in the future from when the Job was created.  Not
                changeable by user.
    JobPending:
      description: Example of a State Pending Job
      allOf:
        - type: object
          required:
            - state
            - detailedState
            - progress
            - result
            - error
          properties:
            state:
              type: string
              enum:
                - pending
            detailedState:
              $ref: '#/components/schemas/NullObject'
            progress:
              type: number
              minimum: 0
              maximum: 0
            result:
              $ref: '#/components/schemas/NullObject'
            error:
              $ref: '#/components/schemas/NullObject'
        - $ref: '#/components/schemas/JobBase'
    JobStarted:
      description: Example of a State Started Job
      allOf:
        - type: object
          required:
            - state
            - detailedState
            - progress
            - result
            - error
          properties:
            state:
              type: string
              enum:
                - started
            detailedState:
              $ref: '#/components/schemas/DetailedState'
            progress:
              $ref: '#/components/schemas/JobProgress'
            result:
              $ref: '#/components/schemas/NullObject'
            error:
              $ref: '#/components/schemas/NullObject'
        - $ref: '#/components/schemas/JobBase'
    JobSuccess:
      description: Example of a State Success Job
      allOf:
        - type: object
          required:
            - state
            - detailedState
            - progress
            - result
            - error
          properties:
            state:
              type: string
              enum:
                - success
            detailedState:
              $ref: '#/components/schemas/DetailedState'
            progress:
              type: number
              minimum: 1
              maximum: 1
            result:
              type: object
              oneOf:
                - $ref: '#/components/schemas/JobResultFiles'
                - $ref: '#/components/schemas/JobResultText'
                - $ref: '#/components/schemas/JobResultNull'
            error:
              $ref: '#/components/schemas/NullObject'
        - $ref: '#/components/schemas/JobBase'
    JobFailure:
      description: Example of a State Failure Job
      allOf:
        - type: object
          required:
            - state
            - detailedState
            - progress
            - result
            - error
          properties:
            state:
              type: string
              enum:
                - failure
            detailedState:
              $ref: '#/components/schemas/DetailedState'
            progress:
              type: number
              minimum: 0
              maximum: 0
            result:
              $ref: '#/components/schemas/NullObject'
            error:
              $ref: '#/components/schemas/JobError'
        - $ref: '#/components/schemas/JobBase'
    JobRevoked:
      description: Example of a State Revoked (cancelled) Job
      allOf:
        - type: object
          required:
            - state
            - detailedState
            - progress
            - result
            - error
          properties:
            state:
              type: string
              enum:
                - revoked
            detailedState:
              $ref: '#/components/schemas/NullObject'
            progress:
              type: number
              minimum: 0
              maximum: 0
            result:
              $ref: '#/components/schemas/NullObject'
            error:
              $ref: '#/components/schemas/NullObject'
        - $ref: '#/components/schemas/JobBase'
    JobResultNull:
      description: >
        A null result.  Used for JobTypes that don't return any output and
        simply indicate their success or failure via the Job state.  Will appear
        as "result": null in JSON, the same as if the Job was not in a success
        state.
      nullable: true
    JobResultText:
      description: |
        A result that is only raw text.
      type: object
      properties:
        text:
          type: string
          x-faker:
            dataType: lorem.sentence
      required:
        - text
    JobResultFiles:
      required:
        - files
      properties:
        files:
          type: array
          items:
            $ref: '#/components/schemas/JobResultFile'
    JobResultFile:
      type: object
      required:
        - name
        - size
        - mimetype
        - url
        - description
      properties:
        name:
          type: string
          x-faker: system.fileName
        size:
          type: integer
          minimum: 1
          x-faker:
            dataType: datatype.bigInt
            options:
              min: 1
              max: 2147483648
        mimetype:
          type: string
          x-faker: system.mimeType
        url:
          type: string
          x-faker: image.abstract
        description:
          type: string
          x-faker:
            helpers.arrayElement:
              -   - User Permissions Report
                  - Camera Settings Report
    JobError:
      $ref: '#/components/schemas/ApiV3Error'
    JobProgress:
      type: number
      minimum: 0
      maximum: 1
      description: Job percent complete expressed as a float
      x-faker:
        datatype.float:
          min: 0
          max: 1
    JobState:
      type: string
      description: >
        State of the Job.  When updating a Job, appropriate state changes are
        enforced. - Pending Jobs can be updated to any state. - Started Jobs can
        be updated to failure, success, or revoked. - Failure Jobs cannot be
        updated. - Success Jobs cannot be updated. - Revoked Jobs cannot be
        updated. When a Job is revoked, the worker is notified through any
        communication the worker performs that needs to touch the Job resource.  For example, when the worker is trying to add a result or update
        progress through the API, it will receive an error which should result
        in termination of the work.  This error will be a 400 or 500 error.
        Delete Jobs will interrupt the worker using the same methods (404 error,
        etc). Uses Celery task state conventions:
        https://docs.celeryq.dev/en/stable/reference/celery.states.html#misc
      enum:
        - pending
        - started
        - failure
        - success
        - revoked
    JobTypeId:
      type: string
      example: reports.user-permissions
      description: >
        Concatenation of JobType namespace and a name which forms a unique ID.
        Type determines what kind of Job is run.
      x-faker:
        random.word: null
    UserId:
      type: string
      description: >
        User that the Job runs under and/or for.  In the case a regular user
        invokes the POST /jobs endpoint, this is their user ID.
      example: cafe0010
      x-faker:
        helpers.arrayElement:
          -   - cafe0010
    DateTimeBase:
      type: string
      format: date-time
      example: '2020-01-01T00:00:00.000Z'
      description: ISO-8601 (RFC 3339)
      x-faker:
        date.between:
          - '2020-01-01T00:00:00.000+00:00'
          - '2030-01-01T00:00:00.000+00:00'
    NullableDateTimeBase:
      allOf:
        - $ref: '#/components/schemas/DateTimeBase'
      nullable: true
    JobNamespace:
      type: string
      example: reports
      description: >
        Jobs with common concerns are grouped according to their namespace. For
        example, Reports has it's own reports namespace to make filtering and
        finding report type jobs easier.
      x-faker:
        helpers.arrayElement:
          -   - reports
              - jobs
              - export
    DetailedState:
      type: object
      description: >
        This object allows for a flexible way of returning detailed progress
        information to the end user.  It is allowed to be null, otherwise the
        format of data is dynamic.  This object is allowed to be present on a
        Job of any state except pending and revoked.
      example:
        totalItems: 10
        currentItems: 4
    JobArguments:
      type: object
      description: >-
        Variable data for each type of job, specified in argumentSchema of the
        Get Job Types API in JSON Schema format. Empty object or null is an
        acceptable value when no arguments are required.
      nullable: true
      example:
        timeRangeSelect: day
    NullObject:
      description: Null object
      type: object
      nullable: true
    timestamp:
      type: string
      format: date-time
      example: '2021-04-22T00:00:00.000+00:00'
      readOnly: true
    accountId:
      type: string
      description: Account ID specified in as an ESN Type.
      example: '00001106'
    id:
      type: string
      description: The ID of the item.
      format: uuid
      example: 123e4567-e89b-12d3-a456-426655440000
      readOnly: true
    mimeType:
      type: string
      description: The media content type.
      example: video/mp4
      readOnly: true
      enum:
        - video/mp4
        - application/directory
    directory:
      type: string
      description: Name of the parent directory.
      example: /Bundles/North Door
      readOnly: false
    name:
      type: string
      description: Name of the item.
      example: Video North Door 2022-08-03 23-04-50.mp4
      readOnly: false
    active:
      type: boolean
      description: Boolean representing if a public share is active.
      readOnly: false
    childCount:
      type: integer
      description: Count of child folders within the directory.
      example: 3
    tags:
      description: List of tags associated with the file.
      type: array
      items:
        type: string
      example:
        - family
        - vacation
    metadata:
      type: object
      description: Custom metadata associated with the file.
      additionalProperties:
        type: string
    size:
      type: integer
      description: Size of the file in Bytes.
      example: 4242194
      readOnly: true
    timestamp1:
      type: string
      description: Date and time when the item was created.
      format: date-time
      example: '2021-04-22T00:00:00.000Z'
      readOnly: true
    notes:
      type: string
      description: User entered annotations.
      example: Kids throwing rocks.
      readOnly: false
    ApiPaginatedFileResponse:
      description: A paginated response containing a list of files with optional fields.
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/ApiFileGetWithIncludes'
    ApiPaginatedFileResponseSlim:
      description: A paginated response containing a list of files.
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/ApiFileMain'
    ApiFileWithIncludes:
      description: A file object with optional fields.
      type: object
      allOf:
        - $ref: '#/components/schemas/ApiFileMain'
      properties:
        accountId:
          $ref: '#/components/schemas/accountId'
        publicShare:
          $ref: '#/components/schemas/PublicShare'
        notes:
          allOf:
            - $ref: '#/components/schemas/notes'
        createTimestamp:
          description: Date and time when the item was created.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/timestamp1'
        updateTimestamp:
          description: Date and time when the item was last updated.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/timestamp1'
        size:
          allOf:
            - $ref: '#/components/schemas/size'
        metadata:
          $ref: '#/components/schemas/metadata'
        tags:
          $ref: '#/components/schemas/tags'
        childCount:
          $ref: '#/components/schemas/childCount'
        details:
          nullable: true
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/fileDetails'
    ApiFileCreateWithIncludes:
      allOf:
        - $ref: '#/components/schemas/ApiFileWithIncludes'
      required:
        - name
    ApiFileGetWithIncludes:
      allOf:
        - $ref: '#/components/schemas/ApiFileWithIncludes'
      required:
        - id
        - directory
        - mimeType
        - name
    ApiFileGet:
      allOf:
        - $ref: '#/components/schemas/ApiFileMain'
      required:
        - id
        - directory
        - mimeType
        - name
    ApiFileMain:
      description: A file object.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        directory:
          $ref: '#/components/schemas/directory'
        mimeType:
          $ref: '#/components/schemas/mimeType'
        name:
          $ref: '#/components/schemas/name'
    Permissions:
      description: Permissions for a file object.
      type: object
      properties:
        write:
          readOnly: false
          type: boolean
          description: Allows public users to modify file metadata.
          example: true
    PublicShare:
      description: Public share properties.
      type: object
      properties:
        accountId:
          description: The account ID of the public share.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/accountId'
        createTimestamp:
          readOnly: true
          description: Date and time when the item was shared.
          nullable: true
          allOf:
            - $ref: '#/components/schemas/timestamp1'
        expireTimestamp:
          description: >-
            Date and time when the item sharing link will expire. Public access
            will not be available after this time.
          readOnly: false
          nullable: true
          allOf:
            - $ref: '#/components/schemas/timestamp1'
        id:
          description: Public share ID.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/id'
        active:
          $ref: '#/components/schemas/active'
        permissions:
          allOf:
            - $ref: '#/components/schemas/Permissions'
        password:
          readOnly: false
          type: string
          description: >-
            Password for public access. If unset, the password field will return
            an empty string. If set, the password salt and hash will be
            returned. When updating or setting a password, a minimum of six
            characters are required.
          example: my-super-secret-password!
        url:
          readOnly: true
          type: string
          description: Public share URL.
          example: >-
            https://api.cxxx.eagleeyenetworks.com/api/v3.0/files/123e4567-e89b-12d3-a456-426655440000/publicShare
    fileDetails:
      oneOf:
        - $ref: '#/components/schemas/exportFileDetails'
      discriminator:
        propertyName: type
        mapping:
          exportFileDetails: '#/components/schemas/exportFileDetails'
    exportFileDetails:
      description: Extra information about the parameters used to create the exported file
      required:
        - type
        - deviceId
        - startTimestamp
        - endTimestamp
      properties:
        type:
          type: string
          enum:
            - exportFileDetails
        deviceId:
          type: string
          description: ID of the source device for the export.
          example: 100fabcd
        jobId:
          type: string
          format: uuid
          description: ID of the export job that created the file.
          example: c22d98cc-3008-4cbc-b06d-79759dd0c62f
        videoType:
          type: string
          description: >-
            Type of video generated by the export. Normal video of the main
            video stream, or a time lapse of the preview stream.
          enum:
            - video
            - timeLapse
        startTimestamp:
          type: string
          format: date-time
          description: Start timestamp of the export.
          example: '2021-03-19T09:08:07.542Z'
        endTimestamp:
          type: string
          format: date-time
          description: End timestamp of the export.
          example: '2021-03-19T15:08:07.542Z'
    id1:
      type: string
      description: The ID of the download.
      format: uuid
      example: 123e4567-e89b-12d3-a456-426655440000
      readOnly: true
    name1:
      type: string
      description: Name of the item.
      example: Video North Door 2022-08-03 23-04-50.mp4
      readOnly: false
      minLength: 1
      maxLength: 128
    mimeType1:
      type: string
      description: The media content type.
      example: video/mp4
      readOnly: true
    expireTimestamp:
      type: string
      format: date-time
      example: '2021-04-22T00:00:00.000+00:00'
      readOnly: true
    status:
      type: string
      description: >-
        Expiration status of the download. Possible values are "available" or
        "expired".
      example: available
      readOnly: true
      enum:
        - available
        - expired
    timestamp2:
      type: string
      description: Date and time when the item was created.
      format: date-time
      example: '2021-04-22T00:00:00.000Z'
      readOnly: true
    md5:
      type: string
      description: MD5 hash of the file.
      example: d41d8cd98f00b204e9800998ecf8427e
      readOnly: true
    ApiPaginatedDownloadResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/ApiDownloadWithIncludes'
    ApiDownloadWithIncludes:
      type: object
      allOf:
        - $ref: '#/components/schemas/ApiDownloadsMain'
      properties:
        accountId:
          type: string
          description: Account ID specified in as an ESN Type.
          pattern: '^[a-fA-F0-9]{8}$'
          example: '00001106'
        createTimestamp:
          description: Date and time when the item was created.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/timestamp2'
        updateTimestamp:
          description: Date and time when the item was last updated.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/timestamp2'
        size:
          allOf:
            - $ref: '#/components/schemas/size'
        metadata:
          type: object
          description: Custom metadata associated with the download.
          additionalProperties:
            type: string
        tags:
          allOf:
            - $ref: '#/components/schemas/tags'
        notes:
          allOf:
            - $ref: '#/components/schemas/notes'
        md5:
          allOf:
            - $ref: '#/components/schemas/md5'
        details:
          nullable: true
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/fileDetails'
    ApiDownloadDetailsWithIncludes:
      type: object
      allOf:
        - $ref: '#/components/schemas/ApiDownloadsMain'
      properties:
        accountId:
          type: string
          description: Account ID specified in as an ESN Type.
          pattern: '^[a-fA-F0-9]{8}$'
          example: '00001106'
        createTimestamp:
          description: Date and time when the item was created.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/timestamp2'
        updateTimestamp:
          description: Date and time when the item was last updated.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/timestamp2'
        size:
          allOf:
            - $ref: '#/components/schemas/size'
        metadata:
          type: object
          description: Custom metadata associated with the download.
          additionalProperties:
            type: string
        tags:
          allOf:
            - $ref: '#/components/schemas/tags'
        notes:
          allOf:
            - $ref: '#/components/schemas/notes'
        md5:
          allOf:
            - $ref: '#/components/schemas/md5'
        details:
          nullable: true
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/fileDetails'
    ApiDownloadsMain:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id1'
        directory:
          $ref: '#/components/schemas/directory'
        mimeType:
          $ref: '#/components/schemas/mimeType1'
        name:
          $ref: '#/components/schemas/name1'
        expireTimestamp:
          $ref: '#/components/schemas/expireTimestamp'
        status:
          $ref: '#/components/schemas/status'
      required:
        - id
  parameters:
    deviceId:
      in: query
      name: deviceId
      description: The ID of the device that generates the media.
      required: true
      schema:
        type: string
        example: 10058b7a
    deviceIdNotRequired:
      in: query
      name: deviceId
      description: The ID of the device that generates the media.
      schema:
        type: string
        example: 10058b7a
    coalesce:
      in: query
      name: coalesce
      description: >-
        If true, we coalesce connected intervals into a single. An interval is
        seen as connected if the end time and start time are exactly the same.
      schema:
        type: boolean
        default: true
    type:
      in: query
      name: type
      description: The stream type of the device used to generate the media.
      required: true
      schema:
        type: string
        enum:
          - preview
          - main
    recordedType:
      in: query
      name: type
      description: The stream type of the device used to generate the media.
      schema:
        type: string
        enum:
          - preview
          - main
    liveType:
      in: query
      name: type
      required: true
      description: The stream type of the device used to generate the media.
      schema:
        type: string
        enum:
          - preview
    token:
      in: query
      name: pageToken
      description: >
        Token provided by `X-Een-NextToken` or `X-Een-PrevToken` header of a
        previous image call. If

        this parameter is present no other parameters are required, and any sent
        will be ignored
      schema:
        type: string
        example: cHJldlBhZ2VQbHoK
    mediaType:
      in: query
      name: mediaType
      required: true
      description: The type of media that is queried.
      schema:
        type: string
        enum:
          - video
          - image
    startTimestamp:
      in: query
      name: startTimestamp__gte
      description: >-
        Minimum timestamp from which you want to list recordings. Timestamps are
        according to ISO 8601.
      required: true
      schema:
        type: string
        format: date-time
        example: '2022-08-08T07:57:37.000+00:00'
    endTimestamp:
      in: query
      name: endTimestamp__lte
      description: Maximum timestamp till which you want to list recordings.
      schema:
        type: string
        format: date-time
        example: '2022-08-08T08:57:37.000+00:00'
    timestampLess:
      in: query
      name: timestamp__lt
      description: Return first image with timestamp less then.
      schema:
        type: string
        format: date-time
        example: '2022-08-08T07:57:37.000+00:00'
    timestampLessOrEqual:
      in: query
      name: timestamp__lte
      description: Return first image with timestamp less or equal.
      schema:
        type: string
        format: date-time
        example: '2022-08-08T07:57:37.000+00:00'
    timestamp:
      in: query
      name: timestamp
      description: Return image at this exact timestamp.
      schema:
        type: string
        format: date-time
        example: '2022-08-08T07:57:37.000+00:00'
    timestampGreaterOrEqual:
      in: query
      name: timestamp__gte
      description: Return first image with timestamp greater or equal.
      schema:
        type: string
        format: date-time
        example: '2022-08-08T07:57:37.000+00:00'
    timestampGreater:
      in: query
      name: timestamp__gt
      description: Return first image with timestamp greater then.
      schema:
        type: string
        format: date-time
        example: '2022-08-08T07:57:37.000+00:00'
    overlayIds:
      in: query
      name: overlayId__in
      description: >-
        What info will be included in the returned overlay. At least one id must
        be provided if an overlay is requested for the `include` parameter.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
        minItems: 1
        example:
          - een.motionDetectionEvent.v1
    include:
      in: query
      name: include
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - flvUrl
            - rtspUrl
            - rtspsUrl
            - multipartUrl
            - mp4Url
    overlaysInclude:
      in: query
      name: include
      description: |
        Extra options that can be included in the api response:
         - overlayEmbedded: draws the overlay on top of the source image resulting in a single jpeg
         - overlaySvgHeader: adds the `X-Een-OverlaySvg` header containing the overlays as a SVG image
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - overlayEmbedded
            - overlaySvgHeader
    recImagelistFieldValuesInclude:
      in: query
      name: include
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - overlayId
        minItems: 1
    pageToken:
      in: query
      name: pageToken
      description: >
        Token string value that references a page for pagination. This value is
        received when retrieving the first page in the `nextPageToken` and
        `prevPageToken` fields.
      example: b2Zmc2V0PTEwJmxpbWl0PTEw
      required: false
      schema:
        type: string
    pageSize:
      in: query
      name: pageSize
      description: >
        The number of entries to return per page. The maximum range of valid
        page sizes is documented with minimum and  maximum values, but the range
        might be further limited dynamically based on the requested information,
        account, and system status. Values outside of the (dynamic) allowed
        range will not result in an error, but will be clamped to the nearest
        limit. Thus, logic to detect the last page should not be based on
        comparing the requested size with the received size, but on the
        existence of a `nextPageToken` value.
      example: 100
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 500
        default: 100
    deviceId1:
      in: query
      name: deviceId
      description: The device generating the feed.
      style: form
      explode: false
      schema:
        type: string
        example: 10058b7a
    deviceIdIn:
      in: query
      name: deviceId__in
      description: The device ID's of the devices for which to return the feeds.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          example: 10058b7a
    type1:
      in: query
      name: type
      description: The stream type of the device used to generate the feed.
      schema:
        type: string
        enum:
          - main
          - preview
          - talkdown
    include1:
      in: query
      name: include
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - flvUrl
            - rtspUrl
            - rtspsUrl
            - localRtspUrl
            - hlsUrl
            - multipartUrl
            - webRtcUrl
            - audioPushHttpsUrl
    jobId:
      in: path
      name: jobId
      description: ID of the export job.
      schema:
        type: string
        format: uuid
      required: true
    requiredUserId:
      in: query
      name: userId
      description: |
        Filter by Jobs.userId.  REQUIRED.
      required: true
      example: cafe0010
      x-faker:
        helpers.arrayElement:
          -   - cafe0010
      schema:
        $ref: '#/components/schemas/UserId'
    namespace:
      in: query
      name: namespace
      description: |
        Filter by Jobs.namespace
      required: false
      schema:
        $ref: '#/components/schemas/JobNamespace'
    state:
      in: query
      name: state
      description: |
        Filter by Jobs.state
      required: false
      schema:
        $ref: '#/components/schemas/JobState'
    sort:
      in: query
      name: sort
      description: >-
        List of fields that should be sorted. Use "-" and the field name to
        specify descending results. Use "+" and the field name to specify
        ascending results.
      schema:
        type: array
        default:
          - '-createTimestamp'
        items:
          type: string
          enum:
            - '-createTimestamp'
            - '-updateTimestamp'
            - '-expireTimestamp'
            - '-state'
            - +createTimestamp
            - +updateTimestamp
            - +expireTimestamp
            - +state
      style: form
      explode: false
    state__in:
      in: query
      name: state__in
      description: |
        Filter Jobs.state to those having all given state
      required: false
      schema:
        type: array
        items:
          enum:
            - pending
            - started
            - failure
            - success
            - revoked
    createTimestamp__gte:
      in: query
      name: createTimestamp__gte
      description: Minimum timestamp for creation date.
      required: false
      schema:
        $ref: '#/components/schemas/timestamp'
    createTimestamp__lte:
      in: query
      name: createTimestamp__lte
      required: false
      description: Maximum timestamp for creation date.
      schema:
        $ref: '#/components/schemas/timestamp'
    updateTimestamp__gte:
      in: query
      name: updateTimestamp__gte
      description: Minimum timestamp for update date.
      required: false
      schema:
        $ref: '#/components/schemas/timestamp'
    updateTimestamp__lte:
      in: query
      name: updateTimestamp__lte
      required: false
      description: Maximum timestamp for update date.
      schema:
        $ref: '#/components/schemas/timestamp'
    expireTimestamp__gte:
      in: query
      name: expireTimestamp__gte
      description: Minimum timestamp for expire date.
      required: false
      schema:
        $ref: '#/components/schemas/timestamp'
    expireTimestamp__lte:
      in: query
      name: expireTimestamp__lte
      required: false
      description: Maximum timestamp for expire date.
      schema:
        $ref: '#/components/schemas/timestamp'
    id:
      in: path
      name: id
      description: Item ID.
      required: true
      schema:
        $ref: '#/components/schemas/id'
    name:
      in: query
      required: false
      name: name
      description: Exact name of the item.
      example: Video North Door 2022-08-03 23-04-50.mp4
      schema:
        $ref: '#/components/schemas/name'
    name__contains:
      in: query
      required: false
      name: name__contains
      description: File name contains filter.
      example: Video North Door
      schema:
        $ref: '#/components/schemas/name1'
    notes__contains:
      in: query
      required: false
      name: notes__contains
      description: Notes filter.
      example: throwing rocks
      schema:
        $ref: '#/components/schemas/notes'
    directory:
      in: query
      required: false
      name: directory
      description: Name of parent directory.
      example: /Bundles/North Door
      schema:
        $ref: '#/components/schemas/directory'
    directory__contains:
      in: query
      required: false
      name: directory__contains
      description: Item directory contains filter.
      example: /Bundles
      schema:
        $ref: '#/components/schemas/directory'
    mimeType:
      in: query
      name: mimeType
      description: Exact content type.
      example: application/directory
      schema:
        $ref: '#/components/schemas/mimeType'
    mimeType__contains:
      in: query
      name: mimeType__contains
      description: Content type contains filter.
      example: video/mp4
      schema:
        $ref: '#/components/schemas/mimeType'
    createTimestamp__gte1:
      in: query
      name: createTimestamp__gte
      description: Minimum timestamp for file creation date.
      required: false
      schema:
        $ref: '#/components/schemas/timestamp1'
    createTimestamp__lte1:
      in: query
      name: createTimestamp__lte
      required: false
      description: Maximum timestamp for file creation date.
      schema:
        $ref: '#/components/schemas/timestamp1'
    size__gte:
      in: query
      name: size__gte
      required: false
      description: Minimum file size.
      schema:
        $ref: '#/components/schemas/size'
    size__lte:
      in: query
      name: size__lte
      required: false
      description: Maximum file size.
      schema:
        $ref: '#/components/schemas/size'
    sort1:
      in: query
      name: sort
      description: >-
        List of fields that should be sorted. Use "-" and the field name to
        specify descending results. Use "+" and the field name to specify
        ascending results. By default, results are sorted by create timestamp in
        ascending order.
      schema:
        type: array
        default:
          - +createTimestamp
        items:
          type: string
          enum:
            - '-createTimestamp'
            - '-directory'
            - '-mimeType'
            - '-name'
            - '-size'
            - +createTimestamp
            - +directory
            - +mimeType
            - +name
            - +size
      example:
        - '-createTimestamp'
        - +name
      style: form
      explode: false
    include3:
      in: query
      name: include
      required: false
      description: >-
        The fields you want included in the response. If not specified, the
        response includes a default set of fields specific to this method. You
        can use the special value * during development to return all fields,
        however, to achieve better performance, it is advisable to explicitly
        select only the fields you need.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - accountId
            - publicShare
            - notes
            - createTimestamp
            - updateTimestamp
            - size
            - metadata
            - tags
            - childCount
            - details
        example:
          - accountId
          - publicShare
          - notes
          - createTimestamp
          - updateTimestamp
          - size
          - metadata
          - tags
          - childCount
          - details
    id1:
      in: path
      name: id
      description: Item ID.
      required: true
      schema:
        $ref: '#/components/schemas/id1'
    name1:
      in: query
      required: false
      name: name
      description: Exact name of the item.
      example: Video North Door 2022-08-03 23-04-50.mp4
      schema:
        $ref: '#/components/schemas/name1'
    mimeType1:
      in: query
      name: mimeType
      description: Exact content type.
      example: application/directory
      schema:
        $ref: '#/components/schemas/mimeType1'
    mimeType__contains1:
      in: query
      name: mimeType__contains
      description: Content type contains filter.
      example: video
      schema:
        $ref: '#/components/schemas/mimeType1'
    createTimestamp__gte2:
      in: query
      name: createTimestamp__gte
      description: Minimum timestamp for file creation date.
      required: false
      schema:
        $ref: '#/components/schemas/timestamp2'
    createTimestamp__lte2:
      in: query
      name: createTimestamp__lte
      required: false
      description: Maximum timestamp for file creation date.
      schema:
        $ref: '#/components/schemas/timestamp2'
    expireTimestamp__gte1:
      in: query
      name: expireTimestamp__gte
      required: false
      description: Minimum timestamp for file expiration date.
      schema:
        $ref: '#/components/schemas/timestamp2'
    expireTimestamp__lte1:
      in: query
      name: expireTimestamp__lte
      required: false
      description: Maximum timestamp for file expiration date.
      schema:
        $ref: '#/components/schemas/timestamp2'
    tags:
      in: query
      name: tags
      required: false
      description: Exact tags filter.
      schema:
        $ref: '#/components/schemas/tags'
    tags__any:
      in: query
      name: tags__any
      required: false
      description: Tags filter with any tag in the list.
      schema:
        $ref: '#/components/schemas/tags'
    tags__contains:
      in: query
      name: tags__contains
      required: false
      description: Tags filter.
      schema:
        $ref: '#/components/schemas/tags'
    sort2:
      in: query
      name: sort
      description: >-
        List of fields that should be sorted. Use "-" and the field name to
        specify descending results. Use "+" and the field name to specify
        ascending results. By default, results are sorted by create timestamp in
        descending order.
      schema:
        type: array
        default:
          - '-createTimestamp'
        items:
          type: string
          enum:
            - '-createTimestamp'
            - '-directory'
            - '-mimeType'
            - '-name'
            - '-size'
            - '-expireTimestamp'
            - +createTimestamp
            - +directory
            - +mimeType
            - +name
            - +size
            - +expireTimestamp
      style: form
      explode: false
    include4:
      in: query
      name: include
      required: false
      description: >-
        The fields you want included in the response. If not specified, the
        response will include a default set of fields specific to this method.
        For development purposes, you can use the special value * to return all
        fields; however, you will achieve better performance by selecting only
        the fields you need.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - accountId
            - createTimestamp
            - updateTimestamp
            - size
            - uploadUrl
            - storageId
            - metadata
            - tags
            - notes
            - md5
            - details
  headers:
    OverlaySvgHeader:
      description: The SVG file containing the display overlays requested for.
      schema:
        type: string
  responses:
    validationError:
      description: >-
        The supplied object is invalid. Error detail will contain the validation
        error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiV3Error'
          examples:
            unexpectedArgument:
              value:
                code: 400
                status: invalidArgument
                message: 'Unexpected argument: name'
                details:
                  - type: errorInfo
                    reason: unexpectedArgument
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
            missingRequiredArgument:
              value:
                code: 400
                status: invalidArgument
                message: 'Missing required arguments: name, id'
                details:
                  - type: errorInfo
                    reason: missingRequiredArgument
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
            badRequestInvalidJSON:
              value:
                code: 400
                status: invalidArgument
                message: Invalid JSON
                details:
                  - type: errorInfo
                    reason: invalidJSON
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
            badRequestInvalidArgument:
              value:
                code: 400
                status: invalidArgument
                message: 'Invalid Argument: Argument name is too long'
                details:
                  - type: errorInfo
                    reason: wrongArgumentValue
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
                  - type: badRequest
                    argumentViolations:
                      - argumentName: name
                        description: Name is too long
    unauthorized:
      description: You are not authenticated. Please authenticate and try again.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiV3Error'
          example:
            code: 401
            status: unauthenticated
            message: The client caller does not have a valid authentication credential
            details:
              - type: errorInfo
                reason: unauthenticated
                domain: apiv3
                metadata:
                  path: /api/v3.0/<resource>
    forbidden:
      description: You have no permission to access the specified resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiV3Error'
          examples:
            invalidPermission:
              value:
                code: 403
                status: permissionDenied
                message: >-
                  The client caller does not have permission for the specified
                  operation
                details:
                  - type: errorInfo
                    reason: invalidPermission
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
            wrongEdition:
              value:
                code: 403
                status: permissionDenied
                message: This feature is not enabled for the account
                details:
                  - type: errorInfo
                    reason: wrongEdition
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/locations
            wrongAccountType:
              value:
                code: 403
                status: permissionDenied
                message: This feature is only available for end users
                details:
                  - type: errorInfo
                    reason: wrongAccountType
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/locations
    resourceNotFound:
      description: Referenced resource could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiV3Error'
          examples:
            endpointNotFound:
              value:
                code: 404
                status: notFound
                message: The API endpoint was not found
                details:
                  - type: errorInfo
                    reason: endpointNotFound
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
            resourceNotFound:
              value:
                code: 404
                status: notFound
                message: The resource was not found
                details:
                  - type: errorInfo
                    reason: resourceNotFound
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
                  - type: resourceInfo
                    resource: <resource>
                    ids:
                      - <ids>
    conflict:
      description: >-
        There was a conflict while trying to perform your request. See error
        details for more information.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiV3Error'
          examples:
            alreadyExists:
              value:
                code: 409
                status: conflict
                message: The resource already exists
                details:
                  - type: errorInfo
                    reason: alreadyExists
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
            foreignKeyConflict:
              value:
                code: 409
                status: conflict
                message: >-
                  The resource cannot be deleted as other resources link to it.
                  Please remove the links or delete the other resources first
                  before deleting this resource.
                details:
                  - type: errorInfo
                    reason: foreignKeyConflict
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
            childDevicesExist:
              value:
                code: 409
                status: conflict
                message: >-
                  This device can not be deleted before all attached cameras
                  have been deleted. Please delete all cameras and then delete
                  this device.
                details:
                  - type: errorInfo
                    reason: childDevicesExist
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
    unsupportedMediaType:
      description: Content type of request body not supported.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiV3Error'
          example:
            code: 415
            status: mediaTypeNotSupported
            message: >-
              Unsupported content type: `text/plain`, should be one of:
              `application/json`
            details:
              - type: errorInfo
                reason: contentNotSupported
                domain: apiv3
                metadata:
                  path: /api/v3.0/<resource>
    internalServerError:
      description: Something went wrong in the server. Please try again.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiV3Error'
          example:
            code: 500
            status: internal
            message: An internal error has occurred. Please try again later.
            details:
              - type: errorInfo
                reason: unexpectedError
                domain: apiv3
                metadata:
                  path: /api/v3.0/<resource>
    unavailable:
      description: The service or resource is currently not available
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiV3Error'
          examples:
            deviceUnavailable:
              value:
                code: 503
                status: unavailable
                message: >-
                  The resource is currently not available, please try later
                  again
                details:
                  - type: errorInfo
                    reason: deviceUnavailable
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
            serviceUnavailable:
              value:
                code: 503
                status: unavailable
                message: 'The service is currently not available, please try later again'
                details:
                  - type: errorInfo
                    reason: serviceUnavailable
                    domain: apiv3
                    metadata:
                      path: /api/v3.0/<resource>
x-readme:
  explorer-enabled: true
