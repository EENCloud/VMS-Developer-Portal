openapi: "3.0.0"
info:
  title: Available Devices
  version: 3.0.0
servers:
  - url: 'https://{BaseUrl}/api/v3.0/'
    description: "Eagle Eye Networks API Server"
x-readme:
  explorer-enabled: true

paths:
  /availableDevices:
    get:
      operationId: listAvailableDevices
      tags: 
        - Available Devices
      description: >
       This endpoint returns a list of all devices found by the bridges in the account that have not yet been added.  
       Devices of a certain type will not be reported in the response if the user does not have permission to add them.  
       Since adding specific device types requires calling a device-type-specific API, it is recommended to filter on the 
       devices supported by the cameras, rather than retrieving "all" types.  
         
       It is important to note that after using the pageSize parameter, the "totalSize" in the response represents the total 
       number of available devices, not the number of bridges resulting from the query string.
      parameters:
        - $ref: '#/components/parameters/deviceType__in'
        # Pagination
        - $ref: 'https://commonswagger.cameramanager.com/pagination.yaml#/components/parameters/pageToken'
        - $ref: 'https://commonswagger.cameramanager.com/pagination.yaml#/components/parameters/pageSize'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPaginatedAvailableDeviceResponse'
        '400':
          $ref: 'https://commonswagger.cameramanager.com/error.yaml#/components/responses/validationError'
        '401':
          $ref: 'https://commonswagger.cameramanager.com/error.yaml#/components/responses/unauthorized'
        '500':
          $ref: 'https://commonswagger.cameramanager.com/error.yaml#/components/responses/internalServerError'

components:
  parameters:

    deviceType__in:
      in: query
      name: deviceType__in
      required: true
      description: >
        List of device types that are supported by the client. Required as new device types might be added at any time,
        which might need client (parser) changes before they are supported.
      schema:
        type: array
        minItems: 1
        items:
          $ref: '#/components/schemas/DeviceType'

  schemas:

    ApiPaginatedAvailableDeviceResponse:
      allOf:
        - $ref: 'https://commonswagger.cameramanager.com/pagination.yaml#/components/schemas/PaginatedResponse'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/ApiAvailableDevice'

    ApiAvailableDevice:
      description: >
        Represents a device found that is available to be added to the account.
        Note: Schema might change for new device types, so make sure any parsing code that has strict requirements only
        tries to parse device types it has been written for and doesn't try to parse everything.
      type: object
      properties:
        deviceType:
          $ref: '#/components/schemas/DeviceType'
        guid:
          $ref: '#/components/schemas/Guid'
        state:
          type: string
          enum:
            - addable
            - notSupported
            - inOtherAccount
            - unknown
          default: unknown
          description: >
            Indicates if and how a device can be added. *As there might be future reasons why devices cannot be added
            clients should be written in such a way that they can handle new values to be added. In case a client 
            doesn't understand the state, it should handle it as it handles the "unknown" state, which should be to 
            still show the device, but tell the user to contact support to help. 
            add the device.
            
            The states:
              * `addable`: Camera can be added and should work.
              * `notSupported`: Indicates if the device can really be added, or if it is unsupported, due to for example an 
            untested firmware version or unexpected responses from the device. Unsupported devices are reported to help 
            users debug why they cannot add a device. The users should contact support if they wish to add the device to
            their account.
              * `inOtherAccount`: Indicates if the device has already been added to a different account, and it is thus not 
            possible to add it to the current account. The user should contact support to resolve this issue.
              * `unknown`: Indicates the camera is in a state that means it is visible, but cannot be added due to some 
            issue. This state cane be transient, so users should be told to try again a few minutes later. If it is 
            still in this state, users should contact support to help resolve the issue.
        unknownCredentials:
          type: boolean
          description: >
            No working credentials are known for this camera, and thus the device will not work directly after adding.
            The user can either supply credentials while adding the device, change them after adding, or reset the 
            device and thus its credentials.
        visibleByBridges:
          type: array
          items:
            $ref: '#/components/schemas/BridgeId'
        make:
          description: The Manufactorer or brand of the camera.
          type: string
        model:
          description: The model of the camera.
          type: string
        firmwareVersion:
          type: string
          example: v20211019_542_3022
        ipAddress:
          allOf:
            - $ref: '#/components/schemas/IpAddress'
            - description: The IP address that is used to communicate to the device.
        otherIpAddress:
          description: Other known IP addresses of the device.
          type: array
          items:
            $ref: '#/components/schemas/IpAddress'
      required:
        - deviceType
        - guid
        - state
        - unknownCredentials
        - visibleByBridges

    DeviceType:
      type: string
      enum:
        - camera
        - speaker
        - display
        - multiCamera

    BridgeId:
      type: string
      pattern: ^(?:0[xX])?[0-9a-fA-F]{8}$
      example: 1000f60d
      description: >
        Unique ID of an EEN bridge.

    Guid:
      type: string
      format: uuid
      example: ddfa5b34-5d04-431e-8287-110fe87edf71

    IpAddress:
      type: string
      pattern: ^(?:25[0-5]|2[0-4]\d|[0-1]?\d{1,2})(?:\.(?:25[0-5]|2[0-4]\d|[0-1]?\d{1,2})){3}$
      example: 10.143.55.140

  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT 
security:
  - bearerAuth: []      