openapi: "3.0.0"
info:
  title: Feeds
  version: 3.0.0
  description: |    
      For the feeds, errors are handled in the following way:
      *  if there is more then 5 seconds between the previous and next frame, the stream is closed
      *  if the feed is not available at the initial moment, a 503 status code is returned
servers:
  - url: 'https://{BaseUrl}/api/v3.0/'
    description: "Eagle Eye Networks API Server"
x-readme:
  explorer-enabled: true

paths:

  /feeds:
    get:
      operationId: listFeeds
      description: >
       This endpoint allows developers to list and retrieve information about the feeds that are generated by a device.  
         
       It is important to note that after using the pageSize parameter, the "totalSize" in the response represents the 
       total number of available devices, not the number of bridges resulting from the query string.
      tags:
        - Feeds
      parameters:
        - $ref: '#/components/parameters/deviceId'
        - $ref: '#/components/parameters/type'

        # Include parameters
        - $ref: '#/components/parameters/include'

        # Pagination
        - $ref: 'https://commonswagger.cameramanager.com/pagination.yaml#/components/parameters/pageToken'
        - $ref: 'https://commonswagger.cameramanager.com/pagination.yaml#/components/parameters/pageSize'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPaginatedFeedResponse'
        '400':
          $ref: 'https://commonswagger.cameramanager.com/error.yaml#/components/responses/validationError'
        '401':
          $ref: 'https://commonswagger.cameramanager.com/error.yaml#/components/responses/unauthorized'
        '403':
          $ref: 'https://commonswagger.cameramanager.com/error.yaml#/components/responses/forbidden'
        '404':
          $ref: 'https://commonswagger.cameramanager.com/error.yaml#/components/responses/resourceNotFound'
        '500':
          $ref: 'https://commonswagger.cameramanager.com/error.yaml#/components/responses/internalServerError'

components:

  parameters:

    deviceId:
      in: query
      name: deviceId
      description: The device generating the feed.
      schema:
        type: string
        example: 10058b7a

    type:
      in: query
      name: type
      description: The stream type of the device used to generate the feed.
      schema:
        type: string
        enum:
          - main
          - preview

    include:
      in: query
      name: include
      schema:
        type: array
        items:
          type: string
          enum:
            - flvUrl
            - rtspUrl
            - rtspsUrl
            - rtspHttpsUrl
            - hlsUrl
            - multipartUrl
            - webRtcUrl

  schemas:

    ApiPaginatedFeedResponse:
      allOf:
        - $ref: 'https://commonswagger.cameramanager.com/pagination.yaml#/components/schemas/PaginatedResponse'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/ApiFeedWithIncludes'

    ApiFeedWithIncludes:
      allOf:
        - $ref: '#/components/schemas/ApiFeedMain'
        - $ref: '#/components/schemas/ApiFeedIncludes'
        - type: object

    ApiFeedMain:
      type: object
      properties:
        id:
          type: string
          description: Identifier of the feed
          example: 10058b7a-main
        type:
          description: >
            Multiple feeds can be published per source, but they should all have the same viewpoint. They can differ in:
              * quality: `main` is higher resolution while `preview` is low resolution and low framerate
              * trigger: some generate frames continuously, while others only generate frames when something specific is visible such as a license plate.

          type: string
          enum:
            - main
            - preview
            - talkdown
        deviceId:
          type: string
          description: The device generating the feed
          example: 10058b7a
        mediaType:
          description: What type of media is being generated
          type: string
          enum:
            - audio
            - video
            - image
            - halfDuplex
            - fullDuplex
      required:
        - id
        - type
        - deviceId
        - mediaType

    ApiFeedIncludes:
      type: object
      properties:
        flvUrl:
          type: string
          nullable: true
          x-jsoninclude-nonnull-annotation: true
          description: Flash video delivered over HTTPS can be used to provide live streams, but also play back recordings
          example: "https://media.c13.eagleyenetworks.com/10058b7a/main.flv"
        rtspUrl:
          type: string
          x-jsoninclude-nonnull-annotation: true
          description: RTSP is a protocol to request media to be sent, and to multiplex said media over one or more connections back to the client
          example: 'rtsp://media.c13.eagleyenetworks.com/media/streams/main/rtsp'
        rtspsUrl:
          type: string
          x-jsoninclude-nonnull-annotation: true
          description: Same as RTSP, but communication happens over a TLS socket instead of an unencrypted TCP socket
          example: 'rtsps://media.c13.eagleyenetworks.com/media/streams/main/rtsp'
        rtspHttpsUrl:
          type: string
          x-jsoninclude-nonnull-annotation: true
          description: Same as RTSP, but instead of communication happening over TCP, the protocol is tunneled over HTTPS
          example: 'rtsp://media.c13.eagleyenetworks.com:443/media/streams/main/rtsp'
        hlsUrl:
          type: string
          nullable: true
          x-jsoninclude-nonnull-annotation: true
          description: Http Live Streaming can be used to deliver a live stream over HTTPS
          example: 'https://media.c13.eagleyenetworks.com/media/streams/main/hls'
        multipartUrl:
          type: string
          x-jsoninclude-nonnull-annotation: true
          description: Proprietary protocol that uses multipart over HTTPS to deliver raw encoded image, video and audio frames as they become available
        webRtcUrl:
          type: string
          nullable: true
          x-jsoninclude-nonnull-annotation: true
          description: WebRTC can be used to set-up push to talk connections with speakers
          example: 'https://media.c13.eagleyenetworks.com/media/streams/main/webRtc'

  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT 
security:
  - bearerAuth: []